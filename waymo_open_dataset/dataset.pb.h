// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/dataset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fdataset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fdataset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "waymo_open_dataset/label.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fdataset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto;
namespace waymo {
namespace open_dataset {
class CameraCalibration;
class CameraCalibrationDefaultTypeInternal;
extern CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;
class CameraImage;
class CameraImageDefaultTypeInternal;
extern CameraImageDefaultTypeInternal _CameraImage_default_instance_;
class CameraLabels;
class CameraLabelsDefaultTypeInternal;
extern CameraLabelsDefaultTypeInternal _CameraLabels_default_instance_;
class CameraName;
class CameraNameDefaultTypeInternal;
extern CameraNameDefaultTypeInternal _CameraName_default_instance_;
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class Context_Stats;
class Context_StatsDefaultTypeInternal;
extern Context_StatsDefaultTypeInternal _Context_Stats_default_instance_;
class Context_Stats_ObjectCount;
class Context_Stats_ObjectCountDefaultTypeInternal;
extern Context_Stats_ObjectCountDefaultTypeInternal _Context_Stats_ObjectCount_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Laser;
class LaserDefaultTypeInternal;
extern LaserDefaultTypeInternal _Laser_default_instance_;
class LaserCalibration;
class LaserCalibrationDefaultTypeInternal;
extern LaserCalibrationDefaultTypeInternal _LaserCalibration_default_instance_;
class LaserName;
class LaserNameDefaultTypeInternal;
extern LaserNameDefaultTypeInternal _LaserName_default_instance_;
class MatrixFloat;
class MatrixFloatDefaultTypeInternal;
extern MatrixFloatDefaultTypeInternal _MatrixFloat_default_instance_;
class MatrixInt32;
class MatrixInt32DefaultTypeInternal;
extern MatrixInt32DefaultTypeInternal _MatrixInt32_default_instance_;
class MatrixShape;
class MatrixShapeDefaultTypeInternal;
extern MatrixShapeDefaultTypeInternal _MatrixShape_default_instance_;
class RangeImage;
class RangeImageDefaultTypeInternal;
extern RangeImageDefaultTypeInternal _RangeImage_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::CameraCalibration* Arena::CreateMaybeMessage<::waymo::open_dataset::CameraCalibration>(Arena*);
template<> ::waymo::open_dataset::CameraImage* Arena::CreateMaybeMessage<::waymo::open_dataset::CameraImage>(Arena*);
template<> ::waymo::open_dataset::CameraLabels* Arena::CreateMaybeMessage<::waymo::open_dataset::CameraLabels>(Arena*);
template<> ::waymo::open_dataset::CameraName* Arena::CreateMaybeMessage<::waymo::open_dataset::CameraName>(Arena*);
template<> ::waymo::open_dataset::Context* Arena::CreateMaybeMessage<::waymo::open_dataset::Context>(Arena*);
template<> ::waymo::open_dataset::Context_Stats* Arena::CreateMaybeMessage<::waymo::open_dataset::Context_Stats>(Arena*);
template<> ::waymo::open_dataset::Context_Stats_ObjectCount* Arena::CreateMaybeMessage<::waymo::open_dataset::Context_Stats_ObjectCount>(Arena*);
template<> ::waymo::open_dataset::Frame* Arena::CreateMaybeMessage<::waymo::open_dataset::Frame>(Arena*);
template<> ::waymo::open_dataset::Laser* Arena::CreateMaybeMessage<::waymo::open_dataset::Laser>(Arena*);
template<> ::waymo::open_dataset::LaserCalibration* Arena::CreateMaybeMessage<::waymo::open_dataset::LaserCalibration>(Arena*);
template<> ::waymo::open_dataset::LaserName* Arena::CreateMaybeMessage<::waymo::open_dataset::LaserName>(Arena*);
template<> ::waymo::open_dataset::MatrixFloat* Arena::CreateMaybeMessage<::waymo::open_dataset::MatrixFloat>(Arena*);
template<> ::waymo::open_dataset::MatrixInt32* Arena::CreateMaybeMessage<::waymo::open_dataset::MatrixInt32>(Arena*);
template<> ::waymo::open_dataset::MatrixShape* Arena::CreateMaybeMessage<::waymo::open_dataset::MatrixShape>(Arena*);
template<> ::waymo::open_dataset::RangeImage* Arena::CreateMaybeMessage<::waymo::open_dataset::RangeImage>(Arena*);
template<> ::waymo::open_dataset::Transform* Arena::CreateMaybeMessage<::waymo::open_dataset::Transform>(Arena*);
template<> ::waymo::open_dataset::Velocity* Arena::CreateMaybeMessage<::waymo::open_dataset::Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum CameraName_Name : int {
  CameraName_Name_UNKNOWN = 0,
  CameraName_Name_FRONT = 1,
  CameraName_Name_FRONT_LEFT = 2,
  CameraName_Name_FRONT_RIGHT = 3,
  CameraName_Name_SIDE_LEFT = 4,
  CameraName_Name_SIDE_RIGHT = 5
};
bool CameraName_Name_IsValid(int value);
constexpr CameraName_Name CameraName_Name_Name_MIN = CameraName_Name_UNKNOWN;
constexpr CameraName_Name CameraName_Name_Name_MAX = CameraName_Name_SIDE_RIGHT;
constexpr int CameraName_Name_Name_ARRAYSIZE = CameraName_Name_Name_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraName_Name_descriptor();
template<typename T>
inline const std::string& CameraName_Name_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraName_Name>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraName_Name_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraName_Name_descriptor(), enum_t_value);
}
inline bool CameraName_Name_Parse(
    const std::string& name, CameraName_Name* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraName_Name>(
    CameraName_Name_descriptor(), name, value);
}
enum LaserName_Name : int {
  LaserName_Name_UNKNOWN = 0,
  LaserName_Name_TOP = 1,
  LaserName_Name_FRONT = 2,
  LaserName_Name_SIDE_LEFT = 3,
  LaserName_Name_SIDE_RIGHT = 4,
  LaserName_Name_REAR = 5
};
bool LaserName_Name_IsValid(int value);
constexpr LaserName_Name LaserName_Name_Name_MIN = LaserName_Name_UNKNOWN;
constexpr LaserName_Name LaserName_Name_Name_MAX = LaserName_Name_REAR;
constexpr int LaserName_Name_Name_ARRAYSIZE = LaserName_Name_Name_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaserName_Name_descriptor();
template<typename T>
inline const std::string& LaserName_Name_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaserName_Name>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaserName_Name_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaserName_Name_descriptor(), enum_t_value);
}
inline bool LaserName_Name_Parse(
    const std::string& name, LaserName_Name* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaserName_Name>(
    LaserName_Name_descriptor(), name, value);
}
enum CameraCalibration_RollingShutterReadOutDirection : int {
  CameraCalibration_RollingShutterReadOutDirection_UNKNOWN = 0,
  CameraCalibration_RollingShutterReadOutDirection_TOP_TO_BOTTOM = 1,
  CameraCalibration_RollingShutterReadOutDirection_LEFT_TO_RIGHT = 2,
  CameraCalibration_RollingShutterReadOutDirection_BOTTOM_TO_TOP = 3,
  CameraCalibration_RollingShutterReadOutDirection_RIGHT_TO_LEFT = 4,
  CameraCalibration_RollingShutterReadOutDirection_GLOBAL_SHUTTER = 5
};
bool CameraCalibration_RollingShutterReadOutDirection_IsValid(int value);
constexpr CameraCalibration_RollingShutterReadOutDirection CameraCalibration_RollingShutterReadOutDirection_RollingShutterReadOutDirection_MIN = CameraCalibration_RollingShutterReadOutDirection_UNKNOWN;
constexpr CameraCalibration_RollingShutterReadOutDirection CameraCalibration_RollingShutterReadOutDirection_RollingShutterReadOutDirection_MAX = CameraCalibration_RollingShutterReadOutDirection_GLOBAL_SHUTTER;
constexpr int CameraCalibration_RollingShutterReadOutDirection_RollingShutterReadOutDirection_ARRAYSIZE = CameraCalibration_RollingShutterReadOutDirection_RollingShutterReadOutDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraCalibration_RollingShutterReadOutDirection_descriptor();
template<typename T>
inline const std::string& CameraCalibration_RollingShutterReadOutDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraCalibration_RollingShutterReadOutDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraCalibration_RollingShutterReadOutDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraCalibration_RollingShutterReadOutDirection_descriptor(), enum_t_value);
}
inline bool CameraCalibration_RollingShutterReadOutDirection_Parse(
    const std::string& name, CameraCalibration_RollingShutterReadOutDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraCalibration_RollingShutterReadOutDirection>(
    CameraCalibration_RollingShutterReadOutDirection_descriptor(), name, value);
}
// ===================================================================

class MatrixShape :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MatrixShape) */ {
 public:
  MatrixShape();
  virtual ~MatrixShape();

  MatrixShape(const MatrixShape& from);
  MatrixShape(MatrixShape&& from) noexcept
    : MatrixShape() {
    *this = ::std::move(from);
  }

  inline MatrixShape& operator=(const MatrixShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixShape& operator=(MatrixShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatrixShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixShape* internal_default_instance() {
    return reinterpret_cast<const MatrixShape*>(
               &_MatrixShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MatrixShape* other);
  friend void swap(MatrixShape& a, MatrixShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixShape* New() const final {
    return CreateMaybeMessage<MatrixShape>(nullptr);
  }

  MatrixShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatrixShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatrixShape& from);
  void MergeFrom(const MatrixShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MatrixShape";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dims = 1;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dims();

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MatrixShape)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dims_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class MatrixFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MatrixFloat) */ {
 public:
  MatrixFloat();
  virtual ~MatrixFloat();

  MatrixFloat(const MatrixFloat& from);
  MatrixFloat(MatrixFloat&& from) noexcept
    : MatrixFloat() {
    *this = ::std::move(from);
  }

  inline MatrixFloat& operator=(const MatrixFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixFloat& operator=(MatrixFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatrixFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixFloat* internal_default_instance() {
    return reinterpret_cast<const MatrixFloat*>(
               &_MatrixFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MatrixFloat* other);
  friend void swap(MatrixFloat& a, MatrixFloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixFloat* New() const final {
    return CreateMaybeMessage<MatrixFloat>(nullptr);
  }

  MatrixFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatrixFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatrixFloat& from);
  void MergeFrom(const MatrixFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MatrixFloat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 1 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // optional .waymo.open_dataset.MatrixShape shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  const ::waymo::open_dataset::MatrixShape& shape() const;
  ::waymo::open_dataset::MatrixShape* release_shape();
  ::waymo::open_dataset::MatrixShape* mutable_shape();
  void set_allocated_shape(::waymo::open_dataset::MatrixShape* shape);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MatrixFloat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::waymo::open_dataset::MatrixShape* shape_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class MatrixInt32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MatrixInt32) */ {
 public:
  MatrixInt32();
  virtual ~MatrixInt32();

  MatrixInt32(const MatrixInt32& from);
  MatrixInt32(MatrixInt32&& from) noexcept
    : MatrixInt32() {
    *this = ::std::move(from);
  }

  inline MatrixInt32& operator=(const MatrixInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixInt32& operator=(MatrixInt32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatrixInt32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixInt32* internal_default_instance() {
    return reinterpret_cast<const MatrixInt32*>(
               &_MatrixInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MatrixInt32* other);
  friend void swap(MatrixInt32& a, MatrixInt32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixInt32* New() const final {
    return CreateMaybeMessage<MatrixInt32>(nullptr);
  }

  MatrixInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatrixInt32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatrixInt32& from);
  void MergeFrom(const MatrixInt32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixInt32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MatrixInt32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 data = 1 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // optional .waymo.open_dataset.MatrixShape shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  const ::waymo::open_dataset::MatrixShape& shape() const;
  ::waymo::open_dataset::MatrixShape* release_shape();
  ::waymo::open_dataset::MatrixShape* mutable_shape();
  void set_allocated_shape(::waymo::open_dataset::MatrixShape* shape);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MatrixInt32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::waymo::open_dataset::MatrixShape* shape_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class CameraName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.CameraName) */ {
 public:
  CameraName();
  virtual ~CameraName();

  CameraName(const CameraName& from);
  CameraName(CameraName&& from) noexcept
    : CameraName() {
    *this = ::std::move(from);
  }

  inline CameraName& operator=(const CameraName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraName& operator=(CameraName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraName* internal_default_instance() {
    return reinterpret_cast<const CameraName*>(
               &_CameraName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CameraName* other);
  friend void swap(CameraName& a, CameraName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraName* New() const final {
    return CreateMaybeMessage<CameraName>(nullptr);
  }

  CameraName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraName& from);
  void MergeFrom(const CameraName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.CameraName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraName_Name Name;
  static constexpr Name UNKNOWN =
    CameraName_Name_UNKNOWN;
  static constexpr Name FRONT =
    CameraName_Name_FRONT;
  static constexpr Name FRONT_LEFT =
    CameraName_Name_FRONT_LEFT;
  static constexpr Name FRONT_RIGHT =
    CameraName_Name_FRONT_RIGHT;
  static constexpr Name SIDE_LEFT =
    CameraName_Name_SIDE_LEFT;
  static constexpr Name SIDE_RIGHT =
    CameraName_Name_SIDE_RIGHT;
  static inline bool Name_IsValid(int value) {
    return CameraName_Name_IsValid(value);
  }
  static constexpr Name Name_MIN =
    CameraName_Name_Name_MIN;
  static constexpr Name Name_MAX =
    CameraName_Name_Name_MAX;
  static constexpr int Name_ARRAYSIZE =
    CameraName_Name_Name_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Name_descriptor() {
    return CameraName_Name_descriptor();
  }
  template<typename T>
  static inline const std::string& Name_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Name>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Name_Name.");
    return CameraName_Name_Name(enum_t_value);
  }
  static inline bool Name_Parse(const std::string& name,
      Name* value) {
    return CameraName_Name_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.CameraName)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class LaserName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.LaserName) */ {
 public:
  LaserName();
  virtual ~LaserName();

  LaserName(const LaserName& from);
  LaserName(LaserName&& from) noexcept
    : LaserName() {
    *this = ::std::move(from);
  }

  inline LaserName& operator=(const LaserName& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserName& operator=(LaserName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserName* internal_default_instance() {
    return reinterpret_cast<const LaserName*>(
               &_LaserName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LaserName* other);
  friend void swap(LaserName& a, LaserName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserName* New() const final {
    return CreateMaybeMessage<LaserName>(nullptr);
  }

  LaserName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserName& from);
  void MergeFrom(const LaserName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.LaserName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LaserName_Name Name;
  static constexpr Name UNKNOWN =
    LaserName_Name_UNKNOWN;
  static constexpr Name TOP =
    LaserName_Name_TOP;
  static constexpr Name FRONT =
    LaserName_Name_FRONT;
  static constexpr Name SIDE_LEFT =
    LaserName_Name_SIDE_LEFT;
  static constexpr Name SIDE_RIGHT =
    LaserName_Name_SIDE_RIGHT;
  static constexpr Name REAR =
    LaserName_Name_REAR;
  static inline bool Name_IsValid(int value) {
    return LaserName_Name_IsValid(value);
  }
  static constexpr Name Name_MIN =
    LaserName_Name_Name_MIN;
  static constexpr Name Name_MAX =
    LaserName_Name_Name_MAX;
  static constexpr int Name_ARRAYSIZE =
    LaserName_Name_Name_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Name_descriptor() {
    return LaserName_Name_descriptor();
  }
  template<typename T>
  static inline const std::string& Name_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Name>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Name_Name.");
    return LaserName_Name_Name(enum_t_value);
  }
  static inline bool Name_Parse(const std::string& name,
      Name* value) {
    return LaserName_Name_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.LaserName)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class Transform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Transform* other);
  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Transform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double transform = 1;
  int transform_size() const;
  void clear_transform();
  static const int kTransformFieldNumber = 1;
  double transform(int index) const;
  void set_transform(int index, double value);
  void add_transform(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      transform() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_transform();

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Transform)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > transform_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class Velocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Velocity) */ {
 public:
  Velocity();
  virtual ~Velocity();

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Velocity* other);
  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(nullptr);
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Velocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float v_x = 1;
  bool has_v_x() const;
  void clear_v_x();
  static const int kVXFieldNumber = 1;
  float v_x() const;
  void set_v_x(float value);

  // optional float v_y = 2;
  bool has_v_y() const;
  void clear_v_y();
  static const int kVYFieldNumber = 2;
  float v_y() const;
  void set_v_y(float value);

  // optional double w_x = 4;
  bool has_w_x() const;
  void clear_w_x();
  static const int kWXFieldNumber = 4;
  double w_x() const;
  void set_w_x(double value);

  // optional double w_y = 5;
  bool has_w_y() const;
  void clear_w_y();
  static const int kWYFieldNumber = 5;
  double w_y() const;
  void set_w_y(double value);

  // optional double w_z = 6;
  bool has_w_z() const;
  void clear_w_z();
  static const int kWZFieldNumber = 6;
  double w_z() const;
  void set_w_z(double value);

  // optional float v_z = 3;
  bool has_v_z() const;
  void clear_v_z();
  static const int kVZFieldNumber = 3;
  float v_z() const;
  void set_v_z(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Velocity)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float v_x_;
  float v_y_;
  double w_x_;
  double w_y_;
  double w_z_;
  float v_z_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class CameraCalibration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.CameraCalibration) */ {
 public:
  CameraCalibration();
  virtual ~CameraCalibration();

  CameraCalibration(const CameraCalibration& from);
  CameraCalibration(CameraCalibration&& from) noexcept
    : CameraCalibration() {
    *this = ::std::move(from);
  }

  inline CameraCalibration& operator=(const CameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraCalibration& operator=(CameraCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraCalibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraCalibration* internal_default_instance() {
    return reinterpret_cast<const CameraCalibration*>(
               &_CameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CameraCalibration* other);
  friend void swap(CameraCalibration& a, CameraCalibration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraCalibration* New() const final {
    return CreateMaybeMessage<CameraCalibration>(nullptr);
  }

  CameraCalibration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraCalibration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraCalibration& from);
  void MergeFrom(const CameraCalibration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraCalibration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.CameraCalibration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraCalibration_RollingShutterReadOutDirection RollingShutterReadOutDirection;
  static constexpr RollingShutterReadOutDirection UNKNOWN =
    CameraCalibration_RollingShutterReadOutDirection_UNKNOWN;
  static constexpr RollingShutterReadOutDirection TOP_TO_BOTTOM =
    CameraCalibration_RollingShutterReadOutDirection_TOP_TO_BOTTOM;
  static constexpr RollingShutterReadOutDirection LEFT_TO_RIGHT =
    CameraCalibration_RollingShutterReadOutDirection_LEFT_TO_RIGHT;
  static constexpr RollingShutterReadOutDirection BOTTOM_TO_TOP =
    CameraCalibration_RollingShutterReadOutDirection_BOTTOM_TO_TOP;
  static constexpr RollingShutterReadOutDirection RIGHT_TO_LEFT =
    CameraCalibration_RollingShutterReadOutDirection_RIGHT_TO_LEFT;
  static constexpr RollingShutterReadOutDirection GLOBAL_SHUTTER =
    CameraCalibration_RollingShutterReadOutDirection_GLOBAL_SHUTTER;
  static inline bool RollingShutterReadOutDirection_IsValid(int value) {
    return CameraCalibration_RollingShutterReadOutDirection_IsValid(value);
  }
  static constexpr RollingShutterReadOutDirection RollingShutterReadOutDirection_MIN =
    CameraCalibration_RollingShutterReadOutDirection_RollingShutterReadOutDirection_MIN;
  static constexpr RollingShutterReadOutDirection RollingShutterReadOutDirection_MAX =
    CameraCalibration_RollingShutterReadOutDirection_RollingShutterReadOutDirection_MAX;
  static constexpr int RollingShutterReadOutDirection_ARRAYSIZE =
    CameraCalibration_RollingShutterReadOutDirection_RollingShutterReadOutDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RollingShutterReadOutDirection_descriptor() {
    return CameraCalibration_RollingShutterReadOutDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& RollingShutterReadOutDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RollingShutterReadOutDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RollingShutterReadOutDirection_Name.");
    return CameraCalibration_RollingShutterReadOutDirection_Name(enum_t_value);
  }
  static inline bool RollingShutterReadOutDirection_Parse(const std::string& name,
      RollingShutterReadOutDirection* value) {
    return CameraCalibration_RollingShutterReadOutDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated double intrinsic = 2;
  int intrinsic_size() const;
  void clear_intrinsic();
  static const int kIntrinsicFieldNumber = 2;
  double intrinsic(int index) const;
  void set_intrinsic(int index, double value);
  void add_intrinsic(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      intrinsic() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_intrinsic();

  // optional .waymo.open_dataset.Transform extrinsic = 3;
  bool has_extrinsic() const;
  void clear_extrinsic();
  static const int kExtrinsicFieldNumber = 3;
  const ::waymo::open_dataset::Transform& extrinsic() const;
  ::waymo::open_dataset::Transform* release_extrinsic();
  ::waymo::open_dataset::Transform* mutable_extrinsic();
  void set_allocated_extrinsic(::waymo::open_dataset::Transform* extrinsic);

  // optional .waymo.open_dataset.CameraName.Name name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::waymo::open_dataset::CameraName_Name name() const;
  void set_name(::waymo::open_dataset::CameraName_Name value);

  // optional int32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .waymo.open_dataset.CameraCalibration.RollingShutterReadOutDirection rolling_shutter_direction = 6;
  bool has_rolling_shutter_direction() const;
  void clear_rolling_shutter_direction();
  static const int kRollingShutterDirectionFieldNumber = 6;
  ::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection rolling_shutter_direction() const;
  void set_rolling_shutter_direction(::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.CameraCalibration)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > intrinsic_;
  ::waymo::open_dataset::Transform* extrinsic_;
  int name_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  int rolling_shutter_direction_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class LaserCalibration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.LaserCalibration) */ {
 public:
  LaserCalibration();
  virtual ~LaserCalibration();

  LaserCalibration(const LaserCalibration& from);
  LaserCalibration(LaserCalibration&& from) noexcept
    : LaserCalibration() {
    *this = ::std::move(from);
  }

  inline LaserCalibration& operator=(const LaserCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserCalibration& operator=(LaserCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserCalibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserCalibration* internal_default_instance() {
    return reinterpret_cast<const LaserCalibration*>(
               &_LaserCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LaserCalibration* other);
  friend void swap(LaserCalibration& a, LaserCalibration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserCalibration* New() const final {
    return CreateMaybeMessage<LaserCalibration>(nullptr);
  }

  LaserCalibration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserCalibration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserCalibration& from);
  void MergeFrom(const LaserCalibration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserCalibration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.LaserCalibration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double beam_inclinations = 2;
  int beam_inclinations_size() const;
  void clear_beam_inclinations();
  static const int kBeamInclinationsFieldNumber = 2;
  double beam_inclinations(int index) const;
  void set_beam_inclinations(int index, double value);
  void add_beam_inclinations(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      beam_inclinations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_beam_inclinations();

  // optional .waymo.open_dataset.Transform extrinsic = 5;
  bool has_extrinsic() const;
  void clear_extrinsic();
  static const int kExtrinsicFieldNumber = 5;
  const ::waymo::open_dataset::Transform& extrinsic() const;
  ::waymo::open_dataset::Transform* release_extrinsic();
  ::waymo::open_dataset::Transform* mutable_extrinsic();
  void set_allocated_extrinsic(::waymo::open_dataset::Transform* extrinsic);

  // optional double beam_inclination_min = 3;
  bool has_beam_inclination_min() const;
  void clear_beam_inclination_min();
  static const int kBeamInclinationMinFieldNumber = 3;
  double beam_inclination_min() const;
  void set_beam_inclination_min(double value);

  // optional double beam_inclination_max = 4;
  bool has_beam_inclination_max() const;
  void clear_beam_inclination_max();
  static const int kBeamInclinationMaxFieldNumber = 4;
  double beam_inclination_max() const;
  void set_beam_inclination_max(double value);

  // optional .waymo.open_dataset.LaserName.Name name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::waymo::open_dataset::LaserName_Name name() const;
  void set_name(::waymo::open_dataset::LaserName_Name value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.LaserCalibration)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > beam_inclinations_;
  ::waymo::open_dataset::Transform* extrinsic_;
  double beam_inclination_min_;
  double beam_inclination_max_;
  int name_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class Context_Stats_ObjectCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Context.Stats.ObjectCount) */ {
 public:
  Context_Stats_ObjectCount();
  virtual ~Context_Stats_ObjectCount();

  Context_Stats_ObjectCount(const Context_Stats_ObjectCount& from);
  Context_Stats_ObjectCount(Context_Stats_ObjectCount&& from) noexcept
    : Context_Stats_ObjectCount() {
    *this = ::std::move(from);
  }

  inline Context_Stats_ObjectCount& operator=(const Context_Stats_ObjectCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context_Stats_ObjectCount& operator=(Context_Stats_ObjectCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Context_Stats_ObjectCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context_Stats_ObjectCount* internal_default_instance() {
    return reinterpret_cast<const Context_Stats_ObjectCount*>(
               &_Context_Stats_ObjectCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Context_Stats_ObjectCount* other);
  friend void swap(Context_Stats_ObjectCount& a, Context_Stats_ObjectCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Context_Stats_ObjectCount* New() const final {
    return CreateMaybeMessage<Context_Stats_ObjectCount>(nullptr);
  }

  Context_Stats_ObjectCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context_Stats_ObjectCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Context_Stats_ObjectCount& from);
  void MergeFrom(const Context_Stats_ObjectCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context_Stats_ObjectCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Context.Stats.ObjectCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .waymo.open_dataset.Label.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::waymo::open_dataset::Label_Type type() const;
  void set_type(::waymo::open_dataset::Label_Type value);

  // optional int32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Context.Stats.ObjectCount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class Context_Stats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Context.Stats) */ {
 public:
  Context_Stats();
  virtual ~Context_Stats();

  Context_Stats(const Context_Stats& from);
  Context_Stats(Context_Stats&& from) noexcept
    : Context_Stats() {
    *this = ::std::move(from);
  }

  inline Context_Stats& operator=(const Context_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context_Stats& operator=(Context_Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Context_Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context_Stats* internal_default_instance() {
    return reinterpret_cast<const Context_Stats*>(
               &_Context_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Context_Stats* other);
  friend void swap(Context_Stats& a, Context_Stats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Context_Stats* New() const final {
    return CreateMaybeMessage<Context_Stats>(nullptr);
  }

  Context_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context_Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Context_Stats& from);
  void MergeFrom(const Context_Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context_Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Context.Stats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Context_Stats_ObjectCount ObjectCount;

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.Context.Stats.ObjectCount laser_object_counts = 1;
  int laser_object_counts_size() const;
  void clear_laser_object_counts();
  static const int kLaserObjectCountsFieldNumber = 1;
  ::waymo::open_dataset::Context_Stats_ObjectCount* mutable_laser_object_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >*
      mutable_laser_object_counts();
  const ::waymo::open_dataset::Context_Stats_ObjectCount& laser_object_counts(int index) const;
  ::waymo::open_dataset::Context_Stats_ObjectCount* add_laser_object_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >&
      laser_object_counts() const;

  // repeated .waymo.open_dataset.Context.Stats.ObjectCount camera_object_counts = 5;
  int camera_object_counts_size() const;
  void clear_camera_object_counts();
  static const int kCameraObjectCountsFieldNumber = 5;
  ::waymo::open_dataset::Context_Stats_ObjectCount* mutable_camera_object_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >*
      mutable_camera_object_counts();
  const ::waymo::open_dataset::Context_Stats_ObjectCount& camera_object_counts(int index) const;
  ::waymo::open_dataset::Context_Stats_ObjectCount* add_camera_object_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >&
      camera_object_counts() const;

  // optional string time_of_day = 2;
  bool has_time_of_day() const;
  void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 2;
  const std::string& time_of_day() const;
  void set_time_of_day(const std::string& value);
  void set_time_of_day(std::string&& value);
  void set_time_of_day(const char* value);
  void set_time_of_day(const char* value, size_t size);
  std::string* mutable_time_of_day();
  std::string* release_time_of_day();
  void set_allocated_time_of_day(std::string* time_of_day);

  // optional string location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);

  // optional string weather = 4;
  bool has_weather() const;
  void clear_weather();
  static const int kWeatherFieldNumber = 4;
  const std::string& weather() const;
  void set_weather(const std::string& value);
  void set_weather(std::string&& value);
  void set_weather(const char* value);
  void set_weather(const char* value, size_t size);
  std::string* mutable_weather();
  std::string* release_weather();
  void set_allocated_weather(std::string* weather);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Context.Stats)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount > laser_object_counts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount > camera_object_counts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_of_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weather_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class Context :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Context) */ {
 public:
  Context();
  virtual ~Context();

  Context(const Context& from);
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context& operator=(Context&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Context* other);
  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const final {
    return CreateMaybeMessage<Context>(nullptr);
  }

  Context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Context";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Context_Stats Stats;

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.CameraCalibration camera_calibrations = 2;
  int camera_calibrations_size() const;
  void clear_camera_calibrations();
  static const int kCameraCalibrationsFieldNumber = 2;
  ::waymo::open_dataset::CameraCalibration* mutable_camera_calibrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraCalibration >*
      mutable_camera_calibrations();
  const ::waymo::open_dataset::CameraCalibration& camera_calibrations(int index) const;
  ::waymo::open_dataset::CameraCalibration* add_camera_calibrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraCalibration >&
      camera_calibrations() const;

  // repeated .waymo.open_dataset.LaserCalibration laser_calibrations = 3;
  int laser_calibrations_size() const;
  void clear_laser_calibrations();
  static const int kLaserCalibrationsFieldNumber = 3;
  ::waymo::open_dataset::LaserCalibration* mutable_laser_calibrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::LaserCalibration >*
      mutable_laser_calibrations();
  const ::waymo::open_dataset::LaserCalibration& laser_calibrations(int index) const;
  ::waymo::open_dataset::LaserCalibration* add_laser_calibrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::LaserCalibration >&
      laser_calibrations() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .waymo.open_dataset.Context.Stats stats = 4;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 4;
  const ::waymo::open_dataset::Context_Stats& stats() const;
  ::waymo::open_dataset::Context_Stats* release_stats();
  ::waymo::open_dataset::Context_Stats* mutable_stats();
  void set_allocated_stats(::waymo::open_dataset::Context_Stats* stats);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Context)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraCalibration > camera_calibrations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::LaserCalibration > laser_calibrations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::waymo::open_dataset::Context_Stats* stats_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class RangeImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.RangeImage) */ {
 public:
  RangeImage();
  virtual ~RangeImage();

  RangeImage(const RangeImage& from);
  RangeImage(RangeImage&& from) noexcept
    : RangeImage() {
    *this = ::std::move(from);
  }

  inline RangeImage& operator=(const RangeImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeImage& operator=(RangeImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeImage* internal_default_instance() {
    return reinterpret_cast<const RangeImage*>(
               &_RangeImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RangeImage* other);
  friend void swap(RangeImage& a, RangeImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeImage* New() const final {
    return CreateMaybeMessage<RangeImage>(nullptr);
  }

  RangeImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeImage& from);
  void MergeFrom(const RangeImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.RangeImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes range_image_compressed = 2;
  bool has_range_image_compressed() const;
  void clear_range_image_compressed();
  static const int kRangeImageCompressedFieldNumber = 2;
  const std::string& range_image_compressed() const;
  void set_range_image_compressed(const std::string& value);
  void set_range_image_compressed(std::string&& value);
  void set_range_image_compressed(const char* value);
  void set_range_image_compressed(const void* value, size_t size);
  std::string* mutable_range_image_compressed();
  std::string* release_range_image_compressed();
  void set_allocated_range_image_compressed(std::string* range_image_compressed);

  // optional bytes camera_projection_compressed = 3;
  bool has_camera_projection_compressed() const;
  void clear_camera_projection_compressed();
  static const int kCameraProjectionCompressedFieldNumber = 3;
  const std::string& camera_projection_compressed() const;
  void set_camera_projection_compressed(const std::string& value);
  void set_camera_projection_compressed(std::string&& value);
  void set_camera_projection_compressed(const char* value);
  void set_camera_projection_compressed(const void* value, size_t size);
  std::string* mutable_camera_projection_compressed();
  std::string* release_camera_projection_compressed();
  void set_allocated_camera_projection_compressed(std::string* camera_projection_compressed);

  // optional bytes range_image_pose_compressed = 4;
  bool has_range_image_pose_compressed() const;
  void clear_range_image_pose_compressed();
  static const int kRangeImagePoseCompressedFieldNumber = 4;
  const std::string& range_image_pose_compressed() const;
  void set_range_image_pose_compressed(const std::string& value);
  void set_range_image_pose_compressed(std::string&& value);
  void set_range_image_pose_compressed(const char* value);
  void set_range_image_pose_compressed(const void* value, size_t size);
  std::string* mutable_range_image_pose_compressed();
  std::string* release_range_image_pose_compressed();
  void set_allocated_range_image_pose_compressed(std::string* range_image_pose_compressed);

  // optional .waymo.open_dataset.MatrixFloat range_image = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_range_image() const;
  PROTOBUF_DEPRECATED void clear_range_image();
  PROTOBUF_DEPRECATED static const int kRangeImageFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::waymo::open_dataset::MatrixFloat& range_image() const;
  PROTOBUF_DEPRECATED ::waymo::open_dataset::MatrixFloat* release_range_image();
  PROTOBUF_DEPRECATED ::waymo::open_dataset::MatrixFloat* mutable_range_image();
  PROTOBUF_DEPRECATED void set_allocated_range_image(::waymo::open_dataset::MatrixFloat* range_image);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.RangeImage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_image_compressed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_projection_compressed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_image_pose_compressed_;
  ::waymo::open_dataset::MatrixFloat* range_image_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class CameraImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.CameraImage) */ {
 public:
  CameraImage();
  virtual ~CameraImage();

  CameraImage(const CameraImage& from);
  CameraImage(CameraImage&& from) noexcept
    : CameraImage() {
    *this = ::std::move(from);
  }

  inline CameraImage& operator=(const CameraImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraImage& operator=(CameraImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraImage* internal_default_instance() {
    return reinterpret_cast<const CameraImage*>(
               &_CameraImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CameraImage* other);
  friend void swap(CameraImage& a, CameraImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraImage* New() const final {
    return CreateMaybeMessage<CameraImage>(nullptr);
  }

  CameraImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraImage& from);
  void MergeFrom(const CameraImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.CameraImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);

  // optional .waymo.open_dataset.Transform pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::waymo::open_dataset::Transform& pose() const;
  ::waymo::open_dataset::Transform* release_pose();
  ::waymo::open_dataset::Transform* mutable_pose();
  void set_allocated_pose(::waymo::open_dataset::Transform* pose);

  // optional .waymo.open_dataset.Velocity velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::waymo::open_dataset::Velocity& velocity() const;
  ::waymo::open_dataset::Velocity* release_velocity();
  ::waymo::open_dataset::Velocity* mutable_velocity();
  void set_allocated_velocity(::waymo::open_dataset::Velocity* velocity);

  // optional double pose_timestamp = 5;
  bool has_pose_timestamp() const;
  void clear_pose_timestamp();
  static const int kPoseTimestampFieldNumber = 5;
  double pose_timestamp() const;
  void set_pose_timestamp(double value);

  // optional double shutter = 6;
  bool has_shutter() const;
  void clear_shutter();
  static const int kShutterFieldNumber = 6;
  double shutter() const;
  void set_shutter(double value);

  // optional double camera_trigger_time = 7;
  bool has_camera_trigger_time() const;
  void clear_camera_trigger_time();
  static const int kCameraTriggerTimeFieldNumber = 7;
  double camera_trigger_time() const;
  void set_camera_trigger_time(double value);

  // optional double camera_readout_done_time = 8;
  bool has_camera_readout_done_time() const;
  void clear_camera_readout_done_time();
  static const int kCameraReadoutDoneTimeFieldNumber = 8;
  double camera_readout_done_time() const;
  void set_camera_readout_done_time(double value);

  // optional .waymo.open_dataset.CameraName.Name name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::waymo::open_dataset::CameraName_Name name() const;
  void set_name(::waymo::open_dataset::CameraName_Name value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.CameraImage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::waymo::open_dataset::Transform* pose_;
  ::waymo::open_dataset::Velocity* velocity_;
  double pose_timestamp_;
  double shutter_;
  double camera_trigger_time_;
  double camera_readout_done_time_;
  int name_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class CameraLabels :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.CameraLabels) */ {
 public:
  CameraLabels();
  virtual ~CameraLabels();

  CameraLabels(const CameraLabels& from);
  CameraLabels(CameraLabels&& from) noexcept
    : CameraLabels() {
    *this = ::std::move(from);
  }

  inline CameraLabels& operator=(const CameraLabels& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraLabels& operator=(CameraLabels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraLabels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraLabels* internal_default_instance() {
    return reinterpret_cast<const CameraLabels*>(
               &_CameraLabels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CameraLabels* other);
  friend void swap(CameraLabels& a, CameraLabels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraLabels* New() const final {
    return CreateMaybeMessage<CameraLabels>(nullptr);
  }

  CameraLabels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraLabels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraLabels& from);
  void MergeFrom(const CameraLabels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraLabels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.CameraLabels";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.Label labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  ::waymo::open_dataset::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >*
      mutable_labels();
  const ::waymo::open_dataset::Label& labels(int index) const;
  ::waymo::open_dataset::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >&
      labels() const;

  // optional .waymo.open_dataset.CameraName.Name name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::waymo::open_dataset::CameraName_Name name() const;
  void set_name(::waymo::open_dataset::CameraName_Name value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.CameraLabels)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label > labels_;
  int name_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class Laser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Laser) */ {
 public:
  Laser();
  virtual ~Laser();

  Laser(const Laser& from);
  Laser(Laser&& from) noexcept
    : Laser() {
    *this = ::std::move(from);
  }

  inline Laser& operator=(const Laser& from) {
    CopyFrom(from);
    return *this;
  }
  inline Laser& operator=(Laser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Laser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Laser* internal_default_instance() {
    return reinterpret_cast<const Laser*>(
               &_Laser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Laser* other);
  friend void swap(Laser& a, Laser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Laser* New() const final {
    return CreateMaybeMessage<Laser>(nullptr);
  }

  Laser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Laser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Laser& from);
  void MergeFrom(const Laser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Laser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Laser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .waymo.open_dataset.RangeImage ri_return1 = 2;
  bool has_ri_return1() const;
  void clear_ri_return1();
  static const int kRiReturn1FieldNumber = 2;
  const ::waymo::open_dataset::RangeImage& ri_return1() const;
  ::waymo::open_dataset::RangeImage* release_ri_return1();
  ::waymo::open_dataset::RangeImage* mutable_ri_return1();
  void set_allocated_ri_return1(::waymo::open_dataset::RangeImage* ri_return1);

  // optional .waymo.open_dataset.RangeImage ri_return2 = 3;
  bool has_ri_return2() const;
  void clear_ri_return2();
  static const int kRiReturn2FieldNumber = 3;
  const ::waymo::open_dataset::RangeImage& ri_return2() const;
  ::waymo::open_dataset::RangeImage* release_ri_return2();
  ::waymo::open_dataset::RangeImage* mutable_ri_return2();
  void set_allocated_ri_return2(::waymo::open_dataset::RangeImage* ri_return2);

  // optional .waymo.open_dataset.LaserName.Name name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::waymo::open_dataset::LaserName_Name name() const;
  void set_name(::waymo::open_dataset::LaserName_Name value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Laser)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::RangeImage* ri_return1_;
  ::waymo::open_dataset::RangeImage* ri_return2_;
  int name_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.CameraImage images = 4;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 4;
  ::waymo::open_dataset::CameraImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraImage >*
      mutable_images();
  const ::waymo::open_dataset::CameraImage& images(int index) const;
  ::waymo::open_dataset::CameraImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraImage >&
      images() const;

  // repeated .waymo.open_dataset.Laser lasers = 5;
  int lasers_size() const;
  void clear_lasers();
  static const int kLasersFieldNumber = 5;
  ::waymo::open_dataset::Laser* mutable_lasers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >*
      mutable_lasers();
  const ::waymo::open_dataset::Laser& lasers(int index) const;
  ::waymo::open_dataset::Laser* add_lasers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >&
      lasers() const;

  // repeated .waymo.open_dataset.Label laser_labels = 6;
  int laser_labels_size() const;
  void clear_laser_labels();
  static const int kLaserLabelsFieldNumber = 6;
  ::waymo::open_dataset::Label* mutable_laser_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >*
      mutable_laser_labels();
  const ::waymo::open_dataset::Label& laser_labels(int index) const;
  ::waymo::open_dataset::Label* add_laser_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >&
      laser_labels() const;

  // repeated .waymo.open_dataset.Polygon2dProto no_label_zones = 7;
  int no_label_zones_size() const;
  void clear_no_label_zones();
  static const int kNoLabelZonesFieldNumber = 7;
  ::waymo::open_dataset::Polygon2dProto* mutable_no_label_zones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Polygon2dProto >*
      mutable_no_label_zones();
  const ::waymo::open_dataset::Polygon2dProto& no_label_zones(int index) const;
  ::waymo::open_dataset::Polygon2dProto* add_no_label_zones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Polygon2dProto >&
      no_label_zones() const;

  // repeated .waymo.open_dataset.CameraLabels camera_labels = 8;
  int camera_labels_size() const;
  void clear_camera_labels();
  static const int kCameraLabelsFieldNumber = 8;
  ::waymo::open_dataset::CameraLabels* mutable_camera_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >*
      mutable_camera_labels();
  const ::waymo::open_dataset::CameraLabels& camera_labels(int index) const;
  ::waymo::open_dataset::CameraLabels* add_camera_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >&
      camera_labels() const;

  // repeated .waymo.open_dataset.CameraLabels projected_lidar_labels = 9;
  int projected_lidar_labels_size() const;
  void clear_projected_lidar_labels();
  static const int kProjectedLidarLabelsFieldNumber = 9;
  ::waymo::open_dataset::CameraLabels* mutable_projected_lidar_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >*
      mutable_projected_lidar_labels();
  const ::waymo::open_dataset::CameraLabels& projected_lidar_labels(int index) const;
  ::waymo::open_dataset::CameraLabels* add_projected_lidar_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >&
      projected_lidar_labels() const;

  // optional .waymo.open_dataset.Context context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::waymo::open_dataset::Context& context() const;
  ::waymo::open_dataset::Context* release_context();
  ::waymo::open_dataset::Context* mutable_context();
  void set_allocated_context(::waymo::open_dataset::Context* context);

  // optional .waymo.open_dataset.Transform pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::waymo::open_dataset::Transform& pose() const;
  ::waymo::open_dataset::Transform* release_pose();
  ::waymo::open_dataset::Transform* mutable_pose();
  void set_allocated_pose(::waymo::open_dataset::Transform* pose);

  // optional int64 timestamp_micros = 2;
  bool has_timestamp_micros() const;
  void clear_timestamp_micros();
  static const int kTimestampMicrosFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros() const;
  void set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Frame)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraImage > images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser > lasers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label > laser_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Polygon2dProto > no_label_zones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels > camera_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels > projected_lidar_labels_;
  ::waymo::open_dataset::Context* context_;
  ::waymo::open_dataset::Transform* pose_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fdataset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatrixShape

// repeated int32 dims = 1;
inline int MatrixShape::dims_size() const {
  return dims_.size();
}
inline void MatrixShape::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixShape::dims(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MatrixShape.dims)
  return dims_.Get(index);
}
inline void MatrixShape::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MatrixShape.dims)
}
inline void MatrixShape::add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MatrixShape.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MatrixShape::dims() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MatrixShape.dims)
  return dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MatrixShape::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MatrixShape.dims)
  return &dims_;
}

// -------------------------------------------------------------------

// MatrixFloat

// repeated float data = 1 [packed = true];
inline int MatrixFloat::data_size() const {
  return data_.size();
}
inline void MatrixFloat::clear_data() {
  data_.Clear();
}
inline float MatrixFloat::data(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MatrixFloat.data)
  return data_.Get(index);
}
inline void MatrixFloat::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MatrixFloat.data)
}
inline void MatrixFloat::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MatrixFloat.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MatrixFloat::data() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MatrixFloat.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MatrixFloat::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MatrixFloat.data)
  return &data_;
}

// optional .waymo.open_dataset.MatrixShape shape = 2;
inline bool MatrixFloat::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatrixFloat::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::MatrixShape& MatrixFloat::shape() const {
  const ::waymo::open_dataset::MatrixShape* p = shape_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MatrixFloat.shape)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::MatrixShape*>(
      &::waymo::open_dataset::_MatrixShape_default_instance_);
}
inline ::waymo::open_dataset::MatrixShape* MatrixFloat::release_shape() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.MatrixFloat.shape)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::MatrixShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::MatrixShape* MatrixFloat::mutable_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::MatrixShape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MatrixFloat.shape)
  return shape_;
}
inline void MatrixFloat::set_allocated_shape(::waymo::open_dataset::MatrixShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MatrixFloat.shape)
}

// -------------------------------------------------------------------

// MatrixInt32

// repeated int32 data = 1 [packed = true];
inline int MatrixInt32::data_size() const {
  return data_.size();
}
inline void MatrixInt32::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixInt32::data(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MatrixInt32.data)
  return data_.Get(index);
}
inline void MatrixInt32::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MatrixInt32.data)
}
inline void MatrixInt32::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MatrixInt32.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MatrixInt32::data() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MatrixInt32.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MatrixInt32::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MatrixInt32.data)
  return &data_;
}

// optional .waymo.open_dataset.MatrixShape shape = 2;
inline bool MatrixInt32::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatrixInt32::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::MatrixShape& MatrixInt32::shape() const {
  const ::waymo::open_dataset::MatrixShape* p = shape_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MatrixInt32.shape)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::MatrixShape*>(
      &::waymo::open_dataset::_MatrixShape_default_instance_);
}
inline ::waymo::open_dataset::MatrixShape* MatrixInt32::release_shape() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.MatrixInt32.shape)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::MatrixShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::MatrixShape* MatrixInt32::mutable_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::MatrixShape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MatrixInt32.shape)
  return shape_;
}
inline void MatrixInt32::set_allocated_shape(::waymo::open_dataset::MatrixShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MatrixInt32.shape)
}

// -------------------------------------------------------------------

// CameraName

// -------------------------------------------------------------------

// LaserName

// -------------------------------------------------------------------

// Transform

// repeated double transform = 1;
inline int Transform::transform_size() const {
  return transform_.size();
}
inline void Transform::clear_transform() {
  transform_.Clear();
}
inline double Transform::transform(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Transform.transform)
  return transform_.Get(index);
}
inline void Transform::set_transform(int index, double value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Transform.transform)
}
inline void Transform::add_transform(double value) {
  transform_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Transform.transform)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Transform::transform() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Transform.transform)
  return transform_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Transform::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Transform.transform)
  return &transform_;
}

// -------------------------------------------------------------------

// Velocity

// optional float v_x = 1;
inline bool Velocity::has_v_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Velocity::clear_v_x() {
  v_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Velocity::v_x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Velocity.v_x)
  return v_x_;
}
inline void Velocity::set_v_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  v_x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Velocity.v_x)
}

// optional float v_y = 2;
inline bool Velocity::has_v_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Velocity::clear_v_y() {
  v_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Velocity::v_y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Velocity.v_y)
  return v_y_;
}
inline void Velocity::set_v_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  v_y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Velocity.v_y)
}

// optional float v_z = 3;
inline bool Velocity::has_v_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Velocity::clear_v_z() {
  v_z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Velocity::v_z() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Velocity.v_z)
  return v_z_;
}
inline void Velocity::set_v_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  v_z_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Velocity.v_z)
}

// optional double w_x = 4;
inline bool Velocity::has_w_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Velocity::clear_w_x() {
  w_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Velocity::w_x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Velocity.w_x)
  return w_x_;
}
inline void Velocity::set_w_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  w_x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Velocity.w_x)
}

// optional double w_y = 5;
inline bool Velocity::has_w_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Velocity::clear_w_y() {
  w_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Velocity::w_y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Velocity.w_y)
  return w_y_;
}
inline void Velocity::set_w_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  w_y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Velocity.w_y)
}

// optional double w_z = 6;
inline bool Velocity::has_w_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Velocity::clear_w_z() {
  w_z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Velocity::w_z() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Velocity.w_z)
  return w_z_;
}
inline void Velocity::set_w_z(double value) {
  _has_bits_[0] |= 0x00000010u;
  w_z_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Velocity.w_z)
}

// -------------------------------------------------------------------

// CameraCalibration

// optional .waymo.open_dataset.CameraName.Name name = 1;
inline bool CameraCalibration::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraCalibration::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::waymo::open_dataset::CameraName_Name CameraCalibration::name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraCalibration.name)
  return static_cast< ::waymo::open_dataset::CameraName_Name >(name_);
}
inline void CameraCalibration::set_name(::waymo::open_dataset::CameraName_Name value) {
  assert(::waymo::open_dataset::CameraName_Name_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraCalibration.name)
}

// repeated double intrinsic = 2;
inline int CameraCalibration::intrinsic_size() const {
  return intrinsic_.size();
}
inline void CameraCalibration::clear_intrinsic() {
  intrinsic_.Clear();
}
inline double CameraCalibration::intrinsic(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraCalibration.intrinsic)
  return intrinsic_.Get(index);
}
inline void CameraCalibration::set_intrinsic(int index, double value) {
  intrinsic_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraCalibration.intrinsic)
}
inline void CameraCalibration::add_intrinsic(double value) {
  intrinsic_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.CameraCalibration.intrinsic)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraCalibration::intrinsic() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.CameraCalibration.intrinsic)
  return intrinsic_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraCalibration::mutable_intrinsic() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.CameraCalibration.intrinsic)
  return &intrinsic_;
}

// optional .waymo.open_dataset.Transform extrinsic = 3;
inline bool CameraCalibration::has_extrinsic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraCalibration::clear_extrinsic() {
  if (extrinsic_ != nullptr) extrinsic_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::Transform& CameraCalibration::extrinsic() const {
  const ::waymo::open_dataset::Transform* p = extrinsic_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraCalibration.extrinsic)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Transform*>(
      &::waymo::open_dataset::_Transform_default_instance_);
}
inline ::waymo::open_dataset::Transform* CameraCalibration::release_extrinsic() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.CameraCalibration.extrinsic)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Transform* temp = extrinsic_;
  extrinsic_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Transform* CameraCalibration::mutable_extrinsic() {
  _has_bits_[0] |= 0x00000001u;
  if (extrinsic_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Transform>(GetArenaNoVirtual());
    extrinsic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.CameraCalibration.extrinsic)
  return extrinsic_;
}
inline void CameraCalibration::set_allocated_extrinsic(::waymo::open_dataset::Transform* extrinsic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extrinsic_;
  }
  if (extrinsic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extrinsic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrinsic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extrinsic_ = extrinsic;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.CameraCalibration.extrinsic)
}

// optional int32 width = 4;
inline bool CameraCalibration::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraCalibration::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraCalibration::width() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraCalibration.width)
  return width_;
}
inline void CameraCalibration::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraCalibration.width)
}

// optional int32 height = 5;
inline bool CameraCalibration::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraCalibration::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraCalibration::height() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraCalibration.height)
  return height_;
}
inline void CameraCalibration::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraCalibration.height)
}

// optional .waymo.open_dataset.CameraCalibration.RollingShutterReadOutDirection rolling_shutter_direction = 6;
inline bool CameraCalibration::has_rolling_shutter_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraCalibration::clear_rolling_shutter_direction() {
  rolling_shutter_direction_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection CameraCalibration::rolling_shutter_direction() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraCalibration.rolling_shutter_direction)
  return static_cast< ::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection >(rolling_shutter_direction_);
}
inline void CameraCalibration::set_rolling_shutter_direction(::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection value) {
  assert(::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  rolling_shutter_direction_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraCalibration.rolling_shutter_direction)
}

// -------------------------------------------------------------------

// LaserCalibration

// optional .waymo.open_dataset.LaserName.Name name = 1;
inline bool LaserCalibration::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaserCalibration::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::waymo::open_dataset::LaserName_Name LaserCalibration::name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.LaserCalibration.name)
  return static_cast< ::waymo::open_dataset::LaserName_Name >(name_);
}
inline void LaserCalibration::set_name(::waymo::open_dataset::LaserName_Name value) {
  assert(::waymo::open_dataset::LaserName_Name_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  name_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.LaserCalibration.name)
}

// repeated double beam_inclinations = 2;
inline int LaserCalibration::beam_inclinations_size() const {
  return beam_inclinations_.size();
}
inline void LaserCalibration::clear_beam_inclinations() {
  beam_inclinations_.Clear();
}
inline double LaserCalibration::beam_inclinations(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.LaserCalibration.beam_inclinations)
  return beam_inclinations_.Get(index);
}
inline void LaserCalibration::set_beam_inclinations(int index, double value) {
  beam_inclinations_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.LaserCalibration.beam_inclinations)
}
inline void LaserCalibration::add_beam_inclinations(double value) {
  beam_inclinations_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.LaserCalibration.beam_inclinations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaserCalibration::beam_inclinations() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.LaserCalibration.beam_inclinations)
  return beam_inclinations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaserCalibration::mutable_beam_inclinations() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.LaserCalibration.beam_inclinations)
  return &beam_inclinations_;
}

// optional double beam_inclination_min = 3;
inline bool LaserCalibration::has_beam_inclination_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaserCalibration::clear_beam_inclination_min() {
  beam_inclination_min_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LaserCalibration::beam_inclination_min() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.LaserCalibration.beam_inclination_min)
  return beam_inclination_min_;
}
inline void LaserCalibration::set_beam_inclination_min(double value) {
  _has_bits_[0] |= 0x00000002u;
  beam_inclination_min_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.LaserCalibration.beam_inclination_min)
}

// optional double beam_inclination_max = 4;
inline bool LaserCalibration::has_beam_inclination_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaserCalibration::clear_beam_inclination_max() {
  beam_inclination_max_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LaserCalibration::beam_inclination_max() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.LaserCalibration.beam_inclination_max)
  return beam_inclination_max_;
}
inline void LaserCalibration::set_beam_inclination_max(double value) {
  _has_bits_[0] |= 0x00000004u;
  beam_inclination_max_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.LaserCalibration.beam_inclination_max)
}

// optional .waymo.open_dataset.Transform extrinsic = 5;
inline bool LaserCalibration::has_extrinsic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaserCalibration::clear_extrinsic() {
  if (extrinsic_ != nullptr) extrinsic_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::Transform& LaserCalibration::extrinsic() const {
  const ::waymo::open_dataset::Transform* p = extrinsic_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.LaserCalibration.extrinsic)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Transform*>(
      &::waymo::open_dataset::_Transform_default_instance_);
}
inline ::waymo::open_dataset::Transform* LaserCalibration::release_extrinsic() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.LaserCalibration.extrinsic)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Transform* temp = extrinsic_;
  extrinsic_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Transform* LaserCalibration::mutable_extrinsic() {
  _has_bits_[0] |= 0x00000001u;
  if (extrinsic_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Transform>(GetArenaNoVirtual());
    extrinsic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.LaserCalibration.extrinsic)
  return extrinsic_;
}
inline void LaserCalibration::set_allocated_extrinsic(::waymo::open_dataset::Transform* extrinsic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extrinsic_;
  }
  if (extrinsic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extrinsic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrinsic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extrinsic_ = extrinsic;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.LaserCalibration.extrinsic)
}

// -------------------------------------------------------------------

// Context_Stats_ObjectCount

// optional .waymo.open_dataset.Label.Type type = 1;
inline bool Context_Stats_ObjectCount::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Context_Stats_ObjectCount::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::waymo::open_dataset::Label_Type Context_Stats_ObjectCount::type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.Stats.ObjectCount.type)
  return static_cast< ::waymo::open_dataset::Label_Type >(type_);
}
inline void Context_Stats_ObjectCount::set_type(::waymo::open_dataset::Label_Type value) {
  assert(::waymo::open_dataset::Label_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Context.Stats.ObjectCount.type)
}

// optional int32 count = 2;
inline bool Context_Stats_ObjectCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Context_Stats_ObjectCount::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context_Stats_ObjectCount::count() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.Stats.ObjectCount.count)
  return count_;
}
inline void Context_Stats_ObjectCount::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Context.Stats.ObjectCount.count)
}

// -------------------------------------------------------------------

// Context_Stats

// repeated .waymo.open_dataset.Context.Stats.ObjectCount laser_object_counts = 1;
inline int Context_Stats::laser_object_counts_size() const {
  return laser_object_counts_.size();
}
inline void Context_Stats::clear_laser_object_counts() {
  laser_object_counts_.Clear();
}
inline ::waymo::open_dataset::Context_Stats_ObjectCount* Context_Stats::mutable_laser_object_counts(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.Stats.laser_object_counts)
  return laser_object_counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >*
Context_Stats::mutable_laser_object_counts() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Context.Stats.laser_object_counts)
  return &laser_object_counts_;
}
inline const ::waymo::open_dataset::Context_Stats_ObjectCount& Context_Stats::laser_object_counts(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.Stats.laser_object_counts)
  return laser_object_counts_.Get(index);
}
inline ::waymo::open_dataset::Context_Stats_ObjectCount* Context_Stats::add_laser_object_counts() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Context.Stats.laser_object_counts)
  return laser_object_counts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >&
Context_Stats::laser_object_counts() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Context.Stats.laser_object_counts)
  return laser_object_counts_;
}

// repeated .waymo.open_dataset.Context.Stats.ObjectCount camera_object_counts = 5;
inline int Context_Stats::camera_object_counts_size() const {
  return camera_object_counts_.size();
}
inline void Context_Stats::clear_camera_object_counts() {
  camera_object_counts_.Clear();
}
inline ::waymo::open_dataset::Context_Stats_ObjectCount* Context_Stats::mutable_camera_object_counts(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.Stats.camera_object_counts)
  return camera_object_counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >*
Context_Stats::mutable_camera_object_counts() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Context.Stats.camera_object_counts)
  return &camera_object_counts_;
}
inline const ::waymo::open_dataset::Context_Stats_ObjectCount& Context_Stats::camera_object_counts(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.Stats.camera_object_counts)
  return camera_object_counts_.Get(index);
}
inline ::waymo::open_dataset::Context_Stats_ObjectCount* Context_Stats::add_camera_object_counts() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Context.Stats.camera_object_counts)
  return camera_object_counts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Context_Stats_ObjectCount >&
Context_Stats::camera_object_counts() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Context.Stats.camera_object_counts)
  return camera_object_counts_;
}

// optional string time_of_day = 2;
inline bool Context_Stats::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Context_Stats::clear_time_of_day() {
  time_of_day_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Context_Stats::time_of_day() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.Stats.time_of_day)
  return time_of_day_.GetNoArena();
}
inline void Context_Stats::set_time_of_day(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  time_of_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Context.Stats.time_of_day)
}
inline void Context_Stats::set_time_of_day(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  time_of_day_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Context.Stats.time_of_day)
}
inline void Context_Stats::set_time_of_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  time_of_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Context.Stats.time_of_day)
}
inline void Context_Stats::set_time_of_day(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  time_of_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Context.Stats.time_of_day)
}
inline std::string* Context_Stats::mutable_time_of_day() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.Stats.time_of_day)
  return time_of_day_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Context_Stats::release_time_of_day() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Context.Stats.time_of_day)
  if (!has_time_of_day()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return time_of_day_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Context_Stats::set_allocated_time_of_day(std::string* time_of_day) {
  if (time_of_day != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_of_day_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_of_day);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Context.Stats.time_of_day)
}

// optional string location = 3;
inline bool Context_Stats::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Context_Stats::clear_location() {
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Context_Stats::location() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.Stats.location)
  return location_.GetNoArena();
}
inline void Context_Stats::set_location(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Context.Stats.location)
}
inline void Context_Stats::set_location(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Context.Stats.location)
}
inline void Context_Stats::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Context.Stats.location)
}
inline void Context_Stats::set_location(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Context.Stats.location)
}
inline std::string* Context_Stats::mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.Stats.location)
  return location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Context_Stats::release_location() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Context.Stats.location)
  if (!has_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Context_Stats::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Context.Stats.location)
}

// optional string weather = 4;
inline bool Context_Stats::has_weather() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Context_Stats::clear_weather() {
  weather_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Context_Stats::weather() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.Stats.weather)
  return weather_.GetNoArena();
}
inline void Context_Stats::set_weather(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  weather_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Context.Stats.weather)
}
inline void Context_Stats::set_weather(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  weather_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Context.Stats.weather)
}
inline void Context_Stats::set_weather(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  weather_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Context.Stats.weather)
}
inline void Context_Stats::set_weather(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  weather_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Context.Stats.weather)
}
inline std::string* Context_Stats::mutable_weather() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.Stats.weather)
  return weather_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Context_Stats::release_weather() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Context.Stats.weather)
  if (!has_weather()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return weather_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Context_Stats::set_allocated_weather(std::string* weather) {
  if (weather != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  weather_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weather);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Context.Stats.weather)
}

// -------------------------------------------------------------------

// Context

// optional string name = 1;
inline bool Context::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Context::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Context::name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.name)
  return name_.GetNoArena();
}
inline void Context::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Context.name)
}
inline void Context::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Context.name)
}
inline void Context::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Context.name)
}
inline void Context::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Context.name)
}
inline std::string* Context::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Context::release_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Context.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Context.name)
}

// repeated .waymo.open_dataset.CameraCalibration camera_calibrations = 2;
inline int Context::camera_calibrations_size() const {
  return camera_calibrations_.size();
}
inline void Context::clear_camera_calibrations() {
  camera_calibrations_.Clear();
}
inline ::waymo::open_dataset::CameraCalibration* Context::mutable_camera_calibrations(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.camera_calibrations)
  return camera_calibrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraCalibration >*
Context::mutable_camera_calibrations() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Context.camera_calibrations)
  return &camera_calibrations_;
}
inline const ::waymo::open_dataset::CameraCalibration& Context::camera_calibrations(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.camera_calibrations)
  return camera_calibrations_.Get(index);
}
inline ::waymo::open_dataset::CameraCalibration* Context::add_camera_calibrations() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Context.camera_calibrations)
  return camera_calibrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraCalibration >&
Context::camera_calibrations() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Context.camera_calibrations)
  return camera_calibrations_;
}

// repeated .waymo.open_dataset.LaserCalibration laser_calibrations = 3;
inline int Context::laser_calibrations_size() const {
  return laser_calibrations_.size();
}
inline void Context::clear_laser_calibrations() {
  laser_calibrations_.Clear();
}
inline ::waymo::open_dataset::LaserCalibration* Context::mutable_laser_calibrations(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.laser_calibrations)
  return laser_calibrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::LaserCalibration >*
Context::mutable_laser_calibrations() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Context.laser_calibrations)
  return &laser_calibrations_;
}
inline const ::waymo::open_dataset::LaserCalibration& Context::laser_calibrations(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.laser_calibrations)
  return laser_calibrations_.Get(index);
}
inline ::waymo::open_dataset::LaserCalibration* Context::add_laser_calibrations() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Context.laser_calibrations)
  return laser_calibrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::LaserCalibration >&
Context::laser_calibrations() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Context.laser_calibrations)
  return laser_calibrations_;
}

// optional .waymo.open_dataset.Context.Stats stats = 4;
inline bool Context::has_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Context::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::Context_Stats& Context::stats() const {
  const ::waymo::open_dataset::Context_Stats* p = stats_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Context.stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Context_Stats*>(
      &::waymo::open_dataset::_Context_Stats_default_instance_);
}
inline ::waymo::open_dataset::Context_Stats* Context::release_stats() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Context.stats)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::Context_Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Context_Stats* Context::mutable_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Context_Stats>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Context.stats)
  return stats_;
}
inline void Context::set_allocated_stats(::waymo::open_dataset::Context_Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Context.stats)
}

// -------------------------------------------------------------------

// RangeImage

// optional bytes range_image_compressed = 2;
inline bool RangeImage::has_range_image_compressed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeImage::clear_range_image_compressed() {
  range_image_compressed_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RangeImage::range_image_compressed() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.RangeImage.range_image_compressed)
  return range_image_compressed_.GetNoArena();
}
inline void RangeImage::set_range_image_compressed(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  range_image_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.RangeImage.range_image_compressed)
}
inline void RangeImage::set_range_image_compressed(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  range_image_compressed_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.RangeImage.range_image_compressed)
}
inline void RangeImage::set_range_image_compressed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  range_image_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.RangeImage.range_image_compressed)
}
inline void RangeImage::set_range_image_compressed(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  range_image_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.RangeImage.range_image_compressed)
}
inline std::string* RangeImage::mutable_range_image_compressed() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.RangeImage.range_image_compressed)
  return range_image_compressed_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeImage::release_range_image_compressed() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.RangeImage.range_image_compressed)
  if (!has_range_image_compressed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return range_image_compressed_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeImage::set_allocated_range_image_compressed(std::string* range_image_compressed) {
  if (range_image_compressed != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_image_compressed_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_image_compressed);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.RangeImage.range_image_compressed)
}

// optional bytes camera_projection_compressed = 3;
inline bool RangeImage::has_camera_projection_compressed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeImage::clear_camera_projection_compressed() {
  camera_projection_compressed_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RangeImage::camera_projection_compressed() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.RangeImage.camera_projection_compressed)
  return camera_projection_compressed_.GetNoArena();
}
inline void RangeImage::set_camera_projection_compressed(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_projection_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.RangeImage.camera_projection_compressed)
}
inline void RangeImage::set_camera_projection_compressed(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_projection_compressed_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.RangeImage.camera_projection_compressed)
}
inline void RangeImage::set_camera_projection_compressed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  camera_projection_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.RangeImage.camera_projection_compressed)
}
inline void RangeImage::set_camera_projection_compressed(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  camera_projection_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.RangeImage.camera_projection_compressed)
}
inline std::string* RangeImage::mutable_camera_projection_compressed() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.RangeImage.camera_projection_compressed)
  return camera_projection_compressed_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeImage::release_camera_projection_compressed() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.RangeImage.camera_projection_compressed)
  if (!has_camera_projection_compressed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return camera_projection_compressed_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeImage::set_allocated_camera_projection_compressed(std::string* camera_projection_compressed) {
  if (camera_projection_compressed != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  camera_projection_compressed_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_projection_compressed);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.RangeImage.camera_projection_compressed)
}

// optional bytes range_image_pose_compressed = 4;
inline bool RangeImage::has_range_image_pose_compressed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeImage::clear_range_image_pose_compressed() {
  range_image_pose_compressed_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RangeImage::range_image_pose_compressed() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.RangeImage.range_image_pose_compressed)
  return range_image_pose_compressed_.GetNoArena();
}
inline void RangeImage::set_range_image_pose_compressed(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  range_image_pose_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.RangeImage.range_image_pose_compressed)
}
inline void RangeImage::set_range_image_pose_compressed(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  range_image_pose_compressed_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.RangeImage.range_image_pose_compressed)
}
inline void RangeImage::set_range_image_pose_compressed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  range_image_pose_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.RangeImage.range_image_pose_compressed)
}
inline void RangeImage::set_range_image_pose_compressed(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  range_image_pose_compressed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.RangeImage.range_image_pose_compressed)
}
inline std::string* RangeImage::mutable_range_image_pose_compressed() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.RangeImage.range_image_pose_compressed)
  return range_image_pose_compressed_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeImage::release_range_image_pose_compressed() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.RangeImage.range_image_pose_compressed)
  if (!has_range_image_pose_compressed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return range_image_pose_compressed_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeImage::set_allocated_range_image_pose_compressed(std::string* range_image_pose_compressed) {
  if (range_image_pose_compressed != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_image_pose_compressed_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_image_pose_compressed);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.RangeImage.range_image_pose_compressed)
}

// optional .waymo.open_dataset.MatrixFloat range_image = 1 [deprecated = true];
inline bool RangeImage::has_range_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RangeImage::clear_range_image() {
  if (range_image_ != nullptr) range_image_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::waymo::open_dataset::MatrixFloat& RangeImage::range_image() const {
  const ::waymo::open_dataset::MatrixFloat* p = range_image_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.RangeImage.range_image)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::MatrixFloat*>(
      &::waymo::open_dataset::_MatrixFloat_default_instance_);
}
inline ::waymo::open_dataset::MatrixFloat* RangeImage::release_range_image() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.RangeImage.range_image)
  _has_bits_[0] &= ~0x00000008u;
  ::waymo::open_dataset::MatrixFloat* temp = range_image_;
  range_image_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::MatrixFloat* RangeImage::mutable_range_image() {
  _has_bits_[0] |= 0x00000008u;
  if (range_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::MatrixFloat>(GetArenaNoVirtual());
    range_image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.RangeImage.range_image)
  return range_image_;
}
inline void RangeImage::set_allocated_range_image(::waymo::open_dataset::MatrixFloat* range_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete range_image_;
  }
  if (range_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  range_image_ = range_image;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.RangeImage.range_image)
}

// -------------------------------------------------------------------

// CameraImage

// optional .waymo.open_dataset.CameraName.Name name = 1;
inline bool CameraImage::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraImage::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::waymo::open_dataset::CameraName_Name CameraImage::name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.name)
  return static_cast< ::waymo::open_dataset::CameraName_Name >(name_);
}
inline void CameraImage::set_name(::waymo::open_dataset::CameraName_Name value) {
  assert(::waymo::open_dataset::CameraName_Name_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  name_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraImage.name)
}

// optional bytes image = 2;
inline bool CameraImage::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraImage::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraImage::image() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.image)
  return image_.GetNoArena();
}
inline void CameraImage::set_image(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraImage.image)
}
inline void CameraImage::set_image(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.CameraImage.image)
}
inline void CameraImage::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.CameraImage.image)
}
inline void CameraImage::set_image(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.CameraImage.image)
}
inline std::string* CameraImage::mutable_image() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.CameraImage.image)
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraImage::release_image() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.CameraImage.image)
  if (!has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraImage::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.CameraImage.image)
}

// optional .waymo.open_dataset.Transform pose = 3;
inline bool CameraImage::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraImage::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::Transform& CameraImage::pose() const {
  const ::waymo::open_dataset::Transform* p = pose_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Transform*>(
      &::waymo::open_dataset::_Transform_default_instance_);
}
inline ::waymo::open_dataset::Transform* CameraImage::release_pose() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.CameraImage.pose)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::Transform* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Transform* CameraImage::mutable_pose() {
  _has_bits_[0] |= 0x00000002u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Transform>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.CameraImage.pose)
  return pose_;
}
inline void CameraImage::set_allocated_pose(::waymo::open_dataset::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.CameraImage.pose)
}

// optional .waymo.open_dataset.Velocity velocity = 4;
inline bool CameraImage::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraImage::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::waymo::open_dataset::Velocity& CameraImage::velocity() const {
  const ::waymo::open_dataset::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Velocity*>(
      &::waymo::open_dataset::_Velocity_default_instance_);
}
inline ::waymo::open_dataset::Velocity* CameraImage::release_velocity() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.CameraImage.velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::waymo::open_dataset::Velocity* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Velocity* CameraImage::mutable_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.CameraImage.velocity)
  return velocity_;
}
inline void CameraImage::set_allocated_velocity(::waymo::open_dataset::Velocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.CameraImage.velocity)
}

// optional double pose_timestamp = 5;
inline bool CameraImage::has_pose_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraImage::clear_pose_timestamp() {
  pose_timestamp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CameraImage::pose_timestamp() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.pose_timestamp)
  return pose_timestamp_;
}
inline void CameraImage::set_pose_timestamp(double value) {
  _has_bits_[0] |= 0x00000008u;
  pose_timestamp_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraImage.pose_timestamp)
}

// optional double shutter = 6;
inline bool CameraImage::has_shutter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraImage::clear_shutter() {
  shutter_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CameraImage::shutter() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.shutter)
  return shutter_;
}
inline void CameraImage::set_shutter(double value) {
  _has_bits_[0] |= 0x00000010u;
  shutter_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraImage.shutter)
}

// optional double camera_trigger_time = 7;
inline bool CameraImage::has_camera_trigger_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraImage::clear_camera_trigger_time() {
  camera_trigger_time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CameraImage::camera_trigger_time() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.camera_trigger_time)
  return camera_trigger_time_;
}
inline void CameraImage::set_camera_trigger_time(double value) {
  _has_bits_[0] |= 0x00000020u;
  camera_trigger_time_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraImage.camera_trigger_time)
}

// optional double camera_readout_done_time = 8;
inline bool CameraImage::has_camera_readout_done_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraImage::clear_camera_readout_done_time() {
  camera_readout_done_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CameraImage::camera_readout_done_time() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraImage.camera_readout_done_time)
  return camera_readout_done_time_;
}
inline void CameraImage::set_camera_readout_done_time(double value) {
  _has_bits_[0] |= 0x00000040u;
  camera_readout_done_time_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraImage.camera_readout_done_time)
}

// -------------------------------------------------------------------

// CameraLabels

// optional .waymo.open_dataset.CameraName.Name name = 1;
inline bool CameraLabels::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraLabels::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::waymo::open_dataset::CameraName_Name CameraLabels::name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraLabels.name)
  return static_cast< ::waymo::open_dataset::CameraName_Name >(name_);
}
inline void CameraLabels::set_name(::waymo::open_dataset::CameraName_Name value) {
  assert(::waymo::open_dataset::CameraName_Name_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  name_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.CameraLabels.name)
}

// repeated .waymo.open_dataset.Label labels = 2;
inline int CameraLabels::labels_size() const {
  return labels_.size();
}
inline ::waymo::open_dataset::Label* CameraLabels::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.CameraLabels.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >*
CameraLabels::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.CameraLabels.labels)
  return &labels_;
}
inline const ::waymo::open_dataset::Label& CameraLabels::labels(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.CameraLabels.labels)
  return labels_.Get(index);
}
inline ::waymo::open_dataset::Label* CameraLabels::add_labels() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.CameraLabels.labels)
  return labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >&
CameraLabels::labels() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.CameraLabels.labels)
  return labels_;
}

// -------------------------------------------------------------------

// Laser

// optional .waymo.open_dataset.LaserName.Name name = 1;
inline bool Laser::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Laser::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::waymo::open_dataset::LaserName_Name Laser::name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Laser.name)
  return static_cast< ::waymo::open_dataset::LaserName_Name >(name_);
}
inline void Laser::set_name(::waymo::open_dataset::LaserName_Name value) {
  assert(::waymo::open_dataset::LaserName_Name_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  name_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Laser.name)
}

// optional .waymo.open_dataset.RangeImage ri_return1 = 2;
inline bool Laser::has_ri_return1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Laser::clear_ri_return1() {
  if (ri_return1_ != nullptr) ri_return1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::RangeImage& Laser::ri_return1() const {
  const ::waymo::open_dataset::RangeImage* p = ri_return1_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Laser.ri_return1)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::RangeImage*>(
      &::waymo::open_dataset::_RangeImage_default_instance_);
}
inline ::waymo::open_dataset::RangeImage* Laser::release_ri_return1() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Laser.ri_return1)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::RangeImage* temp = ri_return1_;
  ri_return1_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::RangeImage* Laser::mutable_ri_return1() {
  _has_bits_[0] |= 0x00000001u;
  if (ri_return1_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::RangeImage>(GetArenaNoVirtual());
    ri_return1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Laser.ri_return1)
  return ri_return1_;
}
inline void Laser::set_allocated_ri_return1(::waymo::open_dataset::RangeImage* ri_return1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ri_return1_;
  }
  if (ri_return1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ri_return1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ri_return1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ri_return1_ = ri_return1;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Laser.ri_return1)
}

// optional .waymo.open_dataset.RangeImage ri_return2 = 3;
inline bool Laser::has_ri_return2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Laser::clear_ri_return2() {
  if (ri_return2_ != nullptr) ri_return2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::RangeImage& Laser::ri_return2() const {
  const ::waymo::open_dataset::RangeImage* p = ri_return2_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Laser.ri_return2)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::RangeImage*>(
      &::waymo::open_dataset::_RangeImage_default_instance_);
}
inline ::waymo::open_dataset::RangeImage* Laser::release_ri_return2() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Laser.ri_return2)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::RangeImage* temp = ri_return2_;
  ri_return2_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::RangeImage* Laser::mutable_ri_return2() {
  _has_bits_[0] |= 0x00000002u;
  if (ri_return2_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::RangeImage>(GetArenaNoVirtual());
    ri_return2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Laser.ri_return2)
  return ri_return2_;
}
inline void Laser::set_allocated_ri_return2(::waymo::open_dataset::RangeImage* ri_return2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ri_return2_;
  }
  if (ri_return2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ri_return2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ri_return2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ri_return2_ = ri_return2;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Laser.ri_return2)
}

// -------------------------------------------------------------------

// Frame

// optional .waymo.open_dataset.Context context = 1;
inline bool Frame::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::clear_context() {
  if (context_ != nullptr) context_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::Context& Frame::context() const {
  const ::waymo::open_dataset::Context* p = context_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.context)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Context*>(
      &::waymo::open_dataset::_Context_default_instance_);
}
inline ::waymo::open_dataset::Context* Frame::release_context() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Frame.context)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Context* Frame::mutable_context() {
  _has_bits_[0] |= 0x00000001u;
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Context>(GetArenaNoVirtual());
    context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.context)
  return context_;
}
inline void Frame::set_allocated_context(::waymo::open_dataset::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Frame.context)
}

// optional int64 timestamp_micros = 2;
inline bool Frame::has_timestamp_micros() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Frame::clear_timestamp_micros() {
  timestamp_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Frame::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.timestamp_micros)
  return timestamp_micros_;
}
inline void Frame::set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Frame.timestamp_micros)
}

// optional .waymo.open_dataset.Transform pose = 3;
inline bool Frame::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::Transform& Frame::pose() const {
  const ::waymo::open_dataset::Transform* p = pose_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Transform*>(
      &::waymo::open_dataset::_Transform_default_instance_);
}
inline ::waymo::open_dataset::Transform* Frame::release_pose() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Frame.pose)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::Transform* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Transform* Frame::mutable_pose() {
  _has_bits_[0] |= 0x00000002u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Transform>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.pose)
  return pose_;
}
inline void Frame::set_allocated_pose(::waymo::open_dataset::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Frame.pose)
}

// repeated .waymo.open_dataset.CameraImage images = 4;
inline int Frame::images_size() const {
  return images_.size();
}
inline void Frame::clear_images() {
  images_.Clear();
}
inline ::waymo::open_dataset::CameraImage* Frame::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraImage >*
Frame::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Frame.images)
  return &images_;
}
inline const ::waymo::open_dataset::CameraImage& Frame::images(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.images)
  return images_.Get(index);
}
inline ::waymo::open_dataset::CameraImage* Frame::add_images() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Frame.images)
  return images_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraImage >&
Frame::images() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Frame.images)
  return images_;
}

// repeated .waymo.open_dataset.Laser lasers = 5;
inline int Frame::lasers_size() const {
  return lasers_.size();
}
inline void Frame::clear_lasers() {
  lasers_.Clear();
}
inline ::waymo::open_dataset::Laser* Frame::mutable_lasers(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.lasers)
  return lasers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >*
Frame::mutable_lasers() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Frame.lasers)
  return &lasers_;
}
inline const ::waymo::open_dataset::Laser& Frame::lasers(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.lasers)
  return lasers_.Get(index);
}
inline ::waymo::open_dataset::Laser* Frame::add_lasers() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Frame.lasers)
  return lasers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >&
Frame::lasers() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Frame.lasers)
  return lasers_;
}

// repeated .waymo.open_dataset.Label laser_labels = 6;
inline int Frame::laser_labels_size() const {
  return laser_labels_.size();
}
inline ::waymo::open_dataset::Label* Frame::mutable_laser_labels(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.laser_labels)
  return laser_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >*
Frame::mutable_laser_labels() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Frame.laser_labels)
  return &laser_labels_;
}
inline const ::waymo::open_dataset::Label& Frame::laser_labels(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.laser_labels)
  return laser_labels_.Get(index);
}
inline ::waymo::open_dataset::Label* Frame::add_laser_labels() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Frame.laser_labels)
  return laser_labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Label >&
Frame::laser_labels() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Frame.laser_labels)
  return laser_labels_;
}

// repeated .waymo.open_dataset.CameraLabels projected_lidar_labels = 9;
inline int Frame::projected_lidar_labels_size() const {
  return projected_lidar_labels_.size();
}
inline void Frame::clear_projected_lidar_labels() {
  projected_lidar_labels_.Clear();
}
inline ::waymo::open_dataset::CameraLabels* Frame::mutable_projected_lidar_labels(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.projected_lidar_labels)
  return projected_lidar_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >*
Frame::mutable_projected_lidar_labels() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Frame.projected_lidar_labels)
  return &projected_lidar_labels_;
}
inline const ::waymo::open_dataset::CameraLabels& Frame::projected_lidar_labels(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.projected_lidar_labels)
  return projected_lidar_labels_.Get(index);
}
inline ::waymo::open_dataset::CameraLabels* Frame::add_projected_lidar_labels() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Frame.projected_lidar_labels)
  return projected_lidar_labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >&
Frame::projected_lidar_labels() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Frame.projected_lidar_labels)
  return projected_lidar_labels_;
}

// repeated .waymo.open_dataset.CameraLabels camera_labels = 8;
inline int Frame::camera_labels_size() const {
  return camera_labels_.size();
}
inline void Frame::clear_camera_labels() {
  camera_labels_.Clear();
}
inline ::waymo::open_dataset::CameraLabels* Frame::mutable_camera_labels(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.camera_labels)
  return camera_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >*
Frame::mutable_camera_labels() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Frame.camera_labels)
  return &camera_labels_;
}
inline const ::waymo::open_dataset::CameraLabels& Frame::camera_labels(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.camera_labels)
  return camera_labels_.Get(index);
}
inline ::waymo::open_dataset::CameraLabels* Frame::add_camera_labels() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Frame.camera_labels)
  return camera_labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::CameraLabels >&
Frame::camera_labels() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Frame.camera_labels)
  return camera_labels_;
}

// repeated .waymo.open_dataset.Polygon2dProto no_label_zones = 7;
inline int Frame::no_label_zones_size() const {
  return no_label_zones_.size();
}
inline ::waymo::open_dataset::Polygon2dProto* Frame::mutable_no_label_zones(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Frame.no_label_zones)
  return no_label_zones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Polygon2dProto >*
Frame::mutable_no_label_zones() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Frame.no_label_zones)
  return &no_label_zones_;
}
inline const ::waymo::open_dataset::Polygon2dProto& Frame::no_label_zones(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Frame.no_label_zones)
  return no_label_zones_.Get(index);
}
inline ::waymo::open_dataset::Polygon2dProto* Frame::add_no_label_zones() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Frame.no_label_zones)
  return no_label_zones_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Polygon2dProto >&
Frame::no_label_zones() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Frame.no_label_zones)
  return no_label_zones_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::CameraName_Name> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::CameraName_Name>() {
  return ::waymo::open_dataset::CameraName_Name_descriptor();
}
template <> struct is_proto_enum< ::waymo::open_dataset::LaserName_Name> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::LaserName_Name>() {
  return ::waymo::open_dataset::LaserName_Name_descriptor();
}
template <> struct is_proto_enum< ::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection>() {
  return ::waymo::open_dataset::CameraCalibration_RollingShutterReadOutDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fdataset_2eproto
