// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/metrics.proto

#include "waymo_open_dataset/protos/metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectionMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Difficulty_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2flabel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2flabel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackingMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
namespace waymo {
namespace open_dataset {
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class NoLabelZoneObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoLabelZoneObject> _instance;
} _NoLabelZoneObject_default_instance_;
class ObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Objects> _instance;
} _Objects_default_instance_;
class MatcherProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatcherProto> _instance;
} _MatcherProto_default_instance_;
class DifficultyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Difficulty> _instance;
} _Difficulty_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class DetectionMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionMeasurement> _instance;
} _DetectionMeasurement_default_instance_;
class DetectionMeasurementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionMeasurements> _instance;
} _DetectionMeasurements_default_instance_;
class DetectionMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionMetrics> _instance;
} _DetectionMetrics_default_instance_;
class TrackingMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackingMeasurement> _instance;
} _TrackingMeasurement_default_instance_;
class TrackingMeasurementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackingMeasurements> _instance;
} _TrackingMeasurements_default_instance_;
class TrackingMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackingMetrics> _instance;
} _TrackingMetrics_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_Config_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Config_default_instance_;
    new (ptr) ::waymo::open_dataset::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Config_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Config_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_Difficulty_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DetectionMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_DetectionMeasurement_default_instance_;
    new (ptr) ::waymo::open_dataset::DetectionMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::DetectionMeasurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectionMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DetectionMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_DetectionMeasurements_default_instance_;
    new (ptr) ::waymo::open_dataset::DetectionMeasurements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::DetectionMeasurements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_DetectionMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
      &scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto.base,}};

static void InitDefaultsscc_info_DetectionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_DetectionMetrics_default_instance_;
    new (ptr) ::waymo::open_dataset::DetectionMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::DetectionMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto.base,
      &scc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_Difficulty_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Difficulty_default_instance_;
    new (ptr) ::waymo::open_dataset::Difficulty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Difficulty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Difficulty_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Difficulty_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_MatcherProto_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MatcherProto_default_instance_;
    new (ptr) ::waymo::open_dataset::MatcherProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MatcherProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatcherProto_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MatcherProto_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_NoLabelZoneObject_default_instance_;
    new (ptr) ::waymo::open_dataset::NoLabelZoneObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::NoLabelZoneObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto.base,}};

static void InitDefaultsscc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Object_default_instance_;
    new (ptr) ::waymo::open_dataset::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Object::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto.base,}};

static void InitDefaultsscc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Objects_default_instance_;
    new (ptr) ::waymo::open_dataset::Objects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Objects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
      &scc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_TrackingMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_TrackingMeasurement_default_instance_;
    new (ptr) ::waymo::open_dataset::TrackingMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::TrackingMeasurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackingMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackingMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_TrackingMeasurements_default_instance_;
    new (ptr) ::waymo::open_dataset::TrackingMeasurements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::TrackingMeasurements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_TrackingMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
      &scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto.base,}};

static void InitDefaultsscc_info_TrackingMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_TrackingMetrics_default_instance_;
    new (ptr) ::waymo::open_dataset::TrackingMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::TrackingMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackingMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrackingMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto}, {
      &scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto.base,
      &scc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, object_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, score_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, overlap_with_nlz_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, context_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, frame_timestamp_micros_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Object, camera_name_),
  1,
  5,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::NoLabelZoneObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::NoLabelZoneObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::NoLabelZoneObject, zone_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::NoLabelZoneObject, context_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::NoLabelZoneObject, frame_timestamp_micros_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Objects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Objects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Objects, objects_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Objects, no_label_zone_objects_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MatcherProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MatcherProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Difficulty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Difficulty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Difficulty, levels_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, score_cutoffs_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, num_desired_score_cutoffs_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, breakdown_generator_ids_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, difficulties_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, matcher_type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, iou_thresholds_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, box_type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, desired_recall_delta_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, min_precision_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Config, min_heading_accuracy_),
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurement, num_fps_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurement, num_tps_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurement, num_fns_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurement, sum_ha_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurement, score_cutoff_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurements, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurements, measurements_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMeasurements, breakdown_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, mean_average_precision_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, mean_average_precision_ha_weighted_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, precisions_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, recalls_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, precisions_ha_weighted_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, recalls_ha_weighted_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, score_cutoffs_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, breakdown_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DetectionMetrics, measurements_),
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, num_misses_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, num_fps_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, num_mismatches_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, matching_cost_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, num_matches_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, num_objects_gt_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurement, score_cutoff_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurements, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurements, measurements_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMeasurements, breakdown_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, mota_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, motp_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, miss_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, mismatch_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, fp_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, score_cutoff_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, breakdown_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrackingMetrics, measurements_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::waymo::open_dataset::Object)},
  { 17, 25, sizeof(::waymo::open_dataset::NoLabelZoneObject)},
  { 28, 35, sizeof(::waymo::open_dataset::Objects)},
  { 37, 42, sizeof(::waymo::open_dataset::MatcherProto)},
  { 42, 48, sizeof(::waymo::open_dataset::Difficulty)},
  { 49, 64, sizeof(::waymo::open_dataset::Config)},
  { 74, 84, sizeof(::waymo::open_dataset::DetectionMeasurement)},
  { 89, 96, sizeof(::waymo::open_dataset::DetectionMeasurements)},
  { 98, 112, sizeof(::waymo::open_dataset::DetectionMetrics)},
  { 121, 133, sizeof(::waymo::open_dataset::TrackingMeasurement)},
  { 140, 147, sizeof(::waymo::open_dataset::TrackingMeasurements)},
  { 149, 162, sizeof(::waymo::open_dataset::TrackingMetrics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_NoLabelZoneObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Objects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MatcherProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Difficulty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_DetectionMeasurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_DetectionMeasurements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_DetectionMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_TrackingMeasurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_TrackingMeasurements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_TrackingMetrics_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto[] =
  "\n\'waymo_open_dataset/protos/metrics.prot"
  "o\022\022waymo.open_dataset\032 waymo_open_datase"
  "t/dataset.proto\032\036waymo_open_dataset/labe"
  "l.proto\032)waymo_open_dataset/protos/break"
  "down.proto\"\317\001\n\006Object\022)\n\006object\030\001 \001(\0132\031."
  "waymo.open_dataset.Label\022\020\n\005score\030\002 \001(\002:"
  "\0011\022\030\n\020overlap_with_nlz\030\003 \001(\010\022\024\n\014context_"
  "name\030\004 \001(\t\022\036\n\026frame_timestamp_micros\030\005 \001"
  "(\003\0228\n\013camera_name\030\006 \001(\0162#.waymo.open_dat"
  "aset.CameraName.Name\"{\n\021NoLabelZoneObjec"
  "t\0220\n\004zone\030\001 \001(\0132\".waymo.open_dataset.Pol"
  "ygon2dProto\022\024\n\014context_name\030\002 \001(\t\022\036\n\026fra"
  "me_timestamp_micros\030\003 \001(\003\"|\n\007Objects\022+\n\007"
  "objects\030\001 \003(\0132\032.waymo.open_dataset.Objec"
  "t\022D\n\025no_label_zone_objects\030\002 \003(\0132%.waymo"
  ".open_dataset.NoLabelZoneObject\"p\n\014Match"
  "erProto\"`\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\022\n\016TYP"
  "E_HUNGARIAN\020\001\022\024\n\020TYPE_SCORE_FIRST\020\002\022\034\n\030T"
  "YPE_HUNGARIAN_TEST_ONLY\020d\"G\n\nDifficulty\022"
  "9\n\006levels\030\001 \003(\0162).waymo.open_dataset.Lab"
  "el.DifficultyLevel\"\257\003\n\006Config\022\025\n\rscore_c"
  "utoffs\030\001 \003(\002\022!\n\031num_desired_score_cutoff"
  "s\030\002 \001(\005\022J\n\027breakdown_generator_ids\030\003 \003(\016"
  "2).waymo.open_dataset.Breakdown.Generato"
  "rId\0224\n\014difficulties\030\004 \003(\0132\036.waymo.open_d"
  "ataset.Difficulty\022;\n\014matcher_type\030\005 \001(\0162"
  "%.waymo.open_dataset.MatcherProto.Type\022\026"
  "\n\016iou_thresholds\030\006 \003(\002\0224\n\010box_type\030\007 \001(\016"
  "2\".waymo.open_dataset.Label.Box.Type\022\"\n\024"
  "desired_recall_delta\030\010 \001(\002:\0040.05\022\030\n\rmin_"
  "precision\030\t \001(\002:\0010\022 \n\024min_heading_accura"
  "cy\030\n \001(\002:\002-1\"o\n\024DetectionMeasurement\022\017\n\007"
  "num_fps\030\001 \001(\005\022\017\n\007num_tps\030\002 \001(\005\022\017\n\007num_fn"
  "s\030\003 \001(\005\022\016\n\006sum_ha\030\004 \001(\002\022\024\n\014score_cutoff\030"
  "\005 \001(\002\"\211\001\n\025DetectionMeasurements\022>\n\014measu"
  "rements\030\001 \003(\0132(.waymo.open_dataset.Detec"
  "tionMeasurement\0220\n\tbreakdown\030\002 \001(\0132\035.way"
  "mo.open_dataset.Breakdown\"\312\002\n\020DetectionM"
  "etrics\022\036\n\026mean_average_precision\030\001 \001(\002\022*"
  "\n\"mean_average_precision_ha_weighted\030\002 \001"
  "(\002\022\022\n\nprecisions\030\003 \003(\002\022\017\n\007recalls\030\004 \003(\002\022"
  "\036\n\026precisions_ha_weighted\030\005 \003(\002\022\033\n\023recal"
  "ls_ha_weighted\030\006 \003(\002\022\025\n\rscore_cutoffs\030\007 "
  "\003(\002\0220\n\tbreakdown\030\010 \001(\0132\035.waymo.open_data"
  "set.Breakdown\022\?\n\014measurements\030\t \001(\0132).wa"
  "ymo.open_dataset.DetectionMeasurements\"\254"
  "\001\n\023TrackingMeasurement\022\022\n\nnum_misses\030\001 \001"
  "(\005\022\017\n\007num_fps\030\002 \001(\005\022\026\n\016num_mismatches\030\003 "
  "\001(\005\022\025\n\rmatching_cost\030\004 \001(\001\022\023\n\013num_matche"
  "s\030\005 \001(\005\022\026\n\016num_objects_gt\030\006 \001(\005\022\024\n\014score"
  "_cutoff\030\007 \001(\002\"\207\001\n\024TrackingMeasurements\022="
  "\n\014measurements\030\001 \003(\0132\'.waymo.open_datase"
  "t.TrackingMeasurement\0220\n\tbreakdown\030\002 \001(\013"
  "2\035.waymo.open_dataset.Breakdown\"\341\001\n\017Trac"
  "kingMetrics\022\014\n\004mota\030\001 \001(\002\022\014\n\004motp\030\002 \001(\002\022"
  "\014\n\004miss\030\003 \001(\002\022\020\n\010mismatch\030\004 \001(\002\022\n\n\002fp\030\005 "
  "\001(\002\022\024\n\014score_cutoff\030\006 \001(\002\0220\n\tbreakdown\030\007"
  " \001(\0132\035.waymo.open_dataset.Breakdown\022>\n\014m"
  "easurements\030\010 \001(\0132(.waymo.open_dataset.T"
  "rackingMeasurements"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_deps[3] = {
  &::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto,
  &::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto,
  &::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_sccs[12] = {
  &scc_info_Config_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_DetectionMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_DetectionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_Difficulty_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_MatcherProto_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_TrackingMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
  &scc_info_TrackingMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto, "waymo_open_dataset/protos/metrics.proto", 2379,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto_deps, 12, 3,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto, 12, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto), true);
namespace waymo {
namespace open_dataset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatcherProto_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto[0];
}
bool MatcherProto_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MatcherProto_Type MatcherProto::TYPE_UNKNOWN;
constexpr MatcherProto_Type MatcherProto::TYPE_HUNGARIAN;
constexpr MatcherProto_Type MatcherProto::TYPE_SCORE_FIRST;
constexpr MatcherProto_Type MatcherProto::TYPE_HUNGARIAN_TEST_ONLY;
constexpr MatcherProto_Type MatcherProto::Type_MIN;
constexpr MatcherProto_Type MatcherProto::Type_MAX;
constexpr int MatcherProto::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Object::InitAsDefaultInstance() {
  ::waymo::open_dataset::_Object_default_instance_._instance.get_mutable()->object_ = const_cast< ::waymo::open_dataset::Label*>(
      ::waymo::open_dataset::Label::internal_default_instance());
}
class Object::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Object>()._has_bits_);
  static const ::waymo::open_dataset::Label& object(const Object* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_overlap_with_nlz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_context_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_timestamp_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::waymo::open_dataset::Label&
Object::HasBitSetters::object(const Object* msg) {
  return *msg->object_;
}
void Object::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kObjectFieldNumber;
const int Object::kScoreFieldNumber;
const int Object::kOverlapWithNlzFieldNumber;
const int Object::kContextNameFieldNumber;
const int Object::kFrameTimestampMicrosFieldNumber;
const int Object::kCameraNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_context_name()) {
    context_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_name_);
  }
  if (from.has_object()) {
    object_ = new ::waymo::open_dataset::Label(*from.object_);
  } else {
    object_ = nullptr;
  }
  ::memcpy(&overlap_with_nlz_, &from.overlap_with_nlz_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&overlap_with_nlz_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_timestamp_micros_) -
      reinterpret_cast<char*>(&object_)) + sizeof(frame_timestamp_micros_));
  score_ = 1;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  context_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      context_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&overlap_with_nlz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_timestamp_micros_) -
        reinterpret_cast<char*>(&overlap_with_nlz_)) + sizeof(frame_timestamp_micros_));
    score_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.Label object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool overlap_with_nlz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_overlap_with_nlz(&has_bits);
          overlap_with_nlz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string context_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_context_name(), ptr, ctx, "waymo.open_dataset.Object.context_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_timestamp_micros = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_frame_timestamp_micros(&has_bits);
          frame_timestamp_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.CameraName.Name camera_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::CameraName_Name_IsValid(val))) {
            set_camera_name(static_cast<::waymo::open_dataset::CameraName_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Object::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Object)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.Label object = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool overlap_with_nlz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_overlap_with_nlz(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overlap_with_nlz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string context_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_context_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context_name().data(), static_cast<int>(this->context_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Object.context_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frame_timestamp_micros = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_frame_timestamp_micros(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.CameraName.Name camera_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::CameraName_Name_IsValid(value)) {
            set_camera_name(static_cast< ::waymo::open_dataset::CameraName_Name >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Object)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Object::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Label object = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::object(this), output);
  }

  // optional float score = 2 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // optional bool overlap_with_nlz = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->overlap_with_nlz(), output);
  }

  // optional string context_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_name().data(), static_cast<int>(this->context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Object.context_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->context_name(), output);
  }

  // optional int64 frame_timestamp_micros = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->frame_timestamp_micros(), output);
  }

  // optional .waymo.open_dataset.CameraName.Name camera_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->camera_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Object)
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Label object = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::object(this), target);
  }

  // optional float score = 2 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // optional bool overlap_with_nlz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->overlap_with_nlz(), target);
  }

  // optional string context_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_name().data(), static_cast<int>(this->context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Object.context_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->context_name(), target);
  }

  // optional int64 frame_timestamp_micros = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->frame_timestamp_micros(), target);
  }

  // optional .waymo.open_dataset.CameraName.Name camera_name = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->camera_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string context_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->context_name());
    }

    // optional .waymo.open_dataset.Label object = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_);
    }

    // optional bool overlap_with_nlz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .waymo.open_dataset.CameraName.Name camera_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->camera_name());
    }

    // optional int64 frame_timestamp_micros = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frame_timestamp_micros());
    }

    // optional float score = 2 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      context_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_object()->::waymo::open_dataset::Label::MergeFrom(from.object());
    }
    if (cached_has_bits & 0x00000004u) {
      overlap_with_nlz_ = from.overlap_with_nlz_;
    }
    if (cached_has_bits & 0x00000008u) {
      camera_name_ = from.camera_name_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_timestamp_micros_ = from.frame_timestamp_micros_;
    }
    if (cached_has_bits & 0x00000020u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  context_name_.Swap(&other->context_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(object_, other->object_);
  swap(overlap_with_nlz_, other->overlap_with_nlz_);
  swap(camera_name_, other->camera_name_);
  swap(frame_timestamp_micros_, other->frame_timestamp_micros_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoLabelZoneObject::InitAsDefaultInstance() {
  ::waymo::open_dataset::_NoLabelZoneObject_default_instance_._instance.get_mutable()->zone_ = const_cast< ::waymo::open_dataset::Polygon2dProto*>(
      ::waymo::open_dataset::Polygon2dProto::internal_default_instance());
}
class NoLabelZoneObject::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<NoLabelZoneObject>()._has_bits_);
  static const ::waymo::open_dataset::Polygon2dProto& zone(const NoLabelZoneObject* msg);
  static void set_has_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_timestamp_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::waymo::open_dataset::Polygon2dProto&
NoLabelZoneObject::HasBitSetters::zone(const NoLabelZoneObject* msg) {
  return *msg->zone_;
}
void NoLabelZoneObject::clear_zone() {
  if (zone_ != nullptr) zone_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoLabelZoneObject::kZoneFieldNumber;
const int NoLabelZoneObject::kContextNameFieldNumber;
const int NoLabelZoneObject::kFrameTimestampMicrosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoLabelZoneObject::NoLabelZoneObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.NoLabelZoneObject)
}
NoLabelZoneObject::NoLabelZoneObject(const NoLabelZoneObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_context_name()) {
    context_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_name_);
  }
  if (from.has_zone()) {
    zone_ = new ::waymo::open_dataset::Polygon2dProto(*from.zone_);
  } else {
    zone_ = nullptr;
  }
  frame_timestamp_micros_ = from.frame_timestamp_micros_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.NoLabelZoneObject)
}

void NoLabelZoneObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_timestamp_micros_) -
      reinterpret_cast<char*>(&zone_)) + sizeof(frame_timestamp_micros_));
}

NoLabelZoneObject::~NoLabelZoneObject() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.NoLabelZoneObject)
  SharedDtor();
}

void NoLabelZoneObject::SharedDtor() {
  context_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete zone_;
}

void NoLabelZoneObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoLabelZoneObject& NoLabelZoneObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoLabelZoneObject_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void NoLabelZoneObject::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.NoLabelZoneObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      context_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(zone_ != nullptr);
      zone_->Clear();
    }
  }
  frame_timestamp_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NoLabelZoneObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.Polygon2dProto zone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_zone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string context_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_context_name(), ptr, ctx, "waymo.open_dataset.NoLabelZoneObject.context_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_timestamp_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_frame_timestamp_micros(&has_bits);
          frame_timestamp_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NoLabelZoneObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.NoLabelZoneObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.Polygon2dProto zone = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string context_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_context_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context_name().data(), static_cast<int>(this->context_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.NoLabelZoneObject.context_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frame_timestamp_micros = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_frame_timestamp_micros(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.NoLabelZoneObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.NoLabelZoneObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NoLabelZoneObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.NoLabelZoneObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Polygon2dProto zone = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::zone(this), output);
  }

  // optional string context_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_name().data(), static_cast<int>(this->context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.NoLabelZoneObject.context_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->context_name(), output);
  }

  // optional int64 frame_timestamp_micros = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->frame_timestamp_micros(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.NoLabelZoneObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* NoLabelZoneObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.NoLabelZoneObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Polygon2dProto zone = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::zone(this), target);
  }

  // optional string context_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_name().data(), static_cast<int>(this->context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.NoLabelZoneObject.context_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->context_name(), target);
  }

  // optional int64 frame_timestamp_micros = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->frame_timestamp_micros(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.NoLabelZoneObject)
  return target;
}

size_t NoLabelZoneObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.NoLabelZoneObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string context_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->context_name());
    }

    // optional .waymo.open_dataset.Polygon2dProto zone = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *zone_);
    }

    // optional int64 frame_timestamp_micros = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frame_timestamp_micros());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoLabelZoneObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.NoLabelZoneObject)
  GOOGLE_DCHECK_NE(&from, this);
  const NoLabelZoneObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoLabelZoneObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.NoLabelZoneObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.NoLabelZoneObject)
    MergeFrom(*source);
  }
}

void NoLabelZoneObject::MergeFrom(const NoLabelZoneObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.NoLabelZoneObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      context_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_zone()->::waymo::open_dataset::Polygon2dProto::MergeFrom(from.zone());
    }
    if (cached_has_bits & 0x00000004u) {
      frame_timestamp_micros_ = from.frame_timestamp_micros_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NoLabelZoneObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.NoLabelZoneObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoLabelZoneObject::CopyFrom(const NoLabelZoneObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.NoLabelZoneObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoLabelZoneObject::IsInitialized() const {
  return true;
}

void NoLabelZoneObject::Swap(NoLabelZoneObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoLabelZoneObject::InternalSwap(NoLabelZoneObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  context_name_.Swap(&other->context_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(zone_, other->zone_);
  swap(frame_timestamp_micros_, other->frame_timestamp_micros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoLabelZoneObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Objects::InitAsDefaultInstance() {
}
class Objects::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Objects>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Objects::kObjectsFieldNumber;
const int Objects::kNoLabelZoneObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Objects::Objects()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Objects)
}
Objects::Objects(const Objects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objects_(from.objects_),
      no_label_zone_objects_(from.no_label_zone_objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Objects)
}

void Objects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
}

Objects::~Objects() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Objects)
  SharedDtor();
}

void Objects::SharedDtor() {
}

void Objects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Objects& Objects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Objects::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Objects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  no_label_zone_objects_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Objects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.Object objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.NoLabelZoneObject no_label_zone_objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_no_label_zone_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Objects::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Objects)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.Object objects = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.NoLabelZoneObject no_label_zone_objects = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_no_label_zone_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Objects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Objects)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Objects::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Objects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Object objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  // repeated .waymo.open_dataset.NoLabelZoneObject no_label_zone_objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_label_zone_objects_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->no_label_zone_objects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Objects)
}

::PROTOBUF_NAMESPACE_ID::uint8* Objects::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Objects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Object objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objects(static_cast<int>(i)), target);
  }

  // repeated .waymo.open_dataset.NoLabelZoneObject no_label_zone_objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_label_zone_objects_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->no_label_zone_objects(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Objects)
  return target;
}

size_t Objects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Objects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Object objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  // repeated .waymo.open_dataset.NoLabelZoneObject no_label_zone_objects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->no_label_zone_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->no_label_zone_objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Objects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Objects)
  GOOGLE_DCHECK_NE(&from, this);
  const Objects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Objects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Objects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Objects)
    MergeFrom(*source);
  }
}

void Objects::MergeFrom(const Objects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Objects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  no_label_zone_objects_.MergeFrom(from.no_label_zone_objects_);
}

void Objects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Objects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Objects::CopyFrom(const Objects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Objects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Objects::IsInitialized() const {
  return true;
}

void Objects::Swap(Objects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Objects::InternalSwap(Objects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  CastToBase(&no_label_zone_objects_)->InternalSwap(CastToBase(&other->no_label_zone_objects_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Objects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatcherProto::InitAsDefaultInstance() {
}
class MatcherProto::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<MatcherProto>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatcherProto::MatcherProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MatcherProto)
}
MatcherProto::MatcherProto(const MatcherProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MatcherProto)
}

void MatcherProto::SharedCtor() {
}

MatcherProto::~MatcherProto() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MatcherProto)
  SharedDtor();
}

void MatcherProto::SharedDtor() {
}

void MatcherProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatcherProto& MatcherProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatcherProto_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MatcherProto::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MatcherProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MatcherProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MatcherProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MatcherProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MatcherProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MatcherProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MatcherProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MatcherProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MatcherProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* MatcherProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MatcherProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MatcherProto)
  return target;
}

size_t MatcherProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MatcherProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatcherProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MatcherProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MatcherProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatcherProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MatcherProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MatcherProto)
    MergeFrom(*source);
  }
}

void MatcherProto::MergeFrom(const MatcherProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MatcherProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MatcherProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MatcherProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatcherProto::CopyFrom(const MatcherProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MatcherProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatcherProto::IsInitialized() const {
  return true;
}

void MatcherProto::Swap(MatcherProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatcherProto::InternalSwap(MatcherProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatcherProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Difficulty::InitAsDefaultInstance() {
}
class Difficulty::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Difficulty>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Difficulty::kLevelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Difficulty::Difficulty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Difficulty)
}
Difficulty::Difficulty(const Difficulty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      levels_(from.levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Difficulty)
}

void Difficulty::SharedCtor() {
}

Difficulty::~Difficulty() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Difficulty)
  SharedDtor();
}

void Difficulty::SharedDtor() {
}

void Difficulty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Difficulty& Difficulty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Difficulty_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Difficulty::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Difficulty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Difficulty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.Label.DifficultyLevel levels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Label_DifficultyLevel_IsValid(val))) {
              add_levels(static_cast<::waymo::open_dataset::Label_DifficultyLevel>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_levels(), ptr, ctx, ::waymo::open_dataset::Label_DifficultyLevel_IsValid, mutable_unknown_fields(), 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Difficulty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Difficulty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.Label.DifficultyLevel levels = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Label_DifficultyLevel_IsValid(value)) {
            add_levels(static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::waymo::open_dataset::Label_DifficultyLevel_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Difficulty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Difficulty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Difficulty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Difficulty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Label.DifficultyLevel levels = 1;
  for (int i = 0, n = this->levels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->levels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Difficulty)
}

::PROTOBUF_NAMESPACE_ID::uint8* Difficulty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Difficulty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Label.DifficultyLevel levels = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    1, this->levels_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Difficulty)
  return target;
}

size_t Difficulty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Difficulty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Label.DifficultyLevel levels = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->levels_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->levels(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Difficulty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Difficulty)
  GOOGLE_DCHECK_NE(&from, this);
  const Difficulty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Difficulty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Difficulty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Difficulty)
    MergeFrom(*source);
  }
}

void Difficulty::MergeFrom(const Difficulty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Difficulty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
}

void Difficulty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Difficulty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Difficulty::CopyFrom(const Difficulty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Difficulty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Difficulty::IsInitialized() const {
  return true;
}

void Difficulty::Swap(Difficulty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Difficulty::InternalSwap(Difficulty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  levels_.InternalSwap(&other->levels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Difficulty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
}
class Config::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static void set_has_num_desired_score_cutoffs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matcher_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_box_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desired_recall_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_heading_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kScoreCutoffsFieldNumber;
const int Config::kNumDesiredScoreCutoffsFieldNumber;
const int Config::kBreakdownGeneratorIdsFieldNumber;
const int Config::kDifficultiesFieldNumber;
const int Config::kMatcherTypeFieldNumber;
const int Config::kIouThresholdsFieldNumber;
const int Config::kBoxTypeFieldNumber;
const int Config::kDesiredRecallDeltaFieldNumber;
const int Config::kMinPrecisionFieldNumber;
const int Config::kMinHeadingAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      score_cutoffs_(from.score_cutoffs_),
      breakdown_generator_ids_(from.breakdown_generator_ids_),
      difficulties_(from.difficulties_),
      iou_thresholds_(from.iou_thresholds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_desired_score_cutoffs_, &from.num_desired_score_cutoffs_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_heading_accuracy_) -
    reinterpret_cast<char*>(&num_desired_score_cutoffs_)) + sizeof(min_heading_accuracy_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  ::memset(&num_desired_score_cutoffs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_precision_) -
      reinterpret_cast<char*>(&num_desired_score_cutoffs_)) + sizeof(min_precision_));
  desired_recall_delta_ = 0.05f;
  min_heading_accuracy_ = -1;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Config)
  SharedDtor();
}

void Config::SharedDtor() {
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_cutoffs_.Clear();
  breakdown_generator_ids_.Clear();
  difficulties_.Clear();
  iou_thresholds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&num_desired_score_cutoffs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_precision_) -
        reinterpret_cast<char*>(&num_desired_score_cutoffs_)) + sizeof(min_precision_));
    desired_recall_delta_ = 0.05f;
    min_heading_accuracy_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float score_cutoffs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_score_cutoffs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_score_cutoffs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_desired_score_cutoffs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_num_desired_score_cutoffs(&has_bits);
          num_desired_score_cutoffs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.Breakdown.GeneratorId breakdown_generator_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Breakdown_GeneratorId_IsValid(val))) {
              add_breakdown_generator_ids(static_cast<::waymo::open_dataset::Breakdown_GeneratorId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_breakdown_generator_ids(), ptr, ctx, ::waymo::open_dataset::Breakdown_GeneratorId_IsValid, mutable_unknown_fields(), 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.Difficulty difficulties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_difficulties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.MatcherProto.Type matcher_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::MatcherProto_Type_IsValid(val))) {
            set_matcher_type(static_cast<::waymo::open_dataset::MatcherProto_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated float iou_thresholds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_iou_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 53);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_iou_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Label.Box.Type box_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Label_Box_Type_IsValid(val))) {
            set_box_type(static_cast<::waymo::open_dataset::Label_Box_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float desired_recall_delta = 8 [default = 0.05];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_desired_recall_delta(&has_bits);
          desired_recall_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_precision = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_min_precision(&has_bits);
          min_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_heading_accuracy = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          HasBitSetters::set_has_min_heading_accuracy(&has_bits);
          min_heading_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Config::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Config)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float score_cutoffs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_score_cutoffs())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score_cutoffs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_desired_score_cutoffs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_desired_score_cutoffs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_desired_score_cutoffs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.Breakdown.GeneratorId breakdown_generator_ids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Breakdown_GeneratorId_IsValid(value)) {
            add_breakdown_generator_ids(static_cast< ::waymo::open_dataset::Breakdown_GeneratorId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::waymo::open_dataset::Breakdown_GeneratorId_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_breakdown_generator_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.Difficulty difficulties = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_difficulties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.MatcherProto.Type matcher_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::MatcherProto_Type_IsValid(value)) {
            set_matcher_type(static_cast< ::waymo::open_dataset::MatcherProto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float iou_thresholds = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_iou_thresholds())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_iou_thresholds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Label.Box.Type box_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Label_Box_Type_IsValid(value)) {
            set_box_type(static_cast< ::waymo::open_dataset::Label_Box_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desired_recall_delta = 8 [default = 0.05];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_desired_recall_delta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_recall_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_precision = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_min_precision(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_heading_accuracy = 10 [default = -1];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_min_heading_accuracy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_heading_accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Config)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Config::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float score_cutoffs = 1;
  for (int i = 0, n = this->score_cutoffs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->score_cutoffs(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_desired_score_cutoffs = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_desired_score_cutoffs(), output);
  }

  // repeated .waymo.open_dataset.Breakdown.GeneratorId breakdown_generator_ids = 3;
  for (int i = 0, n = this->breakdown_generator_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->breakdown_generator_ids(i), output);
  }

  // repeated .waymo.open_dataset.Difficulty difficulties = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->difficulties_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->difficulties(static_cast<int>(i)),
      output);
  }

  // optional .waymo.open_dataset.MatcherProto.Type matcher_type = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->matcher_type(), output);
  }

  // repeated float iou_thresholds = 6;
  for (int i = 0, n = this->iou_thresholds_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      6, this->iou_thresholds(i), output);
  }

  // optional .waymo.open_dataset.Label.Box.Type box_type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->box_type(), output);
  }

  // optional float desired_recall_delta = 8 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->desired_recall_delta(), output);
  }

  // optional float min_precision = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->min_precision(), output);
  }

  // optional float min_heading_accuracy = 10 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->min_heading_accuracy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Config)
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float score_cutoffs = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(1, this->score_cutoffs_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 num_desired_score_cutoffs = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_desired_score_cutoffs(), target);
  }

  // repeated .waymo.open_dataset.Breakdown.GeneratorId breakdown_generator_ids = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    3, this->breakdown_generator_ids_, target);

  // repeated .waymo.open_dataset.Difficulty difficulties = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->difficulties_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->difficulties(static_cast<int>(i)), target);
  }

  // optional .waymo.open_dataset.MatcherProto.Type matcher_type = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->matcher_type(), target);
  }

  // repeated float iou_thresholds = 6;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(6, this->iou_thresholds_, target);

  // optional .waymo.open_dataset.Label.Box.Type box_type = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->box_type(), target);
  }

  // optional float desired_recall_delta = 8 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->desired_recall_delta(), target);
  }

  // optional float min_precision = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->min_precision(), target);
  }

  // optional float min_heading_accuracy = 10 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->min_heading_accuracy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float score_cutoffs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->score_cutoffs_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->score_cutoffs_size());
    total_size += data_size;
  }

  // repeated .waymo.open_dataset.Breakdown.GeneratorId breakdown_generator_ids = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->breakdown_generator_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->breakdown_generator_ids(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .waymo.open_dataset.Difficulty difficulties = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->difficulties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->difficulties(static_cast<int>(i)));
    }
  }

  // repeated float iou_thresholds = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->iou_thresholds_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->iou_thresholds_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 num_desired_score_cutoffs = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_desired_score_cutoffs());
    }

    // optional .waymo.open_dataset.MatcherProto.Type matcher_type = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->matcher_type());
    }

    // optional .waymo.open_dataset.Label.Box.Type box_type = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->box_type());
    }

    // optional float min_precision = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float desired_recall_delta = 8 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float min_heading_accuracy = 10 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_cutoffs_.MergeFrom(from.score_cutoffs_);
  breakdown_generator_ids_.MergeFrom(from.breakdown_generator_ids_);
  difficulties_.MergeFrom(from.difficulties_);
  iou_thresholds_.MergeFrom(from.iou_thresholds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      num_desired_score_cutoffs_ = from.num_desired_score_cutoffs_;
    }
    if (cached_has_bits & 0x00000002u) {
      matcher_type_ = from.matcher_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      box_type_ = from.box_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_precision_ = from.min_precision_;
    }
    if (cached_has_bits & 0x00000010u) {
      desired_recall_delta_ = from.desired_recall_delta_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_heading_accuracy_ = from.min_heading_accuracy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  score_cutoffs_.InternalSwap(&other->score_cutoffs_);
  breakdown_generator_ids_.InternalSwap(&other->breakdown_generator_ids_);
  CastToBase(&difficulties_)->InternalSwap(CastToBase(&other->difficulties_));
  iou_thresholds_.InternalSwap(&other->iou_thresholds_);
  swap(num_desired_score_cutoffs_, other->num_desired_score_cutoffs_);
  swap(matcher_type_, other->matcher_type_);
  swap(box_type_, other->box_type_);
  swap(min_precision_, other->min_precision_);
  swap(desired_recall_delta_, other->desired_recall_delta_);
  swap(min_heading_accuracy_, other->min_heading_accuracy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionMeasurement::InitAsDefaultInstance() {
}
class DetectionMeasurement::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<DetectionMeasurement>()._has_bits_);
  static void set_has_num_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_tps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_fns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sum_ha(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_score_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionMeasurement::kNumFpsFieldNumber;
const int DetectionMeasurement::kNumTpsFieldNumber;
const int DetectionMeasurement::kNumFnsFieldNumber;
const int DetectionMeasurement::kSumHaFieldNumber;
const int DetectionMeasurement::kScoreCutoffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionMeasurement::DetectionMeasurement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.DetectionMeasurement)
}
DetectionMeasurement::DetectionMeasurement(const DetectionMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_fps_, &from.num_fps_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_cutoff_) -
    reinterpret_cast<char*>(&num_fps_)) + sizeof(score_cutoff_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.DetectionMeasurement)
}

void DetectionMeasurement::SharedCtor() {
  ::memset(&num_fps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_cutoff_) -
      reinterpret_cast<char*>(&num_fps_)) + sizeof(score_cutoff_));
}

DetectionMeasurement::~DetectionMeasurement() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.DetectionMeasurement)
  SharedDtor();
}

void DetectionMeasurement::SharedDtor() {
}

void DetectionMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionMeasurement& DetectionMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DetectionMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.DetectionMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&num_fps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_cutoff_) -
        reinterpret_cast<char*>(&num_fps_)) + sizeof(score_cutoff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_num_fps(&has_bits);
          num_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_tps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_num_tps(&has_bits);
          num_tps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_fns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_num_fns(&has_bits);
          num_fns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sum_ha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_sum_ha(&has_bits);
          sum_ha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float score_cutoff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_score_cutoff(&has_bits);
          score_cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionMeasurement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.DetectionMeasurement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_fps = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_num_fps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_tps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_tps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_fns = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_fns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_fns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sum_ha = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_sum_ha(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_ha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_cutoff = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_score_cutoff(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_cutoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.DetectionMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.DetectionMeasurement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionMeasurement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.DetectionMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_fps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_fps(), output);
  }

  // optional int32 num_tps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_tps(), output);
  }

  // optional int32 num_fns = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_fns(), output);
  }

  // optional float sum_ha = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->sum_ha(), output);
  }

  // optional float score_cutoff = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->score_cutoff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.DetectionMeasurement)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionMeasurement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.DetectionMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_fps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_fps(), target);
  }

  // optional int32 num_tps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_tps(), target);
  }

  // optional int32 num_fns = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_fns(), target);
  }

  // optional float sum_ha = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->sum_ha(), target);
  }

  // optional float score_cutoff = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->score_cutoff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.DetectionMeasurement)
  return target;
}

size_t DetectionMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.DetectionMeasurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 num_fps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_fps());
    }

    // optional int32 num_tps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_tps());
    }

    // optional int32 num_fns = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_fns());
    }

    // optional float sum_ha = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float score_cutoff = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionMeasurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.DetectionMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionMeasurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.DetectionMeasurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.DetectionMeasurement)
    MergeFrom(*source);
  }
}

void DetectionMeasurement::MergeFrom(const DetectionMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.DetectionMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      num_fps_ = from.num_fps_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_tps_ = from.num_tps_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_fns_ = from.num_fns_;
    }
    if (cached_has_bits & 0x00000008u) {
      sum_ha_ = from.sum_ha_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_cutoff_ = from.score_cutoff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectionMeasurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.DetectionMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionMeasurement::CopyFrom(const DetectionMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.DetectionMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionMeasurement::IsInitialized() const {
  return true;
}

void DetectionMeasurement::Swap(DetectionMeasurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionMeasurement::InternalSwap(DetectionMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_fps_, other->num_fps_);
  swap(num_tps_, other->num_tps_);
  swap(num_fns_, other->num_fns_);
  swap(sum_ha_, other->sum_ha_);
  swap(score_cutoff_, other->score_cutoff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionMeasurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionMeasurements::InitAsDefaultInstance() {
  ::waymo::open_dataset::_DetectionMeasurements_default_instance_._instance.get_mutable()->breakdown_ = const_cast< ::waymo::open_dataset::Breakdown*>(
      ::waymo::open_dataset::Breakdown::internal_default_instance());
}
class DetectionMeasurements::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<DetectionMeasurements>()._has_bits_);
  static const ::waymo::open_dataset::Breakdown& breakdown(const DetectionMeasurements* msg);
  static void set_has_breakdown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::waymo::open_dataset::Breakdown&
DetectionMeasurements::HasBitSetters::breakdown(const DetectionMeasurements* msg) {
  return *msg->breakdown_;
}
void DetectionMeasurements::clear_breakdown() {
  if (breakdown_ != nullptr) breakdown_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionMeasurements::kMeasurementsFieldNumber;
const int DetectionMeasurements::kBreakdownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionMeasurements::DetectionMeasurements()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.DetectionMeasurements)
}
DetectionMeasurements::DetectionMeasurements(const DetectionMeasurements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      measurements_(from.measurements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_breakdown()) {
    breakdown_ = new ::waymo::open_dataset::Breakdown(*from.breakdown_);
  } else {
    breakdown_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.DetectionMeasurements)
}

void DetectionMeasurements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  breakdown_ = nullptr;
}

DetectionMeasurements::~DetectionMeasurements() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.DetectionMeasurements)
  SharedDtor();
}

void DetectionMeasurements::SharedDtor() {
  if (this != internal_default_instance()) delete breakdown_;
}

void DetectionMeasurements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionMeasurements& DetectionMeasurements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DetectionMeasurements::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.DetectionMeasurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  measurements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(breakdown_ != nullptr);
    breakdown_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionMeasurements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.DetectionMeasurement measurements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Breakdown breakdown = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionMeasurements::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.DetectionMeasurements)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.DetectionMeasurement measurements = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Breakdown breakdown = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_breakdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.DetectionMeasurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.DetectionMeasurements)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionMeasurements::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.DetectionMeasurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.DetectionMeasurement measurements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->measurements(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::breakdown(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.DetectionMeasurements)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionMeasurements::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.DetectionMeasurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.DetectionMeasurement measurements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->measurements(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::breakdown(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.DetectionMeasurements)
  return target;
}

size_t DetectionMeasurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.DetectionMeasurements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.DetectionMeasurement measurements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->measurements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->measurements(static_cast<int>(i)));
    }
  }

  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *breakdown_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionMeasurements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.DetectionMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionMeasurements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionMeasurements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.DetectionMeasurements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.DetectionMeasurements)
    MergeFrom(*source);
  }
}

void DetectionMeasurements::MergeFrom(const DetectionMeasurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.DetectionMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measurements_.MergeFrom(from.measurements_);
  if (from.has_breakdown()) {
    mutable_breakdown()->::waymo::open_dataset::Breakdown::MergeFrom(from.breakdown());
  }
}

void DetectionMeasurements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.DetectionMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionMeasurements::CopyFrom(const DetectionMeasurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.DetectionMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionMeasurements::IsInitialized() const {
  return true;
}

void DetectionMeasurements::Swap(DetectionMeasurements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionMeasurements::InternalSwap(DetectionMeasurements* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&measurements_)->InternalSwap(CastToBase(&other->measurements_));
  swap(breakdown_, other->breakdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionMeasurements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionMetrics::InitAsDefaultInstance() {
  ::waymo::open_dataset::_DetectionMetrics_default_instance_._instance.get_mutable()->breakdown_ = const_cast< ::waymo::open_dataset::Breakdown*>(
      ::waymo::open_dataset::Breakdown::internal_default_instance());
  ::waymo::open_dataset::_DetectionMetrics_default_instance_._instance.get_mutable()->measurements_ = const_cast< ::waymo::open_dataset::DetectionMeasurements*>(
      ::waymo::open_dataset::DetectionMeasurements::internal_default_instance());
}
class DetectionMetrics::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<DetectionMetrics>()._has_bits_);
  static void set_has_mean_average_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mean_average_precision_ha_weighted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::waymo::open_dataset::Breakdown& breakdown(const DetectionMetrics* msg);
  static void set_has_breakdown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::waymo::open_dataset::DetectionMeasurements& measurements(const DetectionMetrics* msg);
  static void set_has_measurements(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::waymo::open_dataset::Breakdown&
DetectionMetrics::HasBitSetters::breakdown(const DetectionMetrics* msg) {
  return *msg->breakdown_;
}
const ::waymo::open_dataset::DetectionMeasurements&
DetectionMetrics::HasBitSetters::measurements(const DetectionMetrics* msg) {
  return *msg->measurements_;
}
void DetectionMetrics::clear_breakdown() {
  if (breakdown_ != nullptr) breakdown_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionMetrics::kMeanAveragePrecisionFieldNumber;
const int DetectionMetrics::kMeanAveragePrecisionHaWeightedFieldNumber;
const int DetectionMetrics::kPrecisionsFieldNumber;
const int DetectionMetrics::kRecallsFieldNumber;
const int DetectionMetrics::kPrecisionsHaWeightedFieldNumber;
const int DetectionMetrics::kRecallsHaWeightedFieldNumber;
const int DetectionMetrics::kScoreCutoffsFieldNumber;
const int DetectionMetrics::kBreakdownFieldNumber;
const int DetectionMetrics::kMeasurementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionMetrics::DetectionMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.DetectionMetrics)
}
DetectionMetrics::DetectionMetrics(const DetectionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      precisions_(from.precisions_),
      recalls_(from.recalls_),
      precisions_ha_weighted_(from.precisions_ha_weighted_),
      recalls_ha_weighted_(from.recalls_ha_weighted_),
      score_cutoffs_(from.score_cutoffs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_breakdown()) {
    breakdown_ = new ::waymo::open_dataset::Breakdown(*from.breakdown_);
  } else {
    breakdown_ = nullptr;
  }
  if (from.has_measurements()) {
    measurements_ = new ::waymo::open_dataset::DetectionMeasurements(*from.measurements_);
  } else {
    measurements_ = nullptr;
  }
  ::memcpy(&mean_average_precision_, &from.mean_average_precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_average_precision_ha_weighted_) -
    reinterpret_cast<char*>(&mean_average_precision_)) + sizeof(mean_average_precision_ha_weighted_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.DetectionMetrics)
}

void DetectionMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  ::memset(&breakdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_average_precision_ha_weighted_) -
      reinterpret_cast<char*>(&breakdown_)) + sizeof(mean_average_precision_ha_weighted_));
}

DetectionMetrics::~DetectionMetrics() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.DetectionMetrics)
  SharedDtor();
}

void DetectionMetrics::SharedDtor() {
  if (this != internal_default_instance()) delete breakdown_;
  if (this != internal_default_instance()) delete measurements_;
}

void DetectionMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionMetrics& DetectionMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DetectionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.DetectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  precisions_.Clear();
  recalls_.Clear();
  precisions_ha_weighted_.Clear();
  recalls_ha_weighted_.Clear();
  score_cutoffs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(breakdown_ != nullptr);
      breakdown_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(measurements_ != nullptr);
      measurements_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&mean_average_precision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mean_average_precision_ha_weighted_) -
        reinterpret_cast<char*>(&mean_average_precision_)) + sizeof(mean_average_precision_ha_weighted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float mean_average_precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_mean_average_precision(&has_bits);
          mean_average_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_average_precision_ha_weighted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_mean_average_precision_ha_weighted(&has_bits);
          mean_average_precision_ha_weighted_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float precisions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_precisions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 29);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_precisions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float recalls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_recalls(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 37);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_recalls(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float precisions_ha_weighted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_precisions_ha_weighted(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 45);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_precisions_ha_weighted(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float recalls_ha_weighted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_recalls_ha_weighted(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 53);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_recalls_ha_weighted(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float score_cutoffs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_score_cutoffs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 61);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_score_cutoffs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Breakdown breakdown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.DetectionMeasurements measurements = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_measurements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.DetectionMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean_average_precision = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_mean_average_precision(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_average_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_average_precision_ha_weighted = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_mean_average_precision_ha_weighted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_average_precision_ha_weighted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float precisions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_precisions())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_precisions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float recalls = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_recalls())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_recalls())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float precisions_ha_weighted = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_precisions_ha_weighted())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_precisions_ha_weighted())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float recalls_ha_weighted = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_recalls_ha_weighted())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_recalls_ha_weighted())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float score_cutoffs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_score_cutoffs())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score_cutoffs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Breakdown breakdown = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_breakdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.DetectionMeasurements measurements = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.DetectionMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.DetectionMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.DetectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean_average_precision = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->mean_average_precision(), output);
  }

  // optional float mean_average_precision_ha_weighted = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->mean_average_precision_ha_weighted(), output);
  }

  // repeated float precisions = 3;
  for (int i = 0, n = this->precisions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      3, this->precisions(i), output);
  }

  // repeated float recalls = 4;
  for (int i = 0, n = this->recalls_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      4, this->recalls(i), output);
  }

  // repeated float precisions_ha_weighted = 5;
  for (int i = 0, n = this->precisions_ha_weighted_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      5, this->precisions_ha_weighted(i), output);
  }

  // repeated float recalls_ha_weighted = 6;
  for (int i = 0, n = this->recalls_ha_weighted_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      6, this->recalls_ha_weighted(i), output);
  }

  // repeated float score_cutoffs = 7;
  for (int i = 0, n = this->score_cutoffs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      7, this->score_cutoffs(i), output);
  }

  // optional .waymo.open_dataset.Breakdown breakdown = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::breakdown(this), output);
  }

  // optional .waymo.open_dataset.DetectionMeasurements measurements = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::measurements(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.DetectionMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.DetectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean_average_precision = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->mean_average_precision(), target);
  }

  // optional float mean_average_precision_ha_weighted = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->mean_average_precision_ha_weighted(), target);
  }

  // repeated float precisions = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(3, this->precisions_, target);

  // repeated float recalls = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(4, this->recalls_, target);

  // repeated float precisions_ha_weighted = 5;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(5, this->precisions_ha_weighted_, target);

  // repeated float recalls_ha_weighted = 6;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(6, this->recalls_ha_weighted_, target);

  // repeated float score_cutoffs = 7;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(7, this->score_cutoffs_, target);

  // optional .waymo.open_dataset.Breakdown breakdown = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::breakdown(this), target);
  }

  // optional .waymo.open_dataset.DetectionMeasurements measurements = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::measurements(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.DetectionMetrics)
  return target;
}

size_t DetectionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.DetectionMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float precisions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->precisions_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->precisions_size());
    total_size += data_size;
  }

  // repeated float recalls = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->recalls_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->recalls_size());
    total_size += data_size;
  }

  // repeated float precisions_ha_weighted = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->precisions_ha_weighted_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->precisions_ha_weighted_size());
    total_size += data_size;
  }

  // repeated float recalls_ha_weighted = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->recalls_ha_weighted_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->recalls_ha_weighted_size());
    total_size += data_size;
  }

  // repeated float score_cutoffs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->score_cutoffs_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->score_cutoffs_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .waymo.open_dataset.Breakdown breakdown = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *breakdown_);
    }

    // optional .waymo.open_dataset.DetectionMeasurements measurements = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *measurements_);
    }

    // optional float mean_average_precision = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float mean_average_precision_ha_weighted = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.DetectionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.DetectionMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.DetectionMetrics)
    MergeFrom(*source);
  }
}

void DetectionMetrics::MergeFrom(const DetectionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.DetectionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  precisions_.MergeFrom(from.precisions_);
  recalls_.MergeFrom(from.recalls_);
  precisions_ha_weighted_.MergeFrom(from.precisions_ha_weighted_);
  recalls_ha_weighted_.MergeFrom(from.recalls_ha_weighted_);
  score_cutoffs_.MergeFrom(from.score_cutoffs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_breakdown()->::waymo::open_dataset::Breakdown::MergeFrom(from.breakdown());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_measurements()->::waymo::open_dataset::DetectionMeasurements::MergeFrom(from.measurements());
    }
    if (cached_has_bits & 0x00000004u) {
      mean_average_precision_ = from.mean_average_precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_average_precision_ha_weighted_ = from.mean_average_precision_ha_weighted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectionMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.DetectionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionMetrics::CopyFrom(const DetectionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.DetectionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionMetrics::IsInitialized() const {
  return true;
}

void DetectionMetrics::Swap(DetectionMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionMetrics::InternalSwap(DetectionMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  precisions_.InternalSwap(&other->precisions_);
  recalls_.InternalSwap(&other->recalls_);
  precisions_ha_weighted_.InternalSwap(&other->precisions_ha_weighted_);
  recalls_ha_weighted_.InternalSwap(&other->recalls_ha_weighted_);
  score_cutoffs_.InternalSwap(&other->score_cutoffs_);
  swap(breakdown_, other->breakdown_);
  swap(measurements_, other->measurements_);
  swap(mean_average_precision_, other->mean_average_precision_);
  swap(mean_average_precision_ha_weighted_, other->mean_average_precision_ha_weighted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackingMeasurement::InitAsDefaultInstance() {
}
class TrackingMeasurement::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TrackingMeasurement>()._has_bits_);
  static void set_has_num_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_mismatches(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_matching_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_objects_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_score_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingMeasurement::kNumMissesFieldNumber;
const int TrackingMeasurement::kNumFpsFieldNumber;
const int TrackingMeasurement::kNumMismatchesFieldNumber;
const int TrackingMeasurement::kMatchingCostFieldNumber;
const int TrackingMeasurement::kNumMatchesFieldNumber;
const int TrackingMeasurement::kNumObjectsGtFieldNumber;
const int TrackingMeasurement::kScoreCutoffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingMeasurement::TrackingMeasurement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.TrackingMeasurement)
}
TrackingMeasurement::TrackingMeasurement(const TrackingMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_misses_, &from.num_misses_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_cutoff_) -
    reinterpret_cast<char*>(&num_misses_)) + sizeof(score_cutoff_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.TrackingMeasurement)
}

void TrackingMeasurement::SharedCtor() {
  ::memset(&num_misses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_cutoff_) -
      reinterpret_cast<char*>(&num_misses_)) + sizeof(score_cutoff_));
}

TrackingMeasurement::~TrackingMeasurement() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.TrackingMeasurement)
  SharedDtor();
}

void TrackingMeasurement::SharedDtor() {
}

void TrackingMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackingMeasurement& TrackingMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackingMeasurement_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void TrackingMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.TrackingMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&num_misses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_cutoff_) -
        reinterpret_cast<char*>(&num_misses_)) + sizeof(score_cutoff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackingMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_misses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_num_misses(&has_bits);
          num_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_fps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_num_fps(&has_bits);
          num_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_mismatches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_num_mismatches(&has_bits);
          num_mismatches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double matching_cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          HasBitSetters::set_has_matching_cost(&has_bits);
          matching_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 num_matches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_num_matches(&has_bits);
          num_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_objects_gt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_num_objects_gt(&has_bits);
          num_objects_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score_cutoff = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_score_cutoff(&has_bits);
          score_cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackingMeasurement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.TrackingMeasurement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_misses = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_num_misses(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_fps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_fps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_mismatches = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_num_mismatches(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_mismatches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double matching_cost = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_matching_cost(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matching_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_matches = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_num_matches(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_objects_gt = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_num_objects_gt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_objects_gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_cutoff = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_score_cutoff(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_cutoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.TrackingMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.TrackingMeasurement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackingMeasurement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.TrackingMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_misses = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_misses(), output);
  }

  // optional int32 num_fps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_fps(), output);
  }

  // optional int32 num_mismatches = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_mismatches(), output);
  }

  // optional double matching_cost = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->matching_cost(), output);
  }

  // optional int32 num_matches = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_matches(), output);
  }

  // optional int32 num_objects_gt = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->num_objects_gt(), output);
  }

  // optional float score_cutoff = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->score_cutoff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.TrackingMeasurement)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingMeasurement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.TrackingMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_misses = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_misses(), target);
  }

  // optional int32 num_fps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_fps(), target);
  }

  // optional int32 num_mismatches = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_mismatches(), target);
  }

  // optional double matching_cost = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->matching_cost(), target);
  }

  // optional int32 num_matches = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->num_matches(), target);
  }

  // optional int32 num_objects_gt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->num_objects_gt(), target);
  }

  // optional float score_cutoff = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->score_cutoff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.TrackingMeasurement)
  return target;
}

size_t TrackingMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.TrackingMeasurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 num_misses = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_misses());
    }

    // optional int32 num_fps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_fps());
    }

    // optional double matching_cost = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 num_mismatches = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_mismatches());
    }

    // optional int32 num_matches = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_matches());
    }

    // optional int32 num_objects_gt = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_objects_gt());
    }

    // optional float score_cutoff = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingMeasurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.TrackingMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingMeasurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.TrackingMeasurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.TrackingMeasurement)
    MergeFrom(*source);
  }
}

void TrackingMeasurement::MergeFrom(const TrackingMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.TrackingMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      num_misses_ = from.num_misses_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_fps_ = from.num_fps_;
    }
    if (cached_has_bits & 0x00000004u) {
      matching_cost_ = from.matching_cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_mismatches_ = from.num_mismatches_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_matches_ = from.num_matches_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_objects_gt_ = from.num_objects_gt_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_cutoff_ = from.score_cutoff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingMeasurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.TrackingMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingMeasurement::CopyFrom(const TrackingMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.TrackingMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingMeasurement::IsInitialized() const {
  return true;
}

void TrackingMeasurement::Swap(TrackingMeasurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingMeasurement::InternalSwap(TrackingMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_misses_, other->num_misses_);
  swap(num_fps_, other->num_fps_);
  swap(matching_cost_, other->matching_cost_);
  swap(num_mismatches_, other->num_mismatches_);
  swap(num_matches_, other->num_matches_);
  swap(num_objects_gt_, other->num_objects_gt_);
  swap(score_cutoff_, other->score_cutoff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingMeasurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackingMeasurements::InitAsDefaultInstance() {
  ::waymo::open_dataset::_TrackingMeasurements_default_instance_._instance.get_mutable()->breakdown_ = const_cast< ::waymo::open_dataset::Breakdown*>(
      ::waymo::open_dataset::Breakdown::internal_default_instance());
}
class TrackingMeasurements::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TrackingMeasurements>()._has_bits_);
  static const ::waymo::open_dataset::Breakdown& breakdown(const TrackingMeasurements* msg);
  static void set_has_breakdown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::waymo::open_dataset::Breakdown&
TrackingMeasurements::HasBitSetters::breakdown(const TrackingMeasurements* msg) {
  return *msg->breakdown_;
}
void TrackingMeasurements::clear_breakdown() {
  if (breakdown_ != nullptr) breakdown_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingMeasurements::kMeasurementsFieldNumber;
const int TrackingMeasurements::kBreakdownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingMeasurements::TrackingMeasurements()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.TrackingMeasurements)
}
TrackingMeasurements::TrackingMeasurements(const TrackingMeasurements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      measurements_(from.measurements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_breakdown()) {
    breakdown_ = new ::waymo::open_dataset::Breakdown(*from.breakdown_);
  } else {
    breakdown_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.TrackingMeasurements)
}

void TrackingMeasurements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  breakdown_ = nullptr;
}

TrackingMeasurements::~TrackingMeasurements() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.TrackingMeasurements)
  SharedDtor();
}

void TrackingMeasurements::SharedDtor() {
  if (this != internal_default_instance()) delete breakdown_;
}

void TrackingMeasurements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackingMeasurements& TrackingMeasurements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackingMeasurements_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void TrackingMeasurements::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.TrackingMeasurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  measurements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(breakdown_ != nullptr);
    breakdown_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackingMeasurements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.TrackingMeasurement measurements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Breakdown breakdown = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackingMeasurements::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.TrackingMeasurements)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.TrackingMeasurement measurements = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Breakdown breakdown = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_breakdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.TrackingMeasurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.TrackingMeasurements)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackingMeasurements::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.TrackingMeasurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.TrackingMeasurement measurements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->measurements(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::breakdown(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.TrackingMeasurements)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingMeasurements::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.TrackingMeasurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.TrackingMeasurement measurements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->measurements(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::breakdown(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.TrackingMeasurements)
  return target;
}

size_t TrackingMeasurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.TrackingMeasurements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.TrackingMeasurement measurements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->measurements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->measurements(static_cast<int>(i)));
    }
  }

  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *breakdown_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingMeasurements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.TrackingMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingMeasurements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingMeasurements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.TrackingMeasurements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.TrackingMeasurements)
    MergeFrom(*source);
  }
}

void TrackingMeasurements::MergeFrom(const TrackingMeasurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.TrackingMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measurements_.MergeFrom(from.measurements_);
  if (from.has_breakdown()) {
    mutable_breakdown()->::waymo::open_dataset::Breakdown::MergeFrom(from.breakdown());
  }
}

void TrackingMeasurements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.TrackingMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingMeasurements::CopyFrom(const TrackingMeasurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.TrackingMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingMeasurements::IsInitialized() const {
  return true;
}

void TrackingMeasurements::Swap(TrackingMeasurements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingMeasurements::InternalSwap(TrackingMeasurements* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&measurements_)->InternalSwap(CastToBase(&other->measurements_));
  swap(breakdown_, other->breakdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingMeasurements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackingMetrics::InitAsDefaultInstance() {
  ::waymo::open_dataset::_TrackingMetrics_default_instance_._instance.get_mutable()->breakdown_ = const_cast< ::waymo::open_dataset::Breakdown*>(
      ::waymo::open_dataset::Breakdown::internal_default_instance());
  ::waymo::open_dataset::_TrackingMetrics_default_instance_._instance.get_mutable()->measurements_ = const_cast< ::waymo::open_dataset::TrackingMeasurements*>(
      ::waymo::open_dataset::TrackingMeasurements::internal_default_instance());
}
class TrackingMetrics::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TrackingMetrics>()._has_bits_);
  static void set_has_mota(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_motp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_miss(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mismatch(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_score_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::waymo::open_dataset::Breakdown& breakdown(const TrackingMetrics* msg);
  static void set_has_breakdown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::waymo::open_dataset::TrackingMeasurements& measurements(const TrackingMetrics* msg);
  static void set_has_measurements(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::waymo::open_dataset::Breakdown&
TrackingMetrics::HasBitSetters::breakdown(const TrackingMetrics* msg) {
  return *msg->breakdown_;
}
const ::waymo::open_dataset::TrackingMeasurements&
TrackingMetrics::HasBitSetters::measurements(const TrackingMetrics* msg) {
  return *msg->measurements_;
}
void TrackingMetrics::clear_breakdown() {
  if (breakdown_ != nullptr) breakdown_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingMetrics::kMotaFieldNumber;
const int TrackingMetrics::kMotpFieldNumber;
const int TrackingMetrics::kMissFieldNumber;
const int TrackingMetrics::kMismatchFieldNumber;
const int TrackingMetrics::kFpFieldNumber;
const int TrackingMetrics::kScoreCutoffFieldNumber;
const int TrackingMetrics::kBreakdownFieldNumber;
const int TrackingMetrics::kMeasurementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingMetrics::TrackingMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.TrackingMetrics)
}
TrackingMetrics::TrackingMetrics(const TrackingMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_breakdown()) {
    breakdown_ = new ::waymo::open_dataset::Breakdown(*from.breakdown_);
  } else {
    breakdown_ = nullptr;
  }
  if (from.has_measurements()) {
    measurements_ = new ::waymo::open_dataset::TrackingMeasurements(*from.measurements_);
  } else {
    measurements_ = nullptr;
  }
  ::memcpy(&mota_, &from.mota_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_cutoff_) -
    reinterpret_cast<char*>(&mota_)) + sizeof(score_cutoff_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.TrackingMetrics)
}

void TrackingMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackingMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  ::memset(&breakdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_cutoff_) -
      reinterpret_cast<char*>(&breakdown_)) + sizeof(score_cutoff_));
}

TrackingMetrics::~TrackingMetrics() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.TrackingMetrics)
  SharedDtor();
}

void TrackingMetrics::SharedDtor() {
  if (this != internal_default_instance()) delete breakdown_;
  if (this != internal_default_instance()) delete measurements_;
}

void TrackingMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackingMetrics& TrackingMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackingMetrics_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void TrackingMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.TrackingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(breakdown_ != nullptr);
      breakdown_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(measurements_ != nullptr);
      measurements_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&mota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_cutoff_) -
        reinterpret_cast<char*>(&mota_)) + sizeof(score_cutoff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackingMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float mota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_mota(&has_bits);
          mota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float motp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_motp(&has_bits);
          motp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float miss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_miss(&has_bits);
          miss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mismatch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_mismatch(&has_bits);
          mismatch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_fp(&has_bits);
          fp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float score_cutoff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_score_cutoff(&has_bits);
          score_cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Breakdown breakdown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.TrackingMeasurements measurements = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_measurements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackingMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.TrackingMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mota = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_mota(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float motp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_motp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float miss = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_miss(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &miss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mismatch = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_mismatch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mismatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_fp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_cutoff = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_score_cutoff(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_cutoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Breakdown breakdown = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_breakdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.TrackingMeasurements measurements = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.TrackingMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.TrackingMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackingMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.TrackingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mota = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->mota(), output);
  }

  // optional float motp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->motp(), output);
  }

  // optional float miss = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->miss(), output);
  }

  // optional float mismatch = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->mismatch(), output);
  }

  // optional float fp = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->fp(), output);
  }

  // optional float score_cutoff = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->score_cutoff(), output);
  }

  // optional .waymo.open_dataset.Breakdown breakdown = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::breakdown(this), output);
  }

  // optional .waymo.open_dataset.TrackingMeasurements measurements = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::measurements(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.TrackingMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.TrackingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mota = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->mota(), target);
  }

  // optional float motp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->motp(), target);
  }

  // optional float miss = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->miss(), target);
  }

  // optional float mismatch = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->mismatch(), target);
  }

  // optional float fp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->fp(), target);
  }

  // optional float score_cutoff = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->score_cutoff(), target);
  }

  // optional .waymo.open_dataset.Breakdown breakdown = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::breakdown(this), target);
  }

  // optional .waymo.open_dataset.TrackingMeasurements measurements = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::measurements(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.TrackingMetrics)
  return target;
}

size_t TrackingMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.TrackingMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .waymo.open_dataset.Breakdown breakdown = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *breakdown_);
    }

    // optional .waymo.open_dataset.TrackingMeasurements measurements = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *measurements_);
    }

    // optional float mota = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float motp = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float miss = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float mismatch = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float fp = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float score_cutoff = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.TrackingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.TrackingMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.TrackingMetrics)
    MergeFrom(*source);
  }
}

void TrackingMetrics::MergeFrom(const TrackingMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.TrackingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_breakdown()->::waymo::open_dataset::Breakdown::MergeFrom(from.breakdown());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_measurements()->::waymo::open_dataset::TrackingMeasurements::MergeFrom(from.measurements());
    }
    if (cached_has_bits & 0x00000004u) {
      mota_ = from.mota_;
    }
    if (cached_has_bits & 0x00000008u) {
      motp_ = from.motp_;
    }
    if (cached_has_bits & 0x00000010u) {
      miss_ = from.miss_;
    }
    if (cached_has_bits & 0x00000020u) {
      mismatch_ = from.mismatch_;
    }
    if (cached_has_bits & 0x00000040u) {
      fp_ = from.fp_;
    }
    if (cached_has_bits & 0x00000080u) {
      score_cutoff_ = from.score_cutoff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.TrackingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingMetrics::CopyFrom(const TrackingMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.TrackingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingMetrics::IsInitialized() const {
  return true;
}

void TrackingMetrics::Swap(TrackingMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingMetrics::InternalSwap(TrackingMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(breakdown_, other->breakdown_);
  swap(measurements_, other->measurements_);
  swap(mota_, other->mota_);
  swap(motp_, other->motp_);
  swap(miss_, other->miss_);
  swap(mismatch_, other->mismatch_);
  swap(fp_, other->fp_);
  swap(score_cutoff_, other->score_cutoff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Object* Arena::CreateMaybeMessage< ::waymo::open_dataset::Object >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::NoLabelZoneObject* Arena::CreateMaybeMessage< ::waymo::open_dataset::NoLabelZoneObject >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::NoLabelZoneObject >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Objects* Arena::CreateMaybeMessage< ::waymo::open_dataset::Objects >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Objects >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MatcherProto* Arena::CreateMaybeMessage< ::waymo::open_dataset::MatcherProto >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MatcherProto >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Difficulty* Arena::CreateMaybeMessage< ::waymo::open_dataset::Difficulty >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Difficulty >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Config* Arena::CreateMaybeMessage< ::waymo::open_dataset::Config >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::DetectionMeasurement* Arena::CreateMaybeMessage< ::waymo::open_dataset::DetectionMeasurement >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::DetectionMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::DetectionMeasurements* Arena::CreateMaybeMessage< ::waymo::open_dataset::DetectionMeasurements >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::DetectionMeasurements >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::DetectionMetrics* Arena::CreateMaybeMessage< ::waymo::open_dataset::DetectionMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::DetectionMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::TrackingMeasurement* Arena::CreateMaybeMessage< ::waymo::open_dataset::TrackingMeasurement >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::TrackingMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::TrackingMeasurements* Arena::CreateMaybeMessage< ::waymo::open_dataset::TrackingMeasurements >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::TrackingMeasurements >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::TrackingMetrics* Arena::CreateMaybeMessage< ::waymo::open_dataset::TrackingMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::TrackingMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
