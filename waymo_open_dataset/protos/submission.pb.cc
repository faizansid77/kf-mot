// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/submission.proto

#include "waymo_open_dataset/protos/submission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
namespace waymo {
namespace open_dataset {
class SubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Submission> _instance;
} _Submission_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_Submission_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Submission_default_instance_;
    new (ptr) ::waymo::open_dataset::Submission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Submission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Submission_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Submission_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto}, {
      &scc_info_Objects_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, task_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, account_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, unique_method_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, authors_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, affiliation_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, description_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, method_link_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, sensor_type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, number_past_frames_exclude_current_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, number_future_frames_exclude_current_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, inference_results_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, object_types_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Submission, latency_second_),
  6,
  4,
  0,
  ~0u,
  1,
  2,
  3,
  9,
  7,
  8,
  5,
  ~0u,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::waymo::open_dataset::Submission)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Submission_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto[] =
  "\n*waymo_open_dataset/protos/submission.p"
  "roto\022\022waymo.open_dataset\032\036waymo_open_dat"
  "aset/label.proto\032\'waymo_open_dataset/pro"
  "tos/metrics.proto\"\324\005\n\nSubmission\0221\n\004task"
  "\030\001 \001(\0162#.waymo.open_dataset.Submission.T"
  "ask\022\024\n\014account_name\030\r \001(\t\022\032\n\022unique_meth"
  "od_name\030\002 \001(\t\022\017\n\007authors\030\003 \003(\t\022\023\n\013affili"
  "ation\030\004 \001(\t\022\023\n\013description\030\005 \001(\t\022\023\n\013meth"
  "od_link\030\006 \001(\t\022>\n\013sensor_type\030\014 \001(\0162).way"
  "mo.open_dataset.Submission.SensorType\022*\n"
  "\"number_past_frames_exclude_current\030\t \001("
  "\005\022,\n$number_future_frames_exclude_curren"
  "t\030\n \001(\005\0226\n\021inference_results\030\013 \001(\0132\033.way"
  "mo.open_dataset.Objects\0224\n\014object_types\030"
  "\016 \003(\0162\036.waymo.open_dataset.Label.Type\022\026\n"
  "\016latency_second\030\017 \001(\002\"p\n\004Task\022\013\n\007UNKNOWN"
  "\020\000\022\020\n\014DETECTION_2D\020\001\022\020\n\014DETECTION_3D\020\002\022\017"
  "\n\013TRACKING_2D\020\003\022\017\n\013TRACKING_3D\020\004\022\025\n\021DOMA"
  "IN_ADAPTATION\020\005\"s\n\nSensorType\022\013\n\007INVALID"
  "\020\000\022\r\n\tLIDAR_ALL\020\001\022\r\n\tLIDAR_TOP\020\002\022\016\n\nCAME"
  "RA_ALL\020\003\022\024\n\020CAMERA_LIDAR_TOP\020\004\022\024\n\020CAMERA"
  "_LIDAR_ALL\020\005J\004\010\007\020\010J\004\010\010\020\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_deps[2] = {
  &::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto,
  &::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_sccs[1] = {
  &scc_info_Submission_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto, "waymo_open_dataset/protos/submission.proto", 864,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto, 1, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto), true);
namespace waymo {
namespace open_dataset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Submission_Task_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto[0];
}
bool Submission_Task_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Submission_Task Submission::UNKNOWN;
constexpr Submission_Task Submission::DETECTION_2D;
constexpr Submission_Task Submission::DETECTION_3D;
constexpr Submission_Task Submission::TRACKING_2D;
constexpr Submission_Task Submission::TRACKING_3D;
constexpr Submission_Task Submission::DOMAIN_ADAPTATION;
constexpr Submission_Task Submission::Task_MIN;
constexpr Submission_Task Submission::Task_MAX;
constexpr int Submission::Task_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Submission_SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto[1];
}
bool Submission_SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Submission_SensorType Submission::INVALID;
constexpr Submission_SensorType Submission::LIDAR_ALL;
constexpr Submission_SensorType Submission::LIDAR_TOP;
constexpr Submission_SensorType Submission::CAMERA_ALL;
constexpr Submission_SensorType Submission::CAMERA_LIDAR_TOP;
constexpr Submission_SensorType Submission::CAMERA_LIDAR_ALL;
constexpr Submission_SensorType Submission::SensorType_MIN;
constexpr Submission_SensorType Submission::SensorType_MAX;
constexpr int Submission::SensorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Submission::InitAsDefaultInstance() {
  ::waymo::open_dataset::_Submission_default_instance_._instance.get_mutable()->inference_results_ = const_cast< ::waymo::open_dataset::Objects*>(
      ::waymo::open_dataset::Objects::internal_default_instance());
}
class Submission::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Submission>()._has_bits_);
  static void set_has_task(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unique_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_affiliation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_method_link(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sensor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_number_past_frames_exclude_current(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_number_future_frames_exclude_current(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::waymo::open_dataset::Objects& inference_results(const Submission* msg);
  static void set_has_inference_results(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_latency_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::waymo::open_dataset::Objects&
Submission::HasBitSetters::inference_results(const Submission* msg) {
  return *msg->inference_results_;
}
void Submission::clear_inference_results() {
  if (inference_results_ != nullptr) inference_results_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Submission::kTaskFieldNumber;
const int Submission::kAccountNameFieldNumber;
const int Submission::kUniqueMethodNameFieldNumber;
const int Submission::kAuthorsFieldNumber;
const int Submission::kAffiliationFieldNumber;
const int Submission::kDescriptionFieldNumber;
const int Submission::kMethodLinkFieldNumber;
const int Submission::kSensorTypeFieldNumber;
const int Submission::kNumberPastFramesExcludeCurrentFieldNumber;
const int Submission::kNumberFutureFramesExcludeCurrentFieldNumber;
const int Submission::kInferenceResultsFieldNumber;
const int Submission::kObjectTypesFieldNumber;
const int Submission::kLatencySecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Submission::Submission()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Submission)
}
Submission::Submission(const Submission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      authors_(from.authors_),
      object_types_(from.object_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_method_name()) {
    unique_method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_method_name_);
  }
  affiliation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_affiliation()) {
    affiliation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  method_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_link()) {
    method_link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_link_);
  }
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  if (from.has_inference_results()) {
    inference_results_ = new ::waymo::open_dataset::Objects(*from.inference_results_);
  } else {
    inference_results_ = nullptr;
  }
  ::memcpy(&task_, &from.task_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_second_) -
    reinterpret_cast<char*>(&task_)) + sizeof(latency_second_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Submission)
}

void Submission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Submission_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto.base);
  unique_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inference_results_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_second_) -
      reinterpret_cast<char*>(&inference_results_)) + sizeof(latency_second_));
}

Submission::~Submission() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Submission)
  SharedDtor();
}

void Submission::SharedDtor() {
  unique_method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inference_results_;
}

void Submission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Submission& Submission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Submission_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto.base);
  return *internal_default_instance();
}


void Submission::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Submission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authors_.Clear();
  object_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      unique_method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      affiliation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      method_link_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(inference_results_ != nullptr);
      inference_results_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&task_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_past_frames_exclude_current_) -
        reinterpret_cast<char*>(&task_)) + sizeof(number_past_frames_exclude_current_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&number_future_frames_exclude_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_second_) -
        reinterpret_cast<char*>(&number_future_frames_exclude_current_)) + sizeof(latency_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Submission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.Submission.Task task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Submission_Task_IsValid(val))) {
            set_task(static_cast<::waymo::open_dataset::Submission_Task>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string unique_method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_unique_method_name(), ptr, ctx, "waymo.open_dataset.Submission.unique_method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string authors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_authors(), ptr, ctx, "waymo.open_dataset.Submission.authors");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional string affiliation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_affiliation(), ptr, ctx, "waymo.open_dataset.Submission.affiliation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_description(), ptr, ctx, "waymo.open_dataset.Submission.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string method_link = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_method_link(), ptr, ctx, "waymo.open_dataset.Submission.method_link");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_past_frames_exclude_current = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          HasBitSetters::set_has_number_past_frames_exclude_current(&has_bits);
          number_past_frames_exclude_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_future_frames_exclude_current = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_number_future_frames_exclude_current(&has_bits);
          number_future_frames_exclude_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Objects inference_results = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_inference_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Submission.SensorType sensor_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Submission_SensorType_IsValid(val))) {
            set_sensor_type(static_cast<::waymo::open_dataset::Submission_SensorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string account_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_account_name(), ptr, ctx, "waymo.open_dataset.Submission.account_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.Label.Type object_types = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Label_Type_IsValid(val))) {
              add_object_types(static_cast<::waymo::open_dataset::Label_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 112);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_object_types(), ptr, ctx, ::waymo::open_dataset::Label_Type_IsValid, mutable_unknown_fields(), 14);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float latency_second = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          HasBitSetters::set_has_latency_second(&has_bits);
          latency_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Submission::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Submission)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.Submission.Task task = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Submission_Task_IsValid(value)) {
            set_task(static_cast< ::waymo::open_dataset::Submission_Task >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unique_method_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_method_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Submission.unique_method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string authors = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_authors()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authors(this->authors_size() - 1).data(),
            static_cast<int>(this->authors(this->authors_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Submission.authors");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string affiliation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_affiliation()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->affiliation().data(), static_cast<int>(this->affiliation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Submission.affiliation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Submission.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_link = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_method_link()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_link().data(), static_cast<int>(this->method_link().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Submission.method_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 number_past_frames_exclude_current = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_number_past_frames_exclude_current(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_past_frames_exclude_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 number_future_frames_exclude_current = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_number_future_frames_exclude_current(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_future_frames_exclude_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Objects inference_results = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Submission.SensorType sensor_type = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Submission_SensorType_IsValid(value)) {
            set_sensor_type(static_cast< ::waymo::open_dataset::Submission_SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Submission.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.Label.Type object_types = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Label_Type_IsValid(value)) {
            add_object_types(static_cast< ::waymo::open_dataset::Label_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 14,
                 ::waymo::open_dataset::Label_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_object_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float latency_second = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          HasBitSetters::set_has_latency_second(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latency_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Submission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Submission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Submission::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Submission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Submission.Task task = 1;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->task(), output);
  }

  // optional string unique_method_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.unique_method_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unique_method_name(), output);
  }

  // repeated string authors = 3;
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authors(i).data(), static_cast<int>(this->authors(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.authors");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->authors(i), output);
  }

  // optional string affiliation = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.affiliation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->affiliation(), output);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string method_link = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_link().data(), static_cast<int>(this->method_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.method_link");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->method_link(), output);
  }

  // optional int32 number_past_frames_exclude_current = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->number_past_frames_exclude_current(), output);
  }

  // optional int32 number_future_frames_exclude_current = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->number_future_frames_exclude_current(), output);
  }

  // optional .waymo.open_dataset.Objects inference_results = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::inference_results(this), output);
  }

  // optional .waymo.open_dataset.Submission.SensorType sensor_type = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->sensor_type(), output);
  }

  // optional string account_name = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.account_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->account_name(), output);
  }

  // repeated .waymo.open_dataset.Label.Type object_types = 14;
  for (int i = 0, n = this->object_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->object_types(i), output);
  }

  // optional float latency_second = 15;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->latency_second(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Submission)
}

::PROTOBUF_NAMESPACE_ID::uint8* Submission::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Submission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Submission.Task task = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->task(), target);
  }

  // optional string unique_method_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.unique_method_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->unique_method_name(), target);
  }

  // repeated string authors = 3;
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authors(i).data(), static_cast<int>(this->authors(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.authors");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->authors(i), target);
  }

  // optional string affiliation = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.affiliation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->affiliation(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string method_link = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_link().data(), static_cast<int>(this->method_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.method_link");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->method_link(), target);
  }

  // optional int32 number_past_frames_exclude_current = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->number_past_frames_exclude_current(), target);
  }

  // optional int32 number_future_frames_exclude_current = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->number_future_frames_exclude_current(), target);
  }

  // optional .waymo.open_dataset.Objects inference_results = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::inference_results(this), target);
  }

  // optional .waymo.open_dataset.Submission.SensorType sensor_type = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->sensor_type(), target);
  }

  // optional string account_name = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Submission.account_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->account_name(), target);
  }

  // repeated .waymo.open_dataset.Label.Type object_types = 14;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    14, this->object_types_, target);

  // optional float latency_second = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->latency_second(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Submission)
  return target;
}

size_t Submission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Submission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string authors = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->authors_size());
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->authors(i));
  }

  // repeated .waymo.open_dataset.Label.Type object_types = 14;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->object_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->object_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_method_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_method_name());
    }

    // optional string affiliation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->affiliation());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string method_link = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->method_link());
    }

    // optional string account_name = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional .waymo.open_dataset.Objects inference_results = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_results_);
    }

    // optional .waymo.open_dataset.Submission.Task task = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->task());
    }

    // optional int32 number_past_frames_exclude_current = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->number_past_frames_exclude_current());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 number_future_frames_exclude_current = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->number_future_frames_exclude_current());
    }

    // optional .waymo.open_dataset.Submission.SensorType sensor_type = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sensor_type());
    }

    // optional float latency_second = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Submission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Submission)
  GOOGLE_DCHECK_NE(&from, this);
  const Submission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Submission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Submission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Submission)
    MergeFrom(*source);
  }
}

void Submission::MergeFrom(const Submission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Submission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authors_.MergeFrom(from.authors_);
  object_types_.MergeFrom(from.object_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unique_method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_method_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      affiliation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      method_link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_link_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_inference_results()->::waymo::open_dataset::Objects::MergeFrom(from.inference_results());
    }
    if (cached_has_bits & 0x00000040u) {
      task_ = from.task_;
    }
    if (cached_has_bits & 0x00000080u) {
      number_past_frames_exclude_current_ = from.number_past_frames_exclude_current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      number_future_frames_exclude_current_ = from.number_future_frames_exclude_current_;
    }
    if (cached_has_bits & 0x00000200u) {
      sensor_type_ = from.sensor_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      latency_second_ = from.latency_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Submission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Submission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submission::CopyFrom(const Submission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Submission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submission::IsInitialized() const {
  return true;
}

void Submission::Swap(Submission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Submission::InternalSwap(Submission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  authors_.InternalSwap(CastToBase(&other->authors_));
  object_types_.InternalSwap(&other->object_types_);
  unique_method_name_.Swap(&other->unique_method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  affiliation_.Swap(&other->affiliation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_link_.Swap(&other->method_link_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inference_results_, other->inference_results_);
  swap(task_, other->task_);
  swap(number_past_frames_exclude_current_, other->number_past_frames_exclude_current_);
  swap(number_future_frames_exclude_current_, other->number_future_frames_exclude_current_);
  swap(sensor_type_, other->sensor_type_);
  swap(latency_second_, other->latency_second_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Submission::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Submission* Arena::CreateMaybeMessage< ::waymo::open_dataset::Submission >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Submission >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
