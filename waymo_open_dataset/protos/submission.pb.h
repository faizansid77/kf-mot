// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/submission.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "waymo_open_dataset/label.pb.h"
#include "waymo_open_dataset/protos/metrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto;
namespace waymo {
namespace open_dataset {
class Submission;
class SubmissionDefaultTypeInternal;
extern SubmissionDefaultTypeInternal _Submission_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::Submission* Arena::CreateMaybeMessage<::waymo::open_dataset::Submission>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum Submission_Task : int {
  Submission_Task_UNKNOWN = 0,
  Submission_Task_DETECTION_2D = 1,
  Submission_Task_DETECTION_3D = 2,
  Submission_Task_TRACKING_2D = 3,
  Submission_Task_TRACKING_3D = 4,
  Submission_Task_DOMAIN_ADAPTATION = 5
};
bool Submission_Task_IsValid(int value);
constexpr Submission_Task Submission_Task_Task_MIN = Submission_Task_UNKNOWN;
constexpr Submission_Task Submission_Task_Task_MAX = Submission_Task_DOMAIN_ADAPTATION;
constexpr int Submission_Task_Task_ARRAYSIZE = Submission_Task_Task_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Submission_Task_descriptor();
template<typename T>
inline const std::string& Submission_Task_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Submission_Task>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Submission_Task_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Submission_Task_descriptor(), enum_t_value);
}
inline bool Submission_Task_Parse(
    const std::string& name, Submission_Task* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Submission_Task>(
    Submission_Task_descriptor(), name, value);
}
enum Submission_SensorType : int {
  Submission_SensorType_INVALID = 0,
  Submission_SensorType_LIDAR_ALL = 1,
  Submission_SensorType_LIDAR_TOP = 2,
  Submission_SensorType_CAMERA_ALL = 3,
  Submission_SensorType_CAMERA_LIDAR_TOP = 4,
  Submission_SensorType_CAMERA_LIDAR_ALL = 5
};
bool Submission_SensorType_IsValid(int value);
constexpr Submission_SensorType Submission_SensorType_SensorType_MIN = Submission_SensorType_INVALID;
constexpr Submission_SensorType Submission_SensorType_SensorType_MAX = Submission_SensorType_CAMERA_LIDAR_ALL;
constexpr int Submission_SensorType_SensorType_ARRAYSIZE = Submission_SensorType_SensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Submission_SensorType_descriptor();
template<typename T>
inline const std::string& Submission_SensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Submission_SensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Submission_SensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Submission_SensorType_descriptor(), enum_t_value);
}
inline bool Submission_SensorType_Parse(
    const std::string& name, Submission_SensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Submission_SensorType>(
    Submission_SensorType_descriptor(), name, value);
}
// ===================================================================

class Submission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Submission) */ {
 public:
  Submission();
  virtual ~Submission();

  Submission(const Submission& from);
  Submission(Submission&& from) noexcept
    : Submission() {
    *this = ::std::move(from);
  }

  inline Submission& operator=(const Submission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Submission& operator=(Submission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Submission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Submission* internal_default_instance() {
    return reinterpret_cast<const Submission*>(
               &_Submission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Submission* other);
  friend void swap(Submission& a, Submission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Submission* New() const final {
    return CreateMaybeMessage<Submission>(nullptr);
  }

  Submission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Submission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Submission& from);
  void MergeFrom(const Submission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Submission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Submission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Submission_Task Task;
  static constexpr Task UNKNOWN =
    Submission_Task_UNKNOWN;
  static constexpr Task DETECTION_2D =
    Submission_Task_DETECTION_2D;
  static constexpr Task DETECTION_3D =
    Submission_Task_DETECTION_3D;
  static constexpr Task TRACKING_2D =
    Submission_Task_TRACKING_2D;
  static constexpr Task TRACKING_3D =
    Submission_Task_TRACKING_3D;
  static constexpr Task DOMAIN_ADAPTATION =
    Submission_Task_DOMAIN_ADAPTATION;
  static inline bool Task_IsValid(int value) {
    return Submission_Task_IsValid(value);
  }
  static constexpr Task Task_MIN =
    Submission_Task_Task_MIN;
  static constexpr Task Task_MAX =
    Submission_Task_Task_MAX;
  static constexpr int Task_ARRAYSIZE =
    Submission_Task_Task_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Task_descriptor() {
    return Submission_Task_descriptor();
  }
  template<typename T>
  static inline const std::string& Task_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Task>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Task_Name.");
    return Submission_Task_Name(enum_t_value);
  }
  static inline bool Task_Parse(const std::string& name,
      Task* value) {
    return Submission_Task_Parse(name, value);
  }

  typedef Submission_SensorType SensorType;
  static constexpr SensorType INVALID =
    Submission_SensorType_INVALID;
  static constexpr SensorType LIDAR_ALL =
    Submission_SensorType_LIDAR_ALL;
  static constexpr SensorType LIDAR_TOP =
    Submission_SensorType_LIDAR_TOP;
  static constexpr SensorType CAMERA_ALL =
    Submission_SensorType_CAMERA_ALL;
  static constexpr SensorType CAMERA_LIDAR_TOP =
    Submission_SensorType_CAMERA_LIDAR_TOP;
  static constexpr SensorType CAMERA_LIDAR_ALL =
    Submission_SensorType_CAMERA_LIDAR_ALL;
  static inline bool SensorType_IsValid(int value) {
    return Submission_SensorType_IsValid(value);
  }
  static constexpr SensorType SensorType_MIN =
    Submission_SensorType_SensorType_MIN;
  static constexpr SensorType SensorType_MAX =
    Submission_SensorType_SensorType_MAX;
  static constexpr int SensorType_ARRAYSIZE =
    Submission_SensorType_SensorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SensorType_descriptor() {
    return Submission_SensorType_descriptor();
  }
  template<typename T>
  static inline const std::string& SensorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SensorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SensorType_Name.");
    return Submission_SensorType_Name(enum_t_value);
  }
  static inline bool SensorType_Parse(const std::string& name,
      SensorType* value) {
    return Submission_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string authors = 3;
  int authors_size() const;
  void clear_authors();
  static const int kAuthorsFieldNumber = 3;
  const std::string& authors(int index) const;
  std::string* mutable_authors(int index);
  void set_authors(int index, const std::string& value);
  void set_authors(int index, std::string&& value);
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  std::string* add_authors();
  void add_authors(const std::string& value);
  void add_authors(std::string&& value);
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authors();

  // repeated .waymo.open_dataset.Label.Type object_types = 14;
  int object_types_size() const;
  void clear_object_types();
  static const int kObjectTypesFieldNumber = 14;
  ::waymo::open_dataset::Label_Type object_types(int index) const;
  void set_object_types(int index, ::waymo::open_dataset::Label_Type value);
  void add_object_types(::waymo::open_dataset::Label_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& object_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_object_types();

  // optional string unique_method_name = 2;
  bool has_unique_method_name() const;
  void clear_unique_method_name();
  static const int kUniqueMethodNameFieldNumber = 2;
  const std::string& unique_method_name() const;
  void set_unique_method_name(const std::string& value);
  void set_unique_method_name(std::string&& value);
  void set_unique_method_name(const char* value);
  void set_unique_method_name(const char* value, size_t size);
  std::string* mutable_unique_method_name();
  std::string* release_unique_method_name();
  void set_allocated_unique_method_name(std::string* unique_method_name);

  // optional string affiliation = 4;
  bool has_affiliation() const;
  void clear_affiliation();
  static const int kAffiliationFieldNumber = 4;
  const std::string& affiliation() const;
  void set_affiliation(const std::string& value);
  void set_affiliation(std::string&& value);
  void set_affiliation(const char* value);
  void set_affiliation(const char* value, size_t size);
  std::string* mutable_affiliation();
  std::string* release_affiliation();
  void set_allocated_affiliation(std::string* affiliation);

  // optional string description = 5;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string method_link = 6;
  bool has_method_link() const;
  void clear_method_link();
  static const int kMethodLinkFieldNumber = 6;
  const std::string& method_link() const;
  void set_method_link(const std::string& value);
  void set_method_link(std::string&& value);
  void set_method_link(const char* value);
  void set_method_link(const char* value, size_t size);
  std::string* mutable_method_link();
  std::string* release_method_link();
  void set_allocated_method_link(std::string* method_link);

  // optional string account_name = 13;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 13;
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);

  // optional .waymo.open_dataset.Objects inference_results = 11;
  bool has_inference_results() const;
  void clear_inference_results();
  static const int kInferenceResultsFieldNumber = 11;
  const ::waymo::open_dataset::Objects& inference_results() const;
  ::waymo::open_dataset::Objects* release_inference_results();
  ::waymo::open_dataset::Objects* mutable_inference_results();
  void set_allocated_inference_results(::waymo::open_dataset::Objects* inference_results);

  // optional .waymo.open_dataset.Submission.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  ::waymo::open_dataset::Submission_Task task() const;
  void set_task(::waymo::open_dataset::Submission_Task value);

  // optional int32 number_past_frames_exclude_current = 9;
  bool has_number_past_frames_exclude_current() const;
  void clear_number_past_frames_exclude_current();
  static const int kNumberPastFramesExcludeCurrentFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 number_past_frames_exclude_current() const;
  void set_number_past_frames_exclude_current(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 number_future_frames_exclude_current = 10;
  bool has_number_future_frames_exclude_current() const;
  void clear_number_future_frames_exclude_current();
  static const int kNumberFutureFramesExcludeCurrentFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 number_future_frames_exclude_current() const;
  void set_number_future_frames_exclude_current(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .waymo.open_dataset.Submission.SensorType sensor_type = 12;
  bool has_sensor_type() const;
  void clear_sensor_type();
  static const int kSensorTypeFieldNumber = 12;
  ::waymo::open_dataset::Submission_SensorType sensor_type() const;
  void set_sensor_type(::waymo::open_dataset::Submission_SensorType value);

  // optional float latency_second = 15;
  bool has_latency_second() const;
  void clear_latency_second();
  static const int kLatencySecondFieldNumber = 15;
  float latency_second() const;
  void set_latency_second(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Submission)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> object_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affiliation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_link_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::waymo::open_dataset::Objects* inference_results_;
  int task_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_past_frames_exclude_current_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_future_frames_exclude_current_;
  int sensor_type_;
  float latency_second_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Submission

// optional .waymo.open_dataset.Submission.Task task = 1;
inline bool Submission::has_task() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Submission::clear_task() {
  task_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::waymo::open_dataset::Submission_Task Submission::task() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.task)
  return static_cast< ::waymo::open_dataset::Submission_Task >(task_);
}
inline void Submission::set_task(::waymo::open_dataset::Submission_Task value) {
  assert(::waymo::open_dataset::Submission_Task_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  task_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.task)
}

// optional string account_name = 13;
inline bool Submission::has_account_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Submission::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Submission::account_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.account_name)
  return account_name_.GetNoArena();
}
inline void Submission::set_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.account_name)
}
inline void Submission::set_account_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  account_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Submission.account_name)
}
inline void Submission::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Submission.account_name)
}
inline void Submission::set_account_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Submission.account_name)
}
inline std::string* Submission::mutable_account_name() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Submission.account_name)
  return account_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Submission::release_account_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Submission.account_name)
  if (!has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return account_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  account_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Submission.account_name)
}

// optional string unique_method_name = 2;
inline bool Submission::has_unique_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Submission::clear_unique_method_name() {
  unique_method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Submission::unique_method_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.unique_method_name)
  return unique_method_name_.GetNoArena();
}
inline void Submission::set_unique_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.unique_method_name)
}
inline void Submission::set_unique_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Submission.unique_method_name)
}
inline void Submission::set_unique_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Submission.unique_method_name)
}
inline void Submission::set_unique_method_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Submission.unique_method_name)
}
inline std::string* Submission::mutable_unique_method_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Submission.unique_method_name)
  return unique_method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Submission::release_unique_method_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Submission.unique_method_name)
  if (!has_unique_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unique_method_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_unique_method_name(std::string* unique_method_name) {
  if (unique_method_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_method_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Submission.unique_method_name)
}

// repeated string authors = 3;
inline int Submission::authors_size() const {
  return authors_.size();
}
inline void Submission::clear_authors() {
  authors_.Clear();
}
inline const std::string& Submission::authors(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.authors)
  return authors_.Get(index);
}
inline std::string* Submission::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Submission.authors)
  return authors_.Mutable(index);
}
inline void Submission::set_authors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.authors)
  authors_.Mutable(index)->assign(value);
}
inline void Submission::set_authors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
inline void Submission::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Submission.authors)
}
inline void Submission::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Submission.authors)
}
inline std::string* Submission::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:waymo.open_dataset.Submission.authors)
  return authors_.Add();
}
inline void Submission::add_authors(const std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Submission.authors)
}
inline void Submission::add_authors(std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Submission.authors)
}
inline void Submission::add_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:waymo.open_dataset.Submission.authors)
}
inline void Submission::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:waymo.open_dataset.Submission.authors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Submission::authors() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Submission.authors)
  return authors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Submission::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Submission.authors)
  return &authors_;
}

// optional string affiliation = 4;
inline bool Submission::has_affiliation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Submission::clear_affiliation() {
  affiliation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Submission::affiliation() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.affiliation)
  return affiliation_.GetNoArena();
}
inline void Submission::set_affiliation(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.affiliation)
}
inline void Submission::set_affiliation(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  affiliation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Submission.affiliation)
}
inline void Submission::set_affiliation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Submission.affiliation)
}
inline void Submission::set_affiliation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Submission.affiliation)
}
inline std::string* Submission::mutable_affiliation() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Submission.affiliation)
  return affiliation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Submission::release_affiliation() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Submission.affiliation)
  if (!has_affiliation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return affiliation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_affiliation(std::string* affiliation) {
  if (affiliation != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affiliation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affiliation);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Submission.affiliation)
}

// optional string description = 5;
inline bool Submission::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Submission::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Submission::description() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.description)
  return description_.GetNoArena();
}
inline void Submission::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.description)
}
inline void Submission::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Submission.description)
}
inline void Submission::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Submission.description)
}
inline void Submission::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Submission.description)
}
inline std::string* Submission::mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Submission.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Submission::release_description() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Submission.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Submission.description)
}

// optional string method_link = 6;
inline bool Submission::has_method_link() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Submission::clear_method_link() {
  method_link_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Submission::method_link() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.method_link)
  return method_link_.GetNoArena();
}
inline void Submission::set_method_link(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.method_link)
}
inline void Submission::set_method_link(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  method_link_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Submission.method_link)
}
inline void Submission::set_method_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Submission.method_link)
}
inline void Submission::set_method_link(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Submission.method_link)
}
inline std::string* Submission::mutable_method_link() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Submission.method_link)
  return method_link_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Submission::release_method_link() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Submission.method_link)
  if (!has_method_link()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return method_link_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_method_link(std::string* method_link) {
  if (method_link != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  method_link_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_link);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Submission.method_link)
}

// optional .waymo.open_dataset.Submission.SensorType sensor_type = 12;
inline bool Submission::has_sensor_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Submission::clear_sensor_type() {
  sensor_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::waymo::open_dataset::Submission_SensorType Submission::sensor_type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.sensor_type)
  return static_cast< ::waymo::open_dataset::Submission_SensorType >(sensor_type_);
}
inline void Submission::set_sensor_type(::waymo::open_dataset::Submission_SensorType value) {
  assert(::waymo::open_dataset::Submission_SensorType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  sensor_type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.sensor_type)
}

// optional int32 number_past_frames_exclude_current = 9;
inline bool Submission::has_number_past_frames_exclude_current() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Submission::clear_number_past_frames_exclude_current() {
  number_past_frames_exclude_current_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Submission::number_past_frames_exclude_current() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.number_past_frames_exclude_current)
  return number_past_frames_exclude_current_;
}
inline void Submission::set_number_past_frames_exclude_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  number_past_frames_exclude_current_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.number_past_frames_exclude_current)
}

// optional int32 number_future_frames_exclude_current = 10;
inline bool Submission::has_number_future_frames_exclude_current() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Submission::clear_number_future_frames_exclude_current() {
  number_future_frames_exclude_current_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Submission::number_future_frames_exclude_current() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.number_future_frames_exclude_current)
  return number_future_frames_exclude_current_;
}
inline void Submission::set_number_future_frames_exclude_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  number_future_frames_exclude_current_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.number_future_frames_exclude_current)
}

// optional .waymo.open_dataset.Objects inference_results = 11;
inline bool Submission::has_inference_results() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::waymo::open_dataset::Objects& Submission::inference_results() const {
  const ::waymo::open_dataset::Objects* p = inference_results_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.inference_results)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Objects*>(
      &::waymo::open_dataset::_Objects_default_instance_);
}
inline ::waymo::open_dataset::Objects* Submission::release_inference_results() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Submission.inference_results)
  _has_bits_[0] &= ~0x00000020u;
  ::waymo::open_dataset::Objects* temp = inference_results_;
  inference_results_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Objects* Submission::mutable_inference_results() {
  _has_bits_[0] |= 0x00000020u;
  if (inference_results_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Objects>(GetArenaNoVirtual());
    inference_results_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Submission.inference_results)
  return inference_results_;
}
inline void Submission::set_allocated_inference_results(::waymo::open_dataset::Objects* inference_results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inference_results_);
  }
  if (inference_results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inference_results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inference_results, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  inference_results_ = inference_results;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Submission.inference_results)
}

// repeated .waymo.open_dataset.Label.Type object_types = 14;
inline int Submission::object_types_size() const {
  return object_types_.size();
}
inline void Submission::clear_object_types() {
  object_types_.Clear();
}
inline ::waymo::open_dataset::Label_Type Submission::object_types(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.object_types)
  return static_cast< ::waymo::open_dataset::Label_Type >(object_types_.Get(index));
}
inline void Submission::set_object_types(int index, ::waymo::open_dataset::Label_Type value) {
  assert(::waymo::open_dataset::Label_Type_IsValid(value));
  object_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.object_types)
}
inline void Submission::add_object_types(::waymo::open_dataset::Label_Type value) {
  assert(::waymo::open_dataset::Label_Type_IsValid(value));
  object_types_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Submission.object_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Submission::object_types() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Submission.object_types)
  return object_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Submission::mutable_object_types() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Submission.object_types)
  return &object_types_;
}

// optional float latency_second = 15;
inline bool Submission::has_latency_second() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Submission::clear_latency_second() {
  latency_second_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Submission::latency_second() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Submission.latency_second)
  return latency_second_;
}
inline void Submission::set_latency_second(float value) {
  _has_bits_[0] |= 0x00000400u;
  latency_second_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Submission.latency_second)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::Submission_Task> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Submission_Task>() {
  return ::waymo::open_dataset::Submission_Task_descriptor();
}
template <> struct is_proto_enum< ::waymo::open_dataset::Submission_SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Submission_SensorType>() {
  return ::waymo::open_dataset::Submission_SensorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsubmission_2eproto
