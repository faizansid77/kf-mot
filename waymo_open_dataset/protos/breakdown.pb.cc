// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/breakdown.proto

#include "waymo_open_dataset/protos/breakdown.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace waymo {
namespace open_dataset {
class BreakdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Breakdown> _instance;
} _Breakdown_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Breakdown_default_instance_;
    new (ptr) ::waymo::open_dataset::Breakdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Breakdown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Breakdown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Breakdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Breakdown, generator_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Breakdown, shard_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Breakdown, difficulty_level_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::waymo::open_dataset::Breakdown)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Breakdown_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto[] =
  "\n)waymo_open_dataset/protos/breakdown.pr"
  "oto\022\022waymo.open_dataset\032\036waymo_open_data"
  "set/label.proto\"\264\002\n\tBreakdown\022\?\n\014generat"
  "or_id\030\001 \001(\0162).waymo.open_dataset.Breakdo"
  "wn.GeneratorId\022\r\n\005shard\030\002 \001(\005\022C\n\020difficu"
  "lty_level\030\003 \001(\0162).waymo.open_dataset.Lab"
  "el.DifficultyLevel\"\221\001\n\013GeneratorId\022\013\n\007UN"
  "KNOWN\020\000\022\r\n\tONE_SHARD\020\001\022\017\n\013OBJECT_TYPE\020\002\022"
  "\t\n\005RANGE\020\003\022\017\n\013TIME_OF_DAY\020\004\022\014\n\010LOCATION\020"
  "\005\022\013\n\007WEATHER\020\006\022\014\n\010VELOCITY\020\007\022\020\n\014ALL_BUT_"
  "SIGN\020\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_deps[1] = {
  &::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_sccs[1] = {
  &scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto, "waymo_open_dataset/protos/breakdown.proto", 406,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto, 1, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto), true);
namespace waymo {
namespace open_dataset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Breakdown_GeneratorId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto[0];
}
bool Breakdown_GeneratorId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Breakdown_GeneratorId Breakdown::UNKNOWN;
constexpr Breakdown_GeneratorId Breakdown::ONE_SHARD;
constexpr Breakdown_GeneratorId Breakdown::OBJECT_TYPE;
constexpr Breakdown_GeneratorId Breakdown::RANGE;
constexpr Breakdown_GeneratorId Breakdown::TIME_OF_DAY;
constexpr Breakdown_GeneratorId Breakdown::LOCATION;
constexpr Breakdown_GeneratorId Breakdown::WEATHER;
constexpr Breakdown_GeneratorId Breakdown::VELOCITY;
constexpr Breakdown_GeneratorId Breakdown::ALL_BUT_SIGN;
constexpr Breakdown_GeneratorId Breakdown::GeneratorId_MIN;
constexpr Breakdown_GeneratorId Breakdown::GeneratorId_MAX;
constexpr int Breakdown::GeneratorId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Breakdown::InitAsDefaultInstance() {
}
class Breakdown::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Breakdown>()._has_bits_);
  static void set_has_generator_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shard(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_difficulty_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Breakdown::kGeneratorIdFieldNumber;
const int Breakdown::kShardFieldNumber;
const int Breakdown::kDifficultyLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Breakdown::Breakdown()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Breakdown)
}
Breakdown::Breakdown(const Breakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&generator_id_, &from.generator_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_level_) -
    reinterpret_cast<char*>(&generator_id_)) + sizeof(difficulty_level_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Breakdown)
}

void Breakdown::SharedCtor() {
  ::memset(&generator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_level_) -
      reinterpret_cast<char*>(&generator_id_)) + sizeof(difficulty_level_));
}

Breakdown::~Breakdown() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Breakdown)
  SharedDtor();
}

void Breakdown::SharedDtor() {
}

void Breakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Breakdown& Breakdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Breakdown_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto.base);
  return *internal_default_instance();
}


void Breakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Breakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&generator_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&difficulty_level_) -
        reinterpret_cast<char*>(&generator_id_)) + sizeof(difficulty_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Breakdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.Breakdown.GeneratorId generator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Breakdown_GeneratorId_IsValid(val))) {
            set_generator_id(static_cast<::waymo::open_dataset::Breakdown_GeneratorId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 shard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_shard(&has_bits);
          shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Label.DifficultyLevel difficulty_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Label_DifficultyLevel_IsValid(val))) {
            set_difficulty_level(static_cast<::waymo::open_dataset::Label_DifficultyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Breakdown::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Breakdown)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.Breakdown.GeneratorId generator_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Breakdown_GeneratorId_IsValid(value)) {
            set_generator_id(static_cast< ::waymo::open_dataset::Breakdown_GeneratorId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shard = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_shard(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Label.DifficultyLevel difficulty_level = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Label_DifficultyLevel_IsValid(value)) {
            set_difficulty_level(static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Breakdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Breakdown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Breakdown::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Breakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Breakdown.GeneratorId generator_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->generator_id(), output);
  }

  // optional int32 shard = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->shard(), output);
  }

  // optional .waymo.open_dataset.Label.DifficultyLevel difficulty_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->difficulty_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Breakdown)
}

::PROTOBUF_NAMESPACE_ID::uint8* Breakdown::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Breakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Breakdown.GeneratorId generator_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->generator_id(), target);
  }

  // optional int32 shard = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->shard(), target);
  }

  // optional .waymo.open_dataset.Label.DifficultyLevel difficulty_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->difficulty_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Breakdown)
  return target;
}

size_t Breakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Breakdown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .waymo.open_dataset.Breakdown.GeneratorId generator_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->generator_id());
    }

    // optional int32 shard = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->shard());
    }

    // optional .waymo.open_dataset.Label.DifficultyLevel difficulty_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->difficulty_level());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Breakdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Breakdown)
  GOOGLE_DCHECK_NE(&from, this);
  const Breakdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Breakdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Breakdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Breakdown)
    MergeFrom(*source);
  }
}

void Breakdown::MergeFrom(const Breakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Breakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      generator_id_ = from.generator_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      shard_ = from.shard_;
    }
    if (cached_has_bits & 0x00000004u) {
      difficulty_level_ = from.difficulty_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Breakdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Breakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Breakdown::CopyFrom(const Breakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Breakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Breakdown::IsInitialized() const {
  return true;
}

void Breakdown::Swap(Breakdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Breakdown::InternalSwap(Breakdown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(generator_id_, other->generator_id_);
  swap(shard_, other->shard_);
  swap(difficulty_level_, other->difficulty_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Breakdown::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Breakdown* Arena::CreateMaybeMessage< ::waymo::open_dataset::Breakdown >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Breakdown >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
