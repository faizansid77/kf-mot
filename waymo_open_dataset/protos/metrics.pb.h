// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "waymo_open_dataset/dataset.pb.h"
#include "waymo_open_dataset/label.pb.h"
#include "waymo_open_dataset/protos/breakdown.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
namespace waymo {
namespace open_dataset {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class DetectionMeasurement;
class DetectionMeasurementDefaultTypeInternal;
extern DetectionMeasurementDefaultTypeInternal _DetectionMeasurement_default_instance_;
class DetectionMeasurements;
class DetectionMeasurementsDefaultTypeInternal;
extern DetectionMeasurementsDefaultTypeInternal _DetectionMeasurements_default_instance_;
class DetectionMetrics;
class DetectionMetricsDefaultTypeInternal;
extern DetectionMetricsDefaultTypeInternal _DetectionMetrics_default_instance_;
class Difficulty;
class DifficultyDefaultTypeInternal;
extern DifficultyDefaultTypeInternal _Difficulty_default_instance_;
class MatcherProto;
class MatcherProtoDefaultTypeInternal;
extern MatcherProtoDefaultTypeInternal _MatcherProto_default_instance_;
class NoLabelZoneObject;
class NoLabelZoneObjectDefaultTypeInternal;
extern NoLabelZoneObjectDefaultTypeInternal _NoLabelZoneObject_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Objects;
class ObjectsDefaultTypeInternal;
extern ObjectsDefaultTypeInternal _Objects_default_instance_;
class TrackingMeasurement;
class TrackingMeasurementDefaultTypeInternal;
extern TrackingMeasurementDefaultTypeInternal _TrackingMeasurement_default_instance_;
class TrackingMeasurements;
class TrackingMeasurementsDefaultTypeInternal;
extern TrackingMeasurementsDefaultTypeInternal _TrackingMeasurements_default_instance_;
class TrackingMetrics;
class TrackingMetricsDefaultTypeInternal;
extern TrackingMetricsDefaultTypeInternal _TrackingMetrics_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::Config* Arena::CreateMaybeMessage<::waymo::open_dataset::Config>(Arena*);
template<> ::waymo::open_dataset::DetectionMeasurement* Arena::CreateMaybeMessage<::waymo::open_dataset::DetectionMeasurement>(Arena*);
template<> ::waymo::open_dataset::DetectionMeasurements* Arena::CreateMaybeMessage<::waymo::open_dataset::DetectionMeasurements>(Arena*);
template<> ::waymo::open_dataset::DetectionMetrics* Arena::CreateMaybeMessage<::waymo::open_dataset::DetectionMetrics>(Arena*);
template<> ::waymo::open_dataset::Difficulty* Arena::CreateMaybeMessage<::waymo::open_dataset::Difficulty>(Arena*);
template<> ::waymo::open_dataset::MatcherProto* Arena::CreateMaybeMessage<::waymo::open_dataset::MatcherProto>(Arena*);
template<> ::waymo::open_dataset::NoLabelZoneObject* Arena::CreateMaybeMessage<::waymo::open_dataset::NoLabelZoneObject>(Arena*);
template<> ::waymo::open_dataset::Object* Arena::CreateMaybeMessage<::waymo::open_dataset::Object>(Arena*);
template<> ::waymo::open_dataset::Objects* Arena::CreateMaybeMessage<::waymo::open_dataset::Objects>(Arena*);
template<> ::waymo::open_dataset::TrackingMeasurement* Arena::CreateMaybeMessage<::waymo::open_dataset::TrackingMeasurement>(Arena*);
template<> ::waymo::open_dataset::TrackingMeasurements* Arena::CreateMaybeMessage<::waymo::open_dataset::TrackingMeasurements>(Arena*);
template<> ::waymo::open_dataset::TrackingMetrics* Arena::CreateMaybeMessage<::waymo::open_dataset::TrackingMetrics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum MatcherProto_Type : int {
  MatcherProto_Type_TYPE_UNKNOWN = 0,
  MatcherProto_Type_TYPE_HUNGARIAN = 1,
  MatcherProto_Type_TYPE_SCORE_FIRST = 2,
  MatcherProto_Type_TYPE_HUNGARIAN_TEST_ONLY = 100
};
bool MatcherProto_Type_IsValid(int value);
constexpr MatcherProto_Type MatcherProto_Type_Type_MIN = MatcherProto_Type_TYPE_UNKNOWN;
constexpr MatcherProto_Type MatcherProto_Type_Type_MAX = MatcherProto_Type_TYPE_HUNGARIAN_TEST_ONLY;
constexpr int MatcherProto_Type_Type_ARRAYSIZE = MatcherProto_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatcherProto_Type_descriptor();
template<typename T>
inline const std::string& MatcherProto_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatcherProto_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatcherProto_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatcherProto_Type_descriptor(), enum_t_value);
}
inline bool MatcherProto_Type_Parse(
    const std::string& name, MatcherProto_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatcherProto_Type>(
    MatcherProto_Type_descriptor(), name, value);
}
// ===================================================================

class Object :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Object";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string context_name = 4;
  bool has_context_name() const;
  void clear_context_name();
  static const int kContextNameFieldNumber = 4;
  const std::string& context_name() const;
  void set_context_name(const std::string& value);
  void set_context_name(std::string&& value);
  void set_context_name(const char* value);
  void set_context_name(const char* value, size_t size);
  std::string* mutable_context_name();
  std::string* release_context_name();
  void set_allocated_context_name(std::string* context_name);

  // optional .waymo.open_dataset.Label object = 1;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 1;
  const ::waymo::open_dataset::Label& object() const;
  ::waymo::open_dataset::Label* release_object();
  ::waymo::open_dataset::Label* mutable_object();
  void set_allocated_object(::waymo::open_dataset::Label* object);

  // optional bool overlap_with_nlz = 3;
  bool has_overlap_with_nlz() const;
  void clear_overlap_with_nlz();
  static const int kOverlapWithNlzFieldNumber = 3;
  bool overlap_with_nlz() const;
  void set_overlap_with_nlz(bool value);

  // optional .waymo.open_dataset.CameraName.Name camera_name = 6;
  bool has_camera_name() const;
  void clear_camera_name();
  static const int kCameraNameFieldNumber = 6;
  ::waymo::open_dataset::CameraName_Name camera_name() const;
  void set_camera_name(::waymo::open_dataset::CameraName_Name value);

  // optional int64 frame_timestamp_micros = 5;
  bool has_frame_timestamp_micros() const;
  void clear_frame_timestamp_micros();
  static const int kFrameTimestampMicrosFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_micros() const;
  void set_frame_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float score = 2 [default = 1];
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Object)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_name_;
  ::waymo::open_dataset::Label* object_;
  bool overlap_with_nlz_;
  int camera_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_micros_;
  float score_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class NoLabelZoneObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.NoLabelZoneObject) */ {
 public:
  NoLabelZoneObject();
  virtual ~NoLabelZoneObject();

  NoLabelZoneObject(const NoLabelZoneObject& from);
  NoLabelZoneObject(NoLabelZoneObject&& from) noexcept
    : NoLabelZoneObject() {
    *this = ::std::move(from);
  }

  inline NoLabelZoneObject& operator=(const NoLabelZoneObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoLabelZoneObject& operator=(NoLabelZoneObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoLabelZoneObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoLabelZoneObject* internal_default_instance() {
    return reinterpret_cast<const NoLabelZoneObject*>(
               &_NoLabelZoneObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NoLabelZoneObject* other);
  friend void swap(NoLabelZoneObject& a, NoLabelZoneObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoLabelZoneObject* New() const final {
    return CreateMaybeMessage<NoLabelZoneObject>(nullptr);
  }

  NoLabelZoneObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoLabelZoneObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoLabelZoneObject& from);
  void MergeFrom(const NoLabelZoneObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoLabelZoneObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.NoLabelZoneObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string context_name = 2;
  bool has_context_name() const;
  void clear_context_name();
  static const int kContextNameFieldNumber = 2;
  const std::string& context_name() const;
  void set_context_name(const std::string& value);
  void set_context_name(std::string&& value);
  void set_context_name(const char* value);
  void set_context_name(const char* value, size_t size);
  std::string* mutable_context_name();
  std::string* release_context_name();
  void set_allocated_context_name(std::string* context_name);

  // optional .waymo.open_dataset.Polygon2dProto zone = 1;
  bool has_zone() const;
  void clear_zone();
  static const int kZoneFieldNumber = 1;
  const ::waymo::open_dataset::Polygon2dProto& zone() const;
  ::waymo::open_dataset::Polygon2dProto* release_zone();
  ::waymo::open_dataset::Polygon2dProto* mutable_zone();
  void set_allocated_zone(::waymo::open_dataset::Polygon2dProto* zone);

  // optional int64 frame_timestamp_micros = 3;
  bool has_frame_timestamp_micros() const;
  void clear_frame_timestamp_micros();
  static const int kFrameTimestampMicrosFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_micros() const;
  void set_frame_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.NoLabelZoneObject)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_name_;
  ::waymo::open_dataset::Polygon2dProto* zone_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_micros_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Objects :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Objects) */ {
 public:
  Objects();
  virtual ~Objects();

  Objects(const Objects& from);
  Objects(Objects&& from) noexcept
    : Objects() {
    *this = ::std::move(from);
  }

  inline Objects& operator=(const Objects& from) {
    CopyFrom(from);
    return *this;
  }
  inline Objects& operator=(Objects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Objects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Objects* internal_default_instance() {
    return reinterpret_cast<const Objects*>(
               &_Objects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Objects* other);
  friend void swap(Objects& a, Objects& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Objects* New() const final {
    return CreateMaybeMessage<Objects>(nullptr);
  }

  Objects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Objects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Objects& from);
  void MergeFrom(const Objects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Objects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Objects";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.Object objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::waymo::open_dataset::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Object >*
      mutable_objects();
  const ::waymo::open_dataset::Object& objects(int index) const;
  ::waymo::open_dataset::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Object >&
      objects() const;

  // repeated .waymo.open_dataset.NoLabelZoneObject no_label_zone_objects = 2;
  int no_label_zone_objects_size() const;
  void clear_no_label_zone_objects();
  static const int kNoLabelZoneObjectsFieldNumber = 2;
  ::waymo::open_dataset::NoLabelZoneObject* mutable_no_label_zone_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::NoLabelZoneObject >*
      mutable_no_label_zone_objects();
  const ::waymo::open_dataset::NoLabelZoneObject& no_label_zone_objects(int index) const;
  ::waymo::open_dataset::NoLabelZoneObject* add_no_label_zone_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::NoLabelZoneObject >&
      no_label_zone_objects() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Objects)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Object > objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::NoLabelZoneObject > no_label_zone_objects_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MatcherProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MatcherProto) */ {
 public:
  MatcherProto();
  virtual ~MatcherProto();

  MatcherProto(const MatcherProto& from);
  MatcherProto(MatcherProto&& from) noexcept
    : MatcherProto() {
    *this = ::std::move(from);
  }

  inline MatcherProto& operator=(const MatcherProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatcherProto& operator=(MatcherProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatcherProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatcherProto* internal_default_instance() {
    return reinterpret_cast<const MatcherProto*>(
               &_MatcherProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MatcherProto* other);
  friend void swap(MatcherProto& a, MatcherProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatcherProto* New() const final {
    return CreateMaybeMessage<MatcherProto>(nullptr);
  }

  MatcherProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatcherProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatcherProto& from);
  void MergeFrom(const MatcherProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatcherProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MatcherProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MatcherProto_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    MatcherProto_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_HUNGARIAN =
    MatcherProto_Type_TYPE_HUNGARIAN;
  static constexpr Type TYPE_SCORE_FIRST =
    MatcherProto_Type_TYPE_SCORE_FIRST;
  static constexpr Type TYPE_HUNGARIAN_TEST_ONLY =
    MatcherProto_Type_TYPE_HUNGARIAN_TEST_ONLY;
  static inline bool Type_IsValid(int value) {
    return MatcherProto_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    MatcherProto_Type_Type_MIN;
  static constexpr Type Type_MAX =
    MatcherProto_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    MatcherProto_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return MatcherProto_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return MatcherProto_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return MatcherProto_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MatcherProto)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Difficulty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Difficulty) */ {
 public:
  Difficulty();
  virtual ~Difficulty();

  Difficulty(const Difficulty& from);
  Difficulty(Difficulty&& from) noexcept
    : Difficulty() {
    *this = ::std::move(from);
  }

  inline Difficulty& operator=(const Difficulty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Difficulty& operator=(Difficulty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Difficulty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Difficulty* internal_default_instance() {
    return reinterpret_cast<const Difficulty*>(
               &_Difficulty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Difficulty* other);
  friend void swap(Difficulty& a, Difficulty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Difficulty* New() const final {
    return CreateMaybeMessage<Difficulty>(nullptr);
  }

  Difficulty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Difficulty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Difficulty& from);
  void MergeFrom(const Difficulty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Difficulty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Difficulty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.Label.DifficultyLevel levels = 1;
  int levels_size() const;
  void clear_levels();
  static const int kLevelsFieldNumber = 1;
  ::waymo::open_dataset::Label_DifficultyLevel levels(int index) const;
  void set_levels(int index, ::waymo::open_dataset::Label_DifficultyLevel value);
  void add_levels(::waymo::open_dataset::Label_DifficultyLevel value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_levels();

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Difficulty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> levels_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float score_cutoffs = 1;
  int score_cutoffs_size() const;
  void clear_score_cutoffs();
  static const int kScoreCutoffsFieldNumber = 1;
  float score_cutoffs(int index) const;
  void set_score_cutoffs(int index, float value);
  void add_score_cutoffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      score_cutoffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_score_cutoffs();

  // repeated .waymo.open_dataset.Breakdown.GeneratorId breakdown_generator_ids = 3;
  int breakdown_generator_ids_size() const;
  void clear_breakdown_generator_ids();
  static const int kBreakdownGeneratorIdsFieldNumber = 3;
  ::waymo::open_dataset::Breakdown_GeneratorId breakdown_generator_ids(int index) const;
  void set_breakdown_generator_ids(int index, ::waymo::open_dataset::Breakdown_GeneratorId value);
  void add_breakdown_generator_ids(::waymo::open_dataset::Breakdown_GeneratorId value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& breakdown_generator_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_breakdown_generator_ids();

  // repeated .waymo.open_dataset.Difficulty difficulties = 4;
  int difficulties_size() const;
  void clear_difficulties();
  static const int kDifficultiesFieldNumber = 4;
  ::waymo::open_dataset::Difficulty* mutable_difficulties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Difficulty >*
      mutable_difficulties();
  const ::waymo::open_dataset::Difficulty& difficulties(int index) const;
  ::waymo::open_dataset::Difficulty* add_difficulties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Difficulty >&
      difficulties() const;

  // repeated float iou_thresholds = 6;
  int iou_thresholds_size() const;
  void clear_iou_thresholds();
  static const int kIouThresholdsFieldNumber = 6;
  float iou_thresholds(int index) const;
  void set_iou_thresholds(int index, float value);
  void add_iou_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      iou_thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_iou_thresholds();

  // optional int32 num_desired_score_cutoffs = 2;
  bool has_num_desired_score_cutoffs() const;
  void clear_num_desired_score_cutoffs();
  static const int kNumDesiredScoreCutoffsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 num_desired_score_cutoffs() const;
  void set_num_desired_score_cutoffs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .waymo.open_dataset.MatcherProto.Type matcher_type = 5;
  bool has_matcher_type() const;
  void clear_matcher_type();
  static const int kMatcherTypeFieldNumber = 5;
  ::waymo::open_dataset::MatcherProto_Type matcher_type() const;
  void set_matcher_type(::waymo::open_dataset::MatcherProto_Type value);

  // optional .waymo.open_dataset.Label.Box.Type box_type = 7;
  bool has_box_type() const;
  void clear_box_type();
  static const int kBoxTypeFieldNumber = 7;
  ::waymo::open_dataset::Label_Box_Type box_type() const;
  void set_box_type(::waymo::open_dataset::Label_Box_Type value);

  // optional float min_precision = 9 [default = 0];
  bool has_min_precision() const;
  void clear_min_precision();
  static const int kMinPrecisionFieldNumber = 9;
  float min_precision() const;
  void set_min_precision(float value);

  // optional float desired_recall_delta = 8 [default = 0.05];
  bool has_desired_recall_delta() const;
  void clear_desired_recall_delta();
  static const int kDesiredRecallDeltaFieldNumber = 8;
  float desired_recall_delta() const;
  void set_desired_recall_delta(float value);

  // optional float min_heading_accuracy = 10 [default = -1];
  bool has_min_heading_accuracy() const;
  void clear_min_heading_accuracy();
  static const int kMinHeadingAccuracyFieldNumber = 10;
  float min_heading_accuracy() const;
  void set_min_heading_accuracy(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Config)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > score_cutoffs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> breakdown_generator_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Difficulty > difficulties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > iou_thresholds_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_desired_score_cutoffs_;
  int matcher_type_;
  int box_type_;
  float min_precision_;
  float desired_recall_delta_;
  float min_heading_accuracy_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DetectionMeasurement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.DetectionMeasurement) */ {
 public:
  DetectionMeasurement();
  virtual ~DetectionMeasurement();

  DetectionMeasurement(const DetectionMeasurement& from);
  DetectionMeasurement(DetectionMeasurement&& from) noexcept
    : DetectionMeasurement() {
    *this = ::std::move(from);
  }

  inline DetectionMeasurement& operator=(const DetectionMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionMeasurement& operator=(DetectionMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionMeasurement* internal_default_instance() {
    return reinterpret_cast<const DetectionMeasurement*>(
               &_DetectionMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DetectionMeasurement* other);
  friend void swap(DetectionMeasurement& a, DetectionMeasurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionMeasurement* New() const final {
    return CreateMaybeMessage<DetectionMeasurement>(nullptr);
  }

  DetectionMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionMeasurement& from);
  void MergeFrom(const DetectionMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.DetectionMeasurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_fps = 1;
  bool has_num_fps() const;
  void clear_num_fps();
  static const int kNumFpsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fps() const;
  void set_num_fps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_tps = 2;
  bool has_num_tps() const;
  void clear_num_tps();
  static const int kNumTpsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tps() const;
  void set_num_tps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_fns = 3;
  bool has_num_fns() const;
  void clear_num_fns();
  static const int kNumFnsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fns() const;
  void set_num_fns(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float sum_ha = 4;
  bool has_sum_ha() const;
  void clear_sum_ha();
  static const int kSumHaFieldNumber = 4;
  float sum_ha() const;
  void set_sum_ha(float value);

  // optional float score_cutoff = 5;
  bool has_score_cutoff() const;
  void clear_score_cutoff();
  static const int kScoreCutoffFieldNumber = 5;
  float score_cutoff() const;
  void set_score_cutoff(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.DetectionMeasurement)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fps_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tps_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fns_;
  float sum_ha_;
  float score_cutoff_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DetectionMeasurements :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.DetectionMeasurements) */ {
 public:
  DetectionMeasurements();
  virtual ~DetectionMeasurements();

  DetectionMeasurements(const DetectionMeasurements& from);
  DetectionMeasurements(DetectionMeasurements&& from) noexcept
    : DetectionMeasurements() {
    *this = ::std::move(from);
  }

  inline DetectionMeasurements& operator=(const DetectionMeasurements& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionMeasurements& operator=(DetectionMeasurements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionMeasurements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionMeasurements* internal_default_instance() {
    return reinterpret_cast<const DetectionMeasurements*>(
               &_DetectionMeasurements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DetectionMeasurements* other);
  friend void swap(DetectionMeasurements& a, DetectionMeasurements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionMeasurements* New() const final {
    return CreateMaybeMessage<DetectionMeasurements>(nullptr);
  }

  DetectionMeasurements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionMeasurements>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionMeasurements& from);
  void MergeFrom(const DetectionMeasurements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionMeasurements* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.DetectionMeasurements";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.DetectionMeasurement measurements = 1;
  int measurements_size() const;
  void clear_measurements();
  static const int kMeasurementsFieldNumber = 1;
  ::waymo::open_dataset::DetectionMeasurement* mutable_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DetectionMeasurement >*
      mutable_measurements();
  const ::waymo::open_dataset::DetectionMeasurement& measurements(int index) const;
  ::waymo::open_dataset::DetectionMeasurement* add_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DetectionMeasurement >&
      measurements() const;

  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  bool has_breakdown() const;
  void clear_breakdown();
  static const int kBreakdownFieldNumber = 2;
  const ::waymo::open_dataset::Breakdown& breakdown() const;
  ::waymo::open_dataset::Breakdown* release_breakdown();
  ::waymo::open_dataset::Breakdown* mutable_breakdown();
  void set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.DetectionMeasurements)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DetectionMeasurement > measurements_;
  ::waymo::open_dataset::Breakdown* breakdown_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DetectionMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.DetectionMetrics) */ {
 public:
  DetectionMetrics();
  virtual ~DetectionMetrics();

  DetectionMetrics(const DetectionMetrics& from);
  DetectionMetrics(DetectionMetrics&& from) noexcept
    : DetectionMetrics() {
    *this = ::std::move(from);
  }

  inline DetectionMetrics& operator=(const DetectionMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionMetrics& operator=(DetectionMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionMetrics* internal_default_instance() {
    return reinterpret_cast<const DetectionMetrics*>(
               &_DetectionMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DetectionMetrics* other);
  friend void swap(DetectionMetrics& a, DetectionMetrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionMetrics* New() const final {
    return CreateMaybeMessage<DetectionMetrics>(nullptr);
  }

  DetectionMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionMetrics& from);
  void MergeFrom(const DetectionMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.DetectionMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float precisions = 3;
  int precisions_size() const;
  void clear_precisions();
  static const int kPrecisionsFieldNumber = 3;
  float precisions(int index) const;
  void set_precisions(int index, float value);
  void add_precisions(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      precisions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_precisions();

  // repeated float recalls = 4;
  int recalls_size() const;
  void clear_recalls();
  static const int kRecallsFieldNumber = 4;
  float recalls(int index) const;
  void set_recalls(int index, float value);
  void add_recalls(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      recalls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_recalls();

  // repeated float precisions_ha_weighted = 5;
  int precisions_ha_weighted_size() const;
  void clear_precisions_ha_weighted();
  static const int kPrecisionsHaWeightedFieldNumber = 5;
  float precisions_ha_weighted(int index) const;
  void set_precisions_ha_weighted(int index, float value);
  void add_precisions_ha_weighted(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      precisions_ha_weighted() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_precisions_ha_weighted();

  // repeated float recalls_ha_weighted = 6;
  int recalls_ha_weighted_size() const;
  void clear_recalls_ha_weighted();
  static const int kRecallsHaWeightedFieldNumber = 6;
  float recalls_ha_weighted(int index) const;
  void set_recalls_ha_weighted(int index, float value);
  void add_recalls_ha_weighted(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      recalls_ha_weighted() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_recalls_ha_weighted();

  // repeated float score_cutoffs = 7;
  int score_cutoffs_size() const;
  void clear_score_cutoffs();
  static const int kScoreCutoffsFieldNumber = 7;
  float score_cutoffs(int index) const;
  void set_score_cutoffs(int index, float value);
  void add_score_cutoffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      score_cutoffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_score_cutoffs();

  // optional .waymo.open_dataset.Breakdown breakdown = 8;
  bool has_breakdown() const;
  void clear_breakdown();
  static const int kBreakdownFieldNumber = 8;
  const ::waymo::open_dataset::Breakdown& breakdown() const;
  ::waymo::open_dataset::Breakdown* release_breakdown();
  ::waymo::open_dataset::Breakdown* mutable_breakdown();
  void set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown);

  // optional .waymo.open_dataset.DetectionMeasurements measurements = 9;
  bool has_measurements() const;
  void clear_measurements();
  static const int kMeasurementsFieldNumber = 9;
  const ::waymo::open_dataset::DetectionMeasurements& measurements() const;
  ::waymo::open_dataset::DetectionMeasurements* release_measurements();
  ::waymo::open_dataset::DetectionMeasurements* mutable_measurements();
  void set_allocated_measurements(::waymo::open_dataset::DetectionMeasurements* measurements);

  // optional float mean_average_precision = 1;
  bool has_mean_average_precision() const;
  void clear_mean_average_precision();
  static const int kMeanAveragePrecisionFieldNumber = 1;
  float mean_average_precision() const;
  void set_mean_average_precision(float value);

  // optional float mean_average_precision_ha_weighted = 2;
  bool has_mean_average_precision_ha_weighted() const;
  void clear_mean_average_precision_ha_weighted();
  static const int kMeanAveragePrecisionHaWeightedFieldNumber = 2;
  float mean_average_precision_ha_weighted() const;
  void set_mean_average_precision_ha_weighted(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.DetectionMetrics)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > precisions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > recalls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > precisions_ha_weighted_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > recalls_ha_weighted_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > score_cutoffs_;
  ::waymo::open_dataset::Breakdown* breakdown_;
  ::waymo::open_dataset::DetectionMeasurements* measurements_;
  float mean_average_precision_;
  float mean_average_precision_ha_weighted_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TrackingMeasurement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.TrackingMeasurement) */ {
 public:
  TrackingMeasurement();
  virtual ~TrackingMeasurement();

  TrackingMeasurement(const TrackingMeasurement& from);
  TrackingMeasurement(TrackingMeasurement&& from) noexcept
    : TrackingMeasurement() {
    *this = ::std::move(from);
  }

  inline TrackingMeasurement& operator=(const TrackingMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingMeasurement& operator=(TrackingMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingMeasurement* internal_default_instance() {
    return reinterpret_cast<const TrackingMeasurement*>(
               &_TrackingMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TrackingMeasurement* other);
  friend void swap(TrackingMeasurement& a, TrackingMeasurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackingMeasurement* New() const final {
    return CreateMaybeMessage<TrackingMeasurement>(nullptr);
  }

  TrackingMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingMeasurement& from);
  void MergeFrom(const TrackingMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.TrackingMeasurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_misses = 1;
  bool has_num_misses() const;
  void clear_num_misses();
  static const int kNumMissesFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 num_misses() const;
  void set_num_misses(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_fps = 2;
  bool has_num_fps() const;
  void clear_num_fps();
  static const int kNumFpsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fps() const;
  void set_num_fps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double matching_cost = 4;
  bool has_matching_cost() const;
  void clear_matching_cost();
  static const int kMatchingCostFieldNumber = 4;
  double matching_cost() const;
  void set_matching_cost(double value);

  // optional int32 num_mismatches = 3;
  bool has_num_mismatches() const;
  void clear_num_mismatches();
  static const int kNumMismatchesFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 num_mismatches() const;
  void set_num_mismatches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_matches = 5;
  bool has_num_matches() const;
  void clear_num_matches();
  static const int kNumMatchesFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 num_matches() const;
  void set_num_matches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_objects_gt = 6;
  bool has_num_objects_gt() const;
  void clear_num_objects_gt();
  static const int kNumObjectsGtFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 num_objects_gt() const;
  void set_num_objects_gt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float score_cutoff = 7;
  bool has_score_cutoff() const;
  void clear_score_cutoff();
  static const int kScoreCutoffFieldNumber = 7;
  float score_cutoff() const;
  void set_score_cutoff(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.TrackingMeasurement)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_misses_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fps_;
  double matching_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_mismatches_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_objects_gt_;
  float score_cutoff_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TrackingMeasurements :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.TrackingMeasurements) */ {
 public:
  TrackingMeasurements();
  virtual ~TrackingMeasurements();

  TrackingMeasurements(const TrackingMeasurements& from);
  TrackingMeasurements(TrackingMeasurements&& from) noexcept
    : TrackingMeasurements() {
    *this = ::std::move(from);
  }

  inline TrackingMeasurements& operator=(const TrackingMeasurements& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingMeasurements& operator=(TrackingMeasurements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingMeasurements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingMeasurements* internal_default_instance() {
    return reinterpret_cast<const TrackingMeasurements*>(
               &_TrackingMeasurements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TrackingMeasurements* other);
  friend void swap(TrackingMeasurements& a, TrackingMeasurements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackingMeasurements* New() const final {
    return CreateMaybeMessage<TrackingMeasurements>(nullptr);
  }

  TrackingMeasurements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingMeasurements>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingMeasurements& from);
  void MergeFrom(const TrackingMeasurements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingMeasurements* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.TrackingMeasurements";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .waymo.open_dataset.TrackingMeasurement measurements = 1;
  int measurements_size() const;
  void clear_measurements();
  static const int kMeasurementsFieldNumber = 1;
  ::waymo::open_dataset::TrackingMeasurement* mutable_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrackingMeasurement >*
      mutable_measurements();
  const ::waymo::open_dataset::TrackingMeasurement& measurements(int index) const;
  ::waymo::open_dataset::TrackingMeasurement* add_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrackingMeasurement >&
      measurements() const;

  // optional .waymo.open_dataset.Breakdown breakdown = 2;
  bool has_breakdown() const;
  void clear_breakdown();
  static const int kBreakdownFieldNumber = 2;
  const ::waymo::open_dataset::Breakdown& breakdown() const;
  ::waymo::open_dataset::Breakdown* release_breakdown();
  ::waymo::open_dataset::Breakdown* mutable_breakdown();
  void set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.TrackingMeasurements)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrackingMeasurement > measurements_;
  ::waymo::open_dataset::Breakdown* breakdown_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TrackingMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.TrackingMetrics) */ {
 public:
  TrackingMetrics();
  virtual ~TrackingMetrics();

  TrackingMetrics(const TrackingMetrics& from);
  TrackingMetrics(TrackingMetrics&& from) noexcept
    : TrackingMetrics() {
    *this = ::std::move(from);
  }

  inline TrackingMetrics& operator=(const TrackingMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingMetrics& operator=(TrackingMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingMetrics* internal_default_instance() {
    return reinterpret_cast<const TrackingMetrics*>(
               &_TrackingMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TrackingMetrics* other);
  friend void swap(TrackingMetrics& a, TrackingMetrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackingMetrics* New() const final {
    return CreateMaybeMessage<TrackingMetrics>(nullptr);
  }

  TrackingMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingMetrics& from);
  void MergeFrom(const TrackingMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.TrackingMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .waymo.open_dataset.Breakdown breakdown = 7;
  bool has_breakdown() const;
  void clear_breakdown();
  static const int kBreakdownFieldNumber = 7;
  const ::waymo::open_dataset::Breakdown& breakdown() const;
  ::waymo::open_dataset::Breakdown* release_breakdown();
  ::waymo::open_dataset::Breakdown* mutable_breakdown();
  void set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown);

  // optional .waymo.open_dataset.TrackingMeasurements measurements = 8;
  bool has_measurements() const;
  void clear_measurements();
  static const int kMeasurementsFieldNumber = 8;
  const ::waymo::open_dataset::TrackingMeasurements& measurements() const;
  ::waymo::open_dataset::TrackingMeasurements* release_measurements();
  ::waymo::open_dataset::TrackingMeasurements* mutable_measurements();
  void set_allocated_measurements(::waymo::open_dataset::TrackingMeasurements* measurements);

  // optional float mota = 1;
  bool has_mota() const;
  void clear_mota();
  static const int kMotaFieldNumber = 1;
  float mota() const;
  void set_mota(float value);

  // optional float motp = 2;
  bool has_motp() const;
  void clear_motp();
  static const int kMotpFieldNumber = 2;
  float motp() const;
  void set_motp(float value);

  // optional float miss = 3;
  bool has_miss() const;
  void clear_miss();
  static const int kMissFieldNumber = 3;
  float miss() const;
  void set_miss(float value);

  // optional float mismatch = 4;
  bool has_mismatch() const;
  void clear_mismatch();
  static const int kMismatchFieldNumber = 4;
  float mismatch() const;
  void set_mismatch(float value);

  // optional float fp = 5;
  bool has_fp() const;
  void clear_fp();
  static const int kFpFieldNumber = 5;
  float fp() const;
  void set_fp(float value);

  // optional float score_cutoff = 6;
  bool has_score_cutoff() const;
  void clear_score_cutoff();
  static const int kScoreCutoffFieldNumber = 6;
  float score_cutoff() const;
  void set_score_cutoff(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.TrackingMetrics)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::Breakdown* breakdown_;
  ::waymo::open_dataset::TrackingMeasurements* measurements_;
  float mota_;
  float motp_;
  float miss_;
  float mismatch_;
  float fp_;
  float score_cutoff_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object

// optional .waymo.open_dataset.Label object = 1;
inline bool Object::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::waymo::open_dataset::Label& Object::object() const {
  const ::waymo::open_dataset::Label* p = object_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Object.object)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Label*>(
      &::waymo::open_dataset::_Label_default_instance_);
}
inline ::waymo::open_dataset::Label* Object::release_object() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Object.object)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::Label* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Label* Object::mutable_object() {
  _has_bits_[0] |= 0x00000002u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Label>(GetArenaNoVirtual());
    object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Object.object)
  return object_;
}
inline void Object::set_allocated_object(::waymo::open_dataset::Label* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Object.object)
}

// optional float score = 2 [default = 1];
inline bool Object::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::clear_score() {
  score_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Object::score() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Object.score)
  return score_;
}
inline void Object::set_score(float value) {
  _has_bits_[0] |= 0x00000020u;
  score_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Object.score)
}

// optional bool overlap_with_nlz = 3;
inline bool Object::has_overlap_with_nlz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::clear_overlap_with_nlz() {
  overlap_with_nlz_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Object::overlap_with_nlz() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Object.overlap_with_nlz)
  return overlap_with_nlz_;
}
inline void Object::set_overlap_with_nlz(bool value) {
  _has_bits_[0] |= 0x00000004u;
  overlap_with_nlz_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Object.overlap_with_nlz)
}

// optional string context_name = 4;
inline bool Object::has_context_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::clear_context_name() {
  context_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Object::context_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Object.context_name)
  return context_name_.GetNoArena();
}
inline void Object::set_context_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Object.context_name)
}
inline void Object::set_context_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Object.context_name)
}
inline void Object::set_context_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Object.context_name)
}
inline void Object::set_context_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Object.context_name)
}
inline std::string* Object::mutable_context_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Object.context_name)
  return context_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_context_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Object.context_name)
  if (!has_context_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return context_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_context_name(std::string* context_name) {
  if (context_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Object.context_name)
}

// optional int64 frame_timestamp_micros = 5;
inline bool Object::has_frame_timestamp_micros() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::clear_frame_timestamp_micros() {
  frame_timestamp_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::frame_timestamp_micros() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Object.frame_timestamp_micros)
  return frame_timestamp_micros_;
}
inline void Object::set_frame_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  frame_timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Object.frame_timestamp_micros)
}

// optional .waymo.open_dataset.CameraName.Name camera_name = 6;
inline bool Object::has_camera_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::clear_camera_name() {
  camera_name_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::waymo::open_dataset::CameraName_Name Object::camera_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Object.camera_name)
  return static_cast< ::waymo::open_dataset::CameraName_Name >(camera_name_);
}
inline void Object::set_camera_name(::waymo::open_dataset::CameraName_Name value) {
  assert(::waymo::open_dataset::CameraName_Name_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  camera_name_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Object.camera_name)
}

// -------------------------------------------------------------------

// NoLabelZoneObject

// optional .waymo.open_dataset.Polygon2dProto zone = 1;
inline bool NoLabelZoneObject::has_zone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::waymo::open_dataset::Polygon2dProto& NoLabelZoneObject::zone() const {
  const ::waymo::open_dataset::Polygon2dProto* p = zone_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.NoLabelZoneObject.zone)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Polygon2dProto*>(
      &::waymo::open_dataset::_Polygon2dProto_default_instance_);
}
inline ::waymo::open_dataset::Polygon2dProto* NoLabelZoneObject::release_zone() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.NoLabelZoneObject.zone)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::Polygon2dProto* temp = zone_;
  zone_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Polygon2dProto* NoLabelZoneObject::mutable_zone() {
  _has_bits_[0] |= 0x00000002u;
  if (zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Polygon2dProto>(GetArenaNoVirtual());
    zone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.NoLabelZoneObject.zone)
  return zone_;
}
inline void NoLabelZoneObject::set_allocated_zone(::waymo::open_dataset::Polygon2dProto* zone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(zone_);
  }
  if (zone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zone, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  zone_ = zone;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.NoLabelZoneObject.zone)
}

// optional string context_name = 2;
inline bool NoLabelZoneObject::has_context_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoLabelZoneObject::clear_context_name() {
  context_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NoLabelZoneObject::context_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.NoLabelZoneObject.context_name)
  return context_name_.GetNoArena();
}
inline void NoLabelZoneObject::set_context_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.NoLabelZoneObject.context_name)
}
inline void NoLabelZoneObject::set_context_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.NoLabelZoneObject.context_name)
}
inline void NoLabelZoneObject::set_context_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.NoLabelZoneObject.context_name)
}
inline void NoLabelZoneObject::set_context_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.NoLabelZoneObject.context_name)
}
inline std::string* NoLabelZoneObject::mutable_context_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.NoLabelZoneObject.context_name)
  return context_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoLabelZoneObject::release_context_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.NoLabelZoneObject.context_name)
  if (!has_context_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return context_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoLabelZoneObject::set_allocated_context_name(std::string* context_name) {
  if (context_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.NoLabelZoneObject.context_name)
}

// optional int64 frame_timestamp_micros = 3;
inline bool NoLabelZoneObject::has_frame_timestamp_micros() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoLabelZoneObject::clear_frame_timestamp_micros() {
  frame_timestamp_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NoLabelZoneObject::frame_timestamp_micros() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.NoLabelZoneObject.frame_timestamp_micros)
  return frame_timestamp_micros_;
}
inline void NoLabelZoneObject::set_frame_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  frame_timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.NoLabelZoneObject.frame_timestamp_micros)
}

// -------------------------------------------------------------------

// Objects

// repeated .waymo.open_dataset.Object objects = 1;
inline int Objects::objects_size() const {
  return objects_.size();
}
inline void Objects::clear_objects() {
  objects_.Clear();
}
inline ::waymo::open_dataset::Object* Objects::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Objects.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Object >*
Objects::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Objects.objects)
  return &objects_;
}
inline const ::waymo::open_dataset::Object& Objects::objects(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Objects.objects)
  return objects_.Get(index);
}
inline ::waymo::open_dataset::Object* Objects::add_objects() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Objects.objects)
  return objects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Object >&
Objects::objects() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Objects.objects)
  return objects_;
}

// repeated .waymo.open_dataset.NoLabelZoneObject no_label_zone_objects = 2;
inline int Objects::no_label_zone_objects_size() const {
  return no_label_zone_objects_.size();
}
inline void Objects::clear_no_label_zone_objects() {
  no_label_zone_objects_.Clear();
}
inline ::waymo::open_dataset::NoLabelZoneObject* Objects::mutable_no_label_zone_objects(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Objects.no_label_zone_objects)
  return no_label_zone_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::NoLabelZoneObject >*
Objects::mutable_no_label_zone_objects() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Objects.no_label_zone_objects)
  return &no_label_zone_objects_;
}
inline const ::waymo::open_dataset::NoLabelZoneObject& Objects::no_label_zone_objects(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Objects.no_label_zone_objects)
  return no_label_zone_objects_.Get(index);
}
inline ::waymo::open_dataset::NoLabelZoneObject* Objects::add_no_label_zone_objects() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Objects.no_label_zone_objects)
  return no_label_zone_objects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::NoLabelZoneObject >&
Objects::no_label_zone_objects() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Objects.no_label_zone_objects)
  return no_label_zone_objects_;
}

// -------------------------------------------------------------------

// MatcherProto

// -------------------------------------------------------------------

// Difficulty

// repeated .waymo.open_dataset.Label.DifficultyLevel levels = 1;
inline int Difficulty::levels_size() const {
  return levels_.size();
}
inline void Difficulty::clear_levels() {
  levels_.Clear();
}
inline ::waymo::open_dataset::Label_DifficultyLevel Difficulty::levels(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Difficulty.levels)
  return static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(levels_.Get(index));
}
inline void Difficulty::set_levels(int index, ::waymo::open_dataset::Label_DifficultyLevel value) {
  assert(::waymo::open_dataset::Label_DifficultyLevel_IsValid(value));
  levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Difficulty.levels)
}
inline void Difficulty::add_levels(::waymo::open_dataset::Label_DifficultyLevel value) {
  assert(::waymo::open_dataset::Label_DifficultyLevel_IsValid(value));
  levels_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Difficulty.levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Difficulty::levels() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Difficulty.levels)
  return levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Difficulty::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Difficulty.levels)
  return &levels_;
}

// -------------------------------------------------------------------

// Config

// repeated float score_cutoffs = 1;
inline int Config::score_cutoffs_size() const {
  return score_cutoffs_.size();
}
inline void Config::clear_score_cutoffs() {
  score_cutoffs_.Clear();
}
inline float Config::score_cutoffs(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.score_cutoffs)
  return score_cutoffs_.Get(index);
}
inline void Config::set_score_cutoffs(int index, float value) {
  score_cutoffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.score_cutoffs)
}
inline void Config::add_score_cutoffs(float value) {
  score_cutoffs_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Config.score_cutoffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Config::score_cutoffs() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Config.score_cutoffs)
  return score_cutoffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Config::mutable_score_cutoffs() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Config.score_cutoffs)
  return &score_cutoffs_;
}

// optional int32 num_desired_score_cutoffs = 2;
inline bool Config::has_num_desired_score_cutoffs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::clear_num_desired_score_cutoffs() {
  num_desired_score_cutoffs_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::num_desired_score_cutoffs() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.num_desired_score_cutoffs)
  return num_desired_score_cutoffs_;
}
inline void Config::set_num_desired_score_cutoffs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_desired_score_cutoffs_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.num_desired_score_cutoffs)
}

// repeated .waymo.open_dataset.Breakdown.GeneratorId breakdown_generator_ids = 3;
inline int Config::breakdown_generator_ids_size() const {
  return breakdown_generator_ids_.size();
}
inline void Config::clear_breakdown_generator_ids() {
  breakdown_generator_ids_.Clear();
}
inline ::waymo::open_dataset::Breakdown_GeneratorId Config::breakdown_generator_ids(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.breakdown_generator_ids)
  return static_cast< ::waymo::open_dataset::Breakdown_GeneratorId >(breakdown_generator_ids_.Get(index));
}
inline void Config::set_breakdown_generator_ids(int index, ::waymo::open_dataset::Breakdown_GeneratorId value) {
  assert(::waymo::open_dataset::Breakdown_GeneratorId_IsValid(value));
  breakdown_generator_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.breakdown_generator_ids)
}
inline void Config::add_breakdown_generator_ids(::waymo::open_dataset::Breakdown_GeneratorId value) {
  assert(::waymo::open_dataset::Breakdown_GeneratorId_IsValid(value));
  breakdown_generator_ids_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Config.breakdown_generator_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Config::breakdown_generator_ids() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Config.breakdown_generator_ids)
  return breakdown_generator_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Config::mutable_breakdown_generator_ids() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Config.breakdown_generator_ids)
  return &breakdown_generator_ids_;
}

// repeated .waymo.open_dataset.Difficulty difficulties = 4;
inline int Config::difficulties_size() const {
  return difficulties_.size();
}
inline void Config::clear_difficulties() {
  difficulties_.Clear();
}
inline ::waymo::open_dataset::Difficulty* Config::mutable_difficulties(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Config.difficulties)
  return difficulties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Difficulty >*
Config::mutable_difficulties() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Config.difficulties)
  return &difficulties_;
}
inline const ::waymo::open_dataset::Difficulty& Config::difficulties(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.difficulties)
  return difficulties_.Get(index);
}
inline ::waymo::open_dataset::Difficulty* Config::add_difficulties() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Config.difficulties)
  return difficulties_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Difficulty >&
Config::difficulties() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Config.difficulties)
  return difficulties_;
}

// optional .waymo.open_dataset.MatcherProto.Type matcher_type = 5;
inline bool Config::has_matcher_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::clear_matcher_type() {
  matcher_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::waymo::open_dataset::MatcherProto_Type Config::matcher_type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.matcher_type)
  return static_cast< ::waymo::open_dataset::MatcherProto_Type >(matcher_type_);
}
inline void Config::set_matcher_type(::waymo::open_dataset::MatcherProto_Type value) {
  assert(::waymo::open_dataset::MatcherProto_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  matcher_type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.matcher_type)
}

// repeated float iou_thresholds = 6;
inline int Config::iou_thresholds_size() const {
  return iou_thresholds_.size();
}
inline void Config::clear_iou_thresholds() {
  iou_thresholds_.Clear();
}
inline float Config::iou_thresholds(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.iou_thresholds)
  return iou_thresholds_.Get(index);
}
inline void Config::set_iou_thresholds(int index, float value) {
  iou_thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.iou_thresholds)
}
inline void Config::add_iou_thresholds(float value) {
  iou_thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Config.iou_thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Config::iou_thresholds() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Config.iou_thresholds)
  return iou_thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Config::mutable_iou_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Config.iou_thresholds)
  return &iou_thresholds_;
}

// optional .waymo.open_dataset.Label.Box.Type box_type = 7;
inline bool Config::has_box_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::clear_box_type() {
  box_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::waymo::open_dataset::Label_Box_Type Config::box_type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.box_type)
  return static_cast< ::waymo::open_dataset::Label_Box_Type >(box_type_);
}
inline void Config::set_box_type(::waymo::open_dataset::Label_Box_Type value) {
  assert(::waymo::open_dataset::Label_Box_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  box_type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.box_type)
}

// optional float desired_recall_delta = 8 [default = 0.05];
inline bool Config::has_desired_recall_delta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::clear_desired_recall_delta() {
  desired_recall_delta_ = 0.05f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Config::desired_recall_delta() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.desired_recall_delta)
  return desired_recall_delta_;
}
inline void Config::set_desired_recall_delta(float value) {
  _has_bits_[0] |= 0x00000010u;
  desired_recall_delta_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.desired_recall_delta)
}

// optional float min_precision = 9 [default = 0];
inline bool Config::has_min_precision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::clear_min_precision() {
  min_precision_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Config::min_precision() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.min_precision)
  return min_precision_;
}
inline void Config::set_min_precision(float value) {
  _has_bits_[0] |= 0x00000008u;
  min_precision_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.min_precision)
}

// optional float min_heading_accuracy = 10 [default = -1];
inline bool Config::has_min_heading_accuracy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::clear_min_heading_accuracy() {
  min_heading_accuracy_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Config::min_heading_accuracy() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Config.min_heading_accuracy)
  return min_heading_accuracy_;
}
inline void Config::set_min_heading_accuracy(float value) {
  _has_bits_[0] |= 0x00000020u;
  min_heading_accuracy_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Config.min_heading_accuracy)
}

// -------------------------------------------------------------------

// DetectionMeasurement

// optional int32 num_fps = 1;
inline bool DetectionMeasurement::has_num_fps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionMeasurement::clear_num_fps() {
  num_fps_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionMeasurement::num_fps() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMeasurement.num_fps)
  return num_fps_;
}
inline void DetectionMeasurement::set_num_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_fps_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMeasurement.num_fps)
}

// optional int32 num_tps = 2;
inline bool DetectionMeasurement::has_num_tps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionMeasurement::clear_num_tps() {
  num_tps_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionMeasurement::num_tps() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMeasurement.num_tps)
  return num_tps_;
}
inline void DetectionMeasurement::set_num_tps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_tps_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMeasurement.num_tps)
}

// optional int32 num_fns = 3;
inline bool DetectionMeasurement::has_num_fns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionMeasurement::clear_num_fns() {
  num_fns_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionMeasurement::num_fns() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMeasurement.num_fns)
  return num_fns_;
}
inline void DetectionMeasurement::set_num_fns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_fns_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMeasurement.num_fns)
}

// optional float sum_ha = 4;
inline bool DetectionMeasurement::has_sum_ha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionMeasurement::clear_sum_ha() {
  sum_ha_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DetectionMeasurement::sum_ha() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMeasurement.sum_ha)
  return sum_ha_;
}
inline void DetectionMeasurement::set_sum_ha(float value) {
  _has_bits_[0] |= 0x00000008u;
  sum_ha_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMeasurement.sum_ha)
}

// optional float score_cutoff = 5;
inline bool DetectionMeasurement::has_score_cutoff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionMeasurement::clear_score_cutoff() {
  score_cutoff_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float DetectionMeasurement::score_cutoff() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMeasurement.score_cutoff)
  return score_cutoff_;
}
inline void DetectionMeasurement::set_score_cutoff(float value) {
  _has_bits_[0] |= 0x00000010u;
  score_cutoff_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMeasurement.score_cutoff)
}

// -------------------------------------------------------------------

// DetectionMeasurements

// repeated .waymo.open_dataset.DetectionMeasurement measurements = 1;
inline int DetectionMeasurements::measurements_size() const {
  return measurements_.size();
}
inline void DetectionMeasurements::clear_measurements() {
  measurements_.Clear();
}
inline ::waymo::open_dataset::DetectionMeasurement* DetectionMeasurements::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.DetectionMeasurements.measurements)
  return measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DetectionMeasurement >*
DetectionMeasurements::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.DetectionMeasurements.measurements)
  return &measurements_;
}
inline const ::waymo::open_dataset::DetectionMeasurement& DetectionMeasurements::measurements(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMeasurements.measurements)
  return measurements_.Get(index);
}
inline ::waymo::open_dataset::DetectionMeasurement* DetectionMeasurements::add_measurements() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.DetectionMeasurements.measurements)
  return measurements_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DetectionMeasurement >&
DetectionMeasurements::measurements() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.DetectionMeasurements.measurements)
  return measurements_;
}

// optional .waymo.open_dataset.Breakdown breakdown = 2;
inline bool DetectionMeasurements::has_breakdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::waymo::open_dataset::Breakdown& DetectionMeasurements::breakdown() const {
  const ::waymo::open_dataset::Breakdown* p = breakdown_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMeasurements.breakdown)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Breakdown*>(
      &::waymo::open_dataset::_Breakdown_default_instance_);
}
inline ::waymo::open_dataset::Breakdown* DetectionMeasurements::release_breakdown() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.DetectionMeasurements.breakdown)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Breakdown* temp = breakdown_;
  breakdown_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Breakdown* DetectionMeasurements::mutable_breakdown() {
  _has_bits_[0] |= 0x00000001u;
  if (breakdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Breakdown>(GetArenaNoVirtual());
    breakdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.DetectionMeasurements.breakdown)
  return breakdown_;
}
inline void DetectionMeasurements::set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(breakdown_);
  }
  if (breakdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      breakdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breakdown, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  breakdown_ = breakdown;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.DetectionMeasurements.breakdown)
}

// -------------------------------------------------------------------

// DetectionMetrics

// optional float mean_average_precision = 1;
inline bool DetectionMetrics::has_mean_average_precision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionMetrics::clear_mean_average_precision() {
  mean_average_precision_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DetectionMetrics::mean_average_precision() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.mean_average_precision)
  return mean_average_precision_;
}
inline void DetectionMetrics::set_mean_average_precision(float value) {
  _has_bits_[0] |= 0x00000004u;
  mean_average_precision_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMetrics.mean_average_precision)
}

// optional float mean_average_precision_ha_weighted = 2;
inline bool DetectionMetrics::has_mean_average_precision_ha_weighted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionMetrics::clear_mean_average_precision_ha_weighted() {
  mean_average_precision_ha_weighted_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DetectionMetrics::mean_average_precision_ha_weighted() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.mean_average_precision_ha_weighted)
  return mean_average_precision_ha_weighted_;
}
inline void DetectionMetrics::set_mean_average_precision_ha_weighted(float value) {
  _has_bits_[0] |= 0x00000008u;
  mean_average_precision_ha_weighted_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMetrics.mean_average_precision_ha_weighted)
}

// repeated float precisions = 3;
inline int DetectionMetrics::precisions_size() const {
  return precisions_.size();
}
inline void DetectionMetrics::clear_precisions() {
  precisions_.Clear();
}
inline float DetectionMetrics::precisions(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.precisions)
  return precisions_.Get(index);
}
inline void DetectionMetrics::set_precisions(int index, float value) {
  precisions_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMetrics.precisions)
}
inline void DetectionMetrics::add_precisions(float value) {
  precisions_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.DetectionMetrics.precisions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectionMetrics::precisions() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.DetectionMetrics.precisions)
  return precisions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectionMetrics::mutable_precisions() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.DetectionMetrics.precisions)
  return &precisions_;
}

// repeated float recalls = 4;
inline int DetectionMetrics::recalls_size() const {
  return recalls_.size();
}
inline void DetectionMetrics::clear_recalls() {
  recalls_.Clear();
}
inline float DetectionMetrics::recalls(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.recalls)
  return recalls_.Get(index);
}
inline void DetectionMetrics::set_recalls(int index, float value) {
  recalls_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMetrics.recalls)
}
inline void DetectionMetrics::add_recalls(float value) {
  recalls_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.DetectionMetrics.recalls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectionMetrics::recalls() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.DetectionMetrics.recalls)
  return recalls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectionMetrics::mutable_recalls() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.DetectionMetrics.recalls)
  return &recalls_;
}

// repeated float precisions_ha_weighted = 5;
inline int DetectionMetrics::precisions_ha_weighted_size() const {
  return precisions_ha_weighted_.size();
}
inline void DetectionMetrics::clear_precisions_ha_weighted() {
  precisions_ha_weighted_.Clear();
}
inline float DetectionMetrics::precisions_ha_weighted(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.precisions_ha_weighted)
  return precisions_ha_weighted_.Get(index);
}
inline void DetectionMetrics::set_precisions_ha_weighted(int index, float value) {
  precisions_ha_weighted_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMetrics.precisions_ha_weighted)
}
inline void DetectionMetrics::add_precisions_ha_weighted(float value) {
  precisions_ha_weighted_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.DetectionMetrics.precisions_ha_weighted)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectionMetrics::precisions_ha_weighted() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.DetectionMetrics.precisions_ha_weighted)
  return precisions_ha_weighted_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectionMetrics::mutable_precisions_ha_weighted() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.DetectionMetrics.precisions_ha_weighted)
  return &precisions_ha_weighted_;
}

// repeated float recalls_ha_weighted = 6;
inline int DetectionMetrics::recalls_ha_weighted_size() const {
  return recalls_ha_weighted_.size();
}
inline void DetectionMetrics::clear_recalls_ha_weighted() {
  recalls_ha_weighted_.Clear();
}
inline float DetectionMetrics::recalls_ha_weighted(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.recalls_ha_weighted)
  return recalls_ha_weighted_.Get(index);
}
inline void DetectionMetrics::set_recalls_ha_weighted(int index, float value) {
  recalls_ha_weighted_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMetrics.recalls_ha_weighted)
}
inline void DetectionMetrics::add_recalls_ha_weighted(float value) {
  recalls_ha_weighted_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.DetectionMetrics.recalls_ha_weighted)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectionMetrics::recalls_ha_weighted() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.DetectionMetrics.recalls_ha_weighted)
  return recalls_ha_weighted_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectionMetrics::mutable_recalls_ha_weighted() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.DetectionMetrics.recalls_ha_weighted)
  return &recalls_ha_weighted_;
}

// repeated float score_cutoffs = 7;
inline int DetectionMetrics::score_cutoffs_size() const {
  return score_cutoffs_.size();
}
inline void DetectionMetrics::clear_score_cutoffs() {
  score_cutoffs_.Clear();
}
inline float DetectionMetrics::score_cutoffs(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.score_cutoffs)
  return score_cutoffs_.Get(index);
}
inline void DetectionMetrics::set_score_cutoffs(int index, float value) {
  score_cutoffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.DetectionMetrics.score_cutoffs)
}
inline void DetectionMetrics::add_score_cutoffs(float value) {
  score_cutoffs_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.DetectionMetrics.score_cutoffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectionMetrics::score_cutoffs() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.DetectionMetrics.score_cutoffs)
  return score_cutoffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectionMetrics::mutable_score_cutoffs() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.DetectionMetrics.score_cutoffs)
  return &score_cutoffs_;
}

// optional .waymo.open_dataset.Breakdown breakdown = 8;
inline bool DetectionMetrics::has_breakdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::waymo::open_dataset::Breakdown& DetectionMetrics::breakdown() const {
  const ::waymo::open_dataset::Breakdown* p = breakdown_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.breakdown)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Breakdown*>(
      &::waymo::open_dataset::_Breakdown_default_instance_);
}
inline ::waymo::open_dataset::Breakdown* DetectionMetrics::release_breakdown() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.DetectionMetrics.breakdown)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Breakdown* temp = breakdown_;
  breakdown_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Breakdown* DetectionMetrics::mutable_breakdown() {
  _has_bits_[0] |= 0x00000001u;
  if (breakdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Breakdown>(GetArenaNoVirtual());
    breakdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.DetectionMetrics.breakdown)
  return breakdown_;
}
inline void DetectionMetrics::set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(breakdown_);
  }
  if (breakdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      breakdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breakdown, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  breakdown_ = breakdown;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.DetectionMetrics.breakdown)
}

// optional .waymo.open_dataset.DetectionMeasurements measurements = 9;
inline bool DetectionMetrics::has_measurements() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionMetrics::clear_measurements() {
  if (measurements_ != nullptr) measurements_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::DetectionMeasurements& DetectionMetrics::measurements() const {
  const ::waymo::open_dataset::DetectionMeasurements* p = measurements_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DetectionMetrics.measurements)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::DetectionMeasurements*>(
      &::waymo::open_dataset::_DetectionMeasurements_default_instance_);
}
inline ::waymo::open_dataset::DetectionMeasurements* DetectionMetrics::release_measurements() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.DetectionMetrics.measurements)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::DetectionMeasurements* temp = measurements_;
  measurements_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::DetectionMeasurements* DetectionMetrics::mutable_measurements() {
  _has_bits_[0] |= 0x00000002u;
  if (measurements_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::DetectionMeasurements>(GetArenaNoVirtual());
    measurements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.DetectionMetrics.measurements)
  return measurements_;
}
inline void DetectionMetrics::set_allocated_measurements(::waymo::open_dataset::DetectionMeasurements* measurements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete measurements_;
  }
  if (measurements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      measurements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurements, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  measurements_ = measurements;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.DetectionMetrics.measurements)
}

// -------------------------------------------------------------------

// TrackingMeasurement

// optional int32 num_misses = 1;
inline bool TrackingMeasurement::has_num_misses() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackingMeasurement::clear_num_misses() {
  num_misses_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingMeasurement::num_misses() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurement.num_misses)
  return num_misses_;
}
inline void TrackingMeasurement::set_num_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_misses_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMeasurement.num_misses)
}

// optional int32 num_fps = 2;
inline bool TrackingMeasurement::has_num_fps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackingMeasurement::clear_num_fps() {
  num_fps_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingMeasurement::num_fps() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurement.num_fps)
  return num_fps_;
}
inline void TrackingMeasurement::set_num_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_fps_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMeasurement.num_fps)
}

// optional int32 num_mismatches = 3;
inline bool TrackingMeasurement::has_num_mismatches() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackingMeasurement::clear_num_mismatches() {
  num_mismatches_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingMeasurement::num_mismatches() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurement.num_mismatches)
  return num_mismatches_;
}
inline void TrackingMeasurement::set_num_mismatches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_mismatches_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMeasurement.num_mismatches)
}

// optional double matching_cost = 4;
inline bool TrackingMeasurement::has_matching_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackingMeasurement::clear_matching_cost() {
  matching_cost_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrackingMeasurement::matching_cost() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurement.matching_cost)
  return matching_cost_;
}
inline void TrackingMeasurement::set_matching_cost(double value) {
  _has_bits_[0] |= 0x00000004u;
  matching_cost_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMeasurement.matching_cost)
}

// optional int32 num_matches = 5;
inline bool TrackingMeasurement::has_num_matches() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackingMeasurement::clear_num_matches() {
  num_matches_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingMeasurement::num_matches() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurement.num_matches)
  return num_matches_;
}
inline void TrackingMeasurement::set_num_matches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_matches_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMeasurement.num_matches)
}

// optional int32 num_objects_gt = 6;
inline bool TrackingMeasurement::has_num_objects_gt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackingMeasurement::clear_num_objects_gt() {
  num_objects_gt_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingMeasurement::num_objects_gt() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurement.num_objects_gt)
  return num_objects_gt_;
}
inline void TrackingMeasurement::set_num_objects_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_objects_gt_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMeasurement.num_objects_gt)
}

// optional float score_cutoff = 7;
inline bool TrackingMeasurement::has_score_cutoff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackingMeasurement::clear_score_cutoff() {
  score_cutoff_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TrackingMeasurement::score_cutoff() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurement.score_cutoff)
  return score_cutoff_;
}
inline void TrackingMeasurement::set_score_cutoff(float value) {
  _has_bits_[0] |= 0x00000040u;
  score_cutoff_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMeasurement.score_cutoff)
}

// -------------------------------------------------------------------

// TrackingMeasurements

// repeated .waymo.open_dataset.TrackingMeasurement measurements = 1;
inline int TrackingMeasurements::measurements_size() const {
  return measurements_.size();
}
inline void TrackingMeasurements::clear_measurements() {
  measurements_.Clear();
}
inline ::waymo::open_dataset::TrackingMeasurement* TrackingMeasurements::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.TrackingMeasurements.measurements)
  return measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrackingMeasurement >*
TrackingMeasurements::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.TrackingMeasurements.measurements)
  return &measurements_;
}
inline const ::waymo::open_dataset::TrackingMeasurement& TrackingMeasurements::measurements(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurements.measurements)
  return measurements_.Get(index);
}
inline ::waymo::open_dataset::TrackingMeasurement* TrackingMeasurements::add_measurements() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.TrackingMeasurements.measurements)
  return measurements_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrackingMeasurement >&
TrackingMeasurements::measurements() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.TrackingMeasurements.measurements)
  return measurements_;
}

// optional .waymo.open_dataset.Breakdown breakdown = 2;
inline bool TrackingMeasurements::has_breakdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::waymo::open_dataset::Breakdown& TrackingMeasurements::breakdown() const {
  const ::waymo::open_dataset::Breakdown* p = breakdown_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMeasurements.breakdown)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Breakdown*>(
      &::waymo::open_dataset::_Breakdown_default_instance_);
}
inline ::waymo::open_dataset::Breakdown* TrackingMeasurements::release_breakdown() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.TrackingMeasurements.breakdown)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Breakdown* temp = breakdown_;
  breakdown_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Breakdown* TrackingMeasurements::mutable_breakdown() {
  _has_bits_[0] |= 0x00000001u;
  if (breakdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Breakdown>(GetArenaNoVirtual());
    breakdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.TrackingMeasurements.breakdown)
  return breakdown_;
}
inline void TrackingMeasurements::set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(breakdown_);
  }
  if (breakdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      breakdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breakdown, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  breakdown_ = breakdown;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.TrackingMeasurements.breakdown)
}

// -------------------------------------------------------------------

// TrackingMetrics

// optional float mota = 1;
inline bool TrackingMetrics::has_mota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackingMetrics::clear_mota() {
  mota_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrackingMetrics::mota() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.mota)
  return mota_;
}
inline void TrackingMetrics::set_mota(float value) {
  _has_bits_[0] |= 0x00000004u;
  mota_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMetrics.mota)
}

// optional float motp = 2;
inline bool TrackingMetrics::has_motp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackingMetrics::clear_motp() {
  motp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrackingMetrics::motp() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.motp)
  return motp_;
}
inline void TrackingMetrics::set_motp(float value) {
  _has_bits_[0] |= 0x00000008u;
  motp_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMetrics.motp)
}

// optional float miss = 3;
inline bool TrackingMetrics::has_miss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackingMetrics::clear_miss() {
  miss_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrackingMetrics::miss() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.miss)
  return miss_;
}
inline void TrackingMetrics::set_miss(float value) {
  _has_bits_[0] |= 0x00000010u;
  miss_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMetrics.miss)
}

// optional float mismatch = 4;
inline bool TrackingMetrics::has_mismatch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackingMetrics::clear_mismatch() {
  mismatch_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TrackingMetrics::mismatch() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.mismatch)
  return mismatch_;
}
inline void TrackingMetrics::set_mismatch(float value) {
  _has_bits_[0] |= 0x00000020u;
  mismatch_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMetrics.mismatch)
}

// optional float fp = 5;
inline bool TrackingMetrics::has_fp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackingMetrics::clear_fp() {
  fp_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TrackingMetrics::fp() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.fp)
  return fp_;
}
inline void TrackingMetrics::set_fp(float value) {
  _has_bits_[0] |= 0x00000040u;
  fp_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMetrics.fp)
}

// optional float score_cutoff = 6;
inline bool TrackingMetrics::has_score_cutoff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackingMetrics::clear_score_cutoff() {
  score_cutoff_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TrackingMetrics::score_cutoff() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.score_cutoff)
  return score_cutoff_;
}
inline void TrackingMetrics::set_score_cutoff(float value) {
  _has_bits_[0] |= 0x00000080u;
  score_cutoff_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.TrackingMetrics.score_cutoff)
}

// optional .waymo.open_dataset.Breakdown breakdown = 7;
inline bool TrackingMetrics::has_breakdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::waymo::open_dataset::Breakdown& TrackingMetrics::breakdown() const {
  const ::waymo::open_dataset::Breakdown* p = breakdown_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.breakdown)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Breakdown*>(
      &::waymo::open_dataset::_Breakdown_default_instance_);
}
inline ::waymo::open_dataset::Breakdown* TrackingMetrics::release_breakdown() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.TrackingMetrics.breakdown)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Breakdown* temp = breakdown_;
  breakdown_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Breakdown* TrackingMetrics::mutable_breakdown() {
  _has_bits_[0] |= 0x00000001u;
  if (breakdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Breakdown>(GetArenaNoVirtual());
    breakdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.TrackingMetrics.breakdown)
  return breakdown_;
}
inline void TrackingMetrics::set_allocated_breakdown(::waymo::open_dataset::Breakdown* breakdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(breakdown_);
  }
  if (breakdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      breakdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breakdown, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  breakdown_ = breakdown;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.TrackingMetrics.breakdown)
}

// optional .waymo.open_dataset.TrackingMeasurements measurements = 8;
inline bool TrackingMetrics::has_measurements() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackingMetrics::clear_measurements() {
  if (measurements_ != nullptr) measurements_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::TrackingMeasurements& TrackingMetrics::measurements() const {
  const ::waymo::open_dataset::TrackingMeasurements* p = measurements_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.TrackingMetrics.measurements)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::TrackingMeasurements*>(
      &::waymo::open_dataset::_TrackingMeasurements_default_instance_);
}
inline ::waymo::open_dataset::TrackingMeasurements* TrackingMetrics::release_measurements() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.TrackingMetrics.measurements)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::TrackingMeasurements* temp = measurements_;
  measurements_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::TrackingMeasurements* TrackingMetrics::mutable_measurements() {
  _has_bits_[0] |= 0x00000002u;
  if (measurements_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::TrackingMeasurements>(GetArenaNoVirtual());
    measurements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.TrackingMetrics.measurements)
  return measurements_;
}
inline void TrackingMetrics::set_allocated_measurements(::waymo::open_dataset::TrackingMeasurements* measurements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete measurements_;
  }
  if (measurements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      measurements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurements, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  measurements_ = measurements;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.TrackingMetrics.measurements)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::MatcherProto_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::MatcherProto_Type>() {
  return ::waymo::open_dataset::MatcherProto_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmetrics_2eproto
