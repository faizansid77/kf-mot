// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/breakdown.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "waymo_open_dataset/label.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto;
namespace waymo {
namespace open_dataset {
class Breakdown;
class BreakdownDefaultTypeInternal;
extern BreakdownDefaultTypeInternal _Breakdown_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::Breakdown* Arena::CreateMaybeMessage<::waymo::open_dataset::Breakdown>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum Breakdown_GeneratorId : int {
  Breakdown_GeneratorId_UNKNOWN = 0,
  Breakdown_GeneratorId_ONE_SHARD = 1,
  Breakdown_GeneratorId_OBJECT_TYPE = 2,
  Breakdown_GeneratorId_RANGE = 3,
  Breakdown_GeneratorId_TIME_OF_DAY = 4,
  Breakdown_GeneratorId_LOCATION = 5,
  Breakdown_GeneratorId_WEATHER = 6,
  Breakdown_GeneratorId_VELOCITY = 7,
  Breakdown_GeneratorId_ALL_BUT_SIGN = 8
};
bool Breakdown_GeneratorId_IsValid(int value);
constexpr Breakdown_GeneratorId Breakdown_GeneratorId_GeneratorId_MIN = Breakdown_GeneratorId_UNKNOWN;
constexpr Breakdown_GeneratorId Breakdown_GeneratorId_GeneratorId_MAX = Breakdown_GeneratorId_ALL_BUT_SIGN;
constexpr int Breakdown_GeneratorId_GeneratorId_ARRAYSIZE = Breakdown_GeneratorId_GeneratorId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Breakdown_GeneratorId_descriptor();
template<typename T>
inline const std::string& Breakdown_GeneratorId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Breakdown_GeneratorId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Breakdown_GeneratorId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Breakdown_GeneratorId_descriptor(), enum_t_value);
}
inline bool Breakdown_GeneratorId_Parse(
    const std::string& name, Breakdown_GeneratorId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Breakdown_GeneratorId>(
    Breakdown_GeneratorId_descriptor(), name, value);
}
// ===================================================================

class Breakdown :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Breakdown) */ {
 public:
  Breakdown();
  virtual ~Breakdown();

  Breakdown(const Breakdown& from);
  Breakdown(Breakdown&& from) noexcept
    : Breakdown() {
    *this = ::std::move(from);
  }

  inline Breakdown& operator=(const Breakdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Breakdown& operator=(Breakdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Breakdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Breakdown* internal_default_instance() {
    return reinterpret_cast<const Breakdown*>(
               &_Breakdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Breakdown* other);
  friend void swap(Breakdown& a, Breakdown& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Breakdown* New() const final {
    return CreateMaybeMessage<Breakdown>(nullptr);
  }

  Breakdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Breakdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Breakdown& from);
  void MergeFrom(const Breakdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Breakdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Breakdown";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Breakdown_GeneratorId GeneratorId;
  static constexpr GeneratorId UNKNOWN =
    Breakdown_GeneratorId_UNKNOWN;
  static constexpr GeneratorId ONE_SHARD =
    Breakdown_GeneratorId_ONE_SHARD;
  static constexpr GeneratorId OBJECT_TYPE =
    Breakdown_GeneratorId_OBJECT_TYPE;
  static constexpr GeneratorId RANGE =
    Breakdown_GeneratorId_RANGE;
  static constexpr GeneratorId TIME_OF_DAY =
    Breakdown_GeneratorId_TIME_OF_DAY;
  static constexpr GeneratorId LOCATION =
    Breakdown_GeneratorId_LOCATION;
  static constexpr GeneratorId WEATHER =
    Breakdown_GeneratorId_WEATHER;
  static constexpr GeneratorId VELOCITY =
    Breakdown_GeneratorId_VELOCITY;
  static constexpr GeneratorId ALL_BUT_SIGN =
    Breakdown_GeneratorId_ALL_BUT_SIGN;
  static inline bool GeneratorId_IsValid(int value) {
    return Breakdown_GeneratorId_IsValid(value);
  }
  static constexpr GeneratorId GeneratorId_MIN =
    Breakdown_GeneratorId_GeneratorId_MIN;
  static constexpr GeneratorId GeneratorId_MAX =
    Breakdown_GeneratorId_GeneratorId_MAX;
  static constexpr int GeneratorId_ARRAYSIZE =
    Breakdown_GeneratorId_GeneratorId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GeneratorId_descriptor() {
    return Breakdown_GeneratorId_descriptor();
  }
  template<typename T>
  static inline const std::string& GeneratorId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GeneratorId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GeneratorId_Name.");
    return Breakdown_GeneratorId_Name(enum_t_value);
  }
  static inline bool GeneratorId_Parse(const std::string& name,
      GeneratorId* value) {
    return Breakdown_GeneratorId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .waymo.open_dataset.Breakdown.GeneratorId generator_id = 1;
  bool has_generator_id() const;
  void clear_generator_id();
  static const int kGeneratorIdFieldNumber = 1;
  ::waymo::open_dataset::Breakdown_GeneratorId generator_id() const;
  void set_generator_id(::waymo::open_dataset::Breakdown_GeneratorId value);

  // optional int32 shard = 2;
  bool has_shard() const;
  void clear_shard();
  static const int kShardFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 shard() const;
  void set_shard(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .waymo.open_dataset.Label.DifficultyLevel difficulty_level = 3;
  bool has_difficulty_level() const;
  void clear_difficulty_level();
  static const int kDifficultyLevelFieldNumber = 3;
  ::waymo::open_dataset::Label_DifficultyLevel difficulty_level() const;
  void set_difficulty_level(::waymo::open_dataset::Label_DifficultyLevel value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Breakdown)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int generator_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_;
  int difficulty_level_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Breakdown

// optional .waymo.open_dataset.Breakdown.GeneratorId generator_id = 1;
inline bool Breakdown::has_generator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Breakdown::clear_generator_id() {
  generator_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::waymo::open_dataset::Breakdown_GeneratorId Breakdown::generator_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Breakdown.generator_id)
  return static_cast< ::waymo::open_dataset::Breakdown_GeneratorId >(generator_id_);
}
inline void Breakdown::set_generator_id(::waymo::open_dataset::Breakdown_GeneratorId value) {
  assert(::waymo::open_dataset::Breakdown_GeneratorId_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  generator_id_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Breakdown.generator_id)
}

// optional int32 shard = 2;
inline bool Breakdown::has_shard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Breakdown::clear_shard() {
  shard_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Breakdown::shard() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Breakdown.shard)
  return shard_;
}
inline void Breakdown::set_shard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  shard_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Breakdown.shard)
}

// optional .waymo.open_dataset.Label.DifficultyLevel difficulty_level = 3;
inline bool Breakdown::has_difficulty_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Breakdown::clear_difficulty_level() {
  difficulty_level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::waymo::open_dataset::Label_DifficultyLevel Breakdown::difficulty_level() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Breakdown.difficulty_level)
  return static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(difficulty_level_);
}
inline void Breakdown::set_difficulty_level(::waymo::open_dataset::Label_DifficultyLevel value) {
  assert(::waymo::open_dataset::Label_DifficultyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  difficulty_level_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Breakdown.difficulty_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::Breakdown_GeneratorId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Breakdown_GeneratorId>() {
  return ::waymo::open_dataset::Breakdown_GeneratorId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fbreakdown_2eproto
