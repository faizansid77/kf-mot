// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/label.proto

#include "waymo_open_dataset/label.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2flabel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_Box_waymo_5fopen_5fdataset_2flabel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2flabel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_Metadata_waymo_5fopen_5fdataset_2flabel_2eproto;
namespace waymo {
namespace open_dataset {
class Label_BoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label_Box> _instance;
} _Label_Box_default_instance_;
class Label_MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label_Metadata> _instance;
} _Label_Metadata_default_instance_;
class LabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label> _instance;
} _Label_default_instance_;
class Polygon2dProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon2dProto> _instance;
} _Polygon2dProto_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Label_default_instance_;
    new (ptr) ::waymo::open_dataset::Label();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Label::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto}, {
      &scc_info_Label_Box_waymo_5fopen_5fdataset_2flabel_2eproto.base,
      &scc_info_Label_Metadata_waymo_5fopen_5fdataset_2flabel_2eproto.base,}};

static void InitDefaultsscc_info_Label_Box_waymo_5fopen_5fdataset_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Label_Box_default_instance_;
    new (ptr) ::waymo::open_dataset::Label_Box();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Label_Box::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_Box_waymo_5fopen_5fdataset_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Label_Box_waymo_5fopen_5fdataset_2flabel_2eproto}, {}};

static void InitDefaultsscc_info_Label_Metadata_waymo_5fopen_5fdataset_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Label_Metadata_default_instance_;
    new (ptr) ::waymo::open_dataset::Label_Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Label_Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_Metadata_waymo_5fopen_5fdataset_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Label_Metadata_waymo_5fopen_5fdataset_2flabel_2eproto}, {}};

static void InitDefaultsscc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Polygon2dProto_default_instance_;
    new (ptr) ::waymo::open_dataset::Polygon2dProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Polygon2dProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2flabel_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_waymo_5fopen_5fdataset_2flabel_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2flabel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2flabel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, center_x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, center_y_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, center_z_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, length_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, width_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, height_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Box, heading_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Metadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Metadata, speed_x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Metadata, speed_y_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Metadata, accel_x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label_Metadata, accel_y_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, box_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, metadata_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, detection_difficulty_level_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, tracking_difficulty_level_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Label, num_lidar_points_in_box_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Polygon2dProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Polygon2dProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Polygon2dProto, x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Polygon2dProto, y_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Polygon2dProto, id_),
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::waymo::open_dataset::Label_Box)},
  { 19, 28, sizeof(::waymo::open_dataset::Label_Metadata)},
  { 32, 44, sizeof(::waymo::open_dataset::Label)},
  { 51, 59, sizeof(::waymo::open_dataset::Polygon2dProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Label_Box_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Label_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Label_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Polygon2dProto_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2flabel_2eproto[] =
  "\n\036waymo_open_dataset/label.proto\022\022waymo."
  "open_dataset\"\217\006\n\005Label\022*\n\003box\030\001 \001(\0132\035.wa"
  "ymo.open_dataset.Label.Box\0224\n\010metadata\030\002"
  " \001(\0132\".waymo.open_dataset.Label.Metadata"
  "\022,\n\004type\030\003 \001(\0162\036.waymo.open_dataset.Labe"
  "l.Type\022\n\n\002id\030\004 \001(\t\022M\n\032detection_difficul"
  "ty_level\030\005 \001(\0162).waymo.open_dataset.Labe"
  "l.DifficultyLevel\022L\n\031tracking_difficulty"
  "_level\030\006 \001(\0162).waymo.open_dataset.Label."
  "DifficultyLevel\022\037\n\027num_lidar_points_in_b"
  "ox\030\007 \001(\005\032\277\001\n\003Box\022\020\n\010center_x\030\001 \001(\001\022\020\n\010ce"
  "nter_y\030\002 \001(\001\022\020\n\010center_z\030\003 \001(\001\022\016\n\006length"
  "\030\005 \001(\001\022\r\n\005width\030\004 \001(\001\022\016\n\006height\030\006 \001(\001\022\017\n"
  "\007heading\030\007 \001(\001\"B\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000"
  "\022\013\n\007TYPE_3D\020\001\022\013\n\007TYPE_2D\020\002\022\016\n\nTYPE_AA_2D"
  "\020\003\032N\n\010Metadata\022\017\n\007speed_x\030\001 \001(\001\022\017\n\007speed"
  "_y\030\002 \001(\001\022\017\n\007accel_x\030\003 \001(\001\022\017\n\007accel_y\030\004 \001"
  "(\001\"`\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\020\n\014TYPE_VEH"
  "ICLE\020\001\022\023\n\017TYPE_PEDESTRIAN\020\002\022\r\n\tTYPE_SIGN"
  "\020\003\022\020\n\014TYPE_CYCLIST\020\004\"8\n\017DifficultyLevel\022"
  "\013\n\007UNKNOWN\020\000\022\013\n\007LEVEL_1\020\001\022\013\n\007LEVEL_2\020\002\"2"
  "\n\016Polygon2dProto\022\t\n\001x\030\001 \003(\001\022\t\n\001y\030\002 \003(\001\022\n"
  "\n\002id\030\003 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_sccs[4] = {
  &scc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto.base,
  &scc_info_Label_Box_waymo_5fopen_5fdataset_2flabel_2eproto.base,
  &scc_info_Label_Metadata_waymo_5fopen_5fdataset_2flabel_2eproto.base,
  &scc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2flabel_2eproto, "waymo_open_dataset/label.proto", 890,
  &descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2flabel_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2flabel_2eproto, 4, file_level_enum_descriptors_waymo_5fopen_5fdataset_2flabel_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2flabel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2flabel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto), true);
namespace waymo {
namespace open_dataset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_Box_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2flabel_2eproto[0];
}
bool Label_Box_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Label_Box_Type Label_Box::TYPE_UNKNOWN;
constexpr Label_Box_Type Label_Box::TYPE_3D;
constexpr Label_Box_Type Label_Box::TYPE_2D;
constexpr Label_Box_Type Label_Box::TYPE_AA_2D;
constexpr Label_Box_Type Label_Box::Type_MIN;
constexpr Label_Box_Type Label_Box::Type_MAX;
constexpr int Label_Box::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2flabel_2eproto[1];
}
bool Label_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Label_Type Label::TYPE_UNKNOWN;
constexpr Label_Type Label::TYPE_VEHICLE;
constexpr Label_Type Label::TYPE_PEDESTRIAN;
constexpr Label_Type Label::TYPE_SIGN;
constexpr Label_Type Label::TYPE_CYCLIST;
constexpr Label_Type Label::Type_MIN;
constexpr Label_Type Label::Type_MAX;
constexpr int Label::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_DifficultyLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2flabel_2eproto[2];
}
bool Label_DifficultyLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Label_DifficultyLevel Label::UNKNOWN;
constexpr Label_DifficultyLevel Label::LEVEL_1;
constexpr Label_DifficultyLevel Label::LEVEL_2;
constexpr Label_DifficultyLevel Label::DifficultyLevel_MIN;
constexpr Label_DifficultyLevel Label::DifficultyLevel_MAX;
constexpr int Label::DifficultyLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Label_Box::InitAsDefaultInstance() {
}
class Label_Box::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Label_Box>()._has_bits_);
  static void set_has_center_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_center_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_center_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Label_Box::kCenterXFieldNumber;
const int Label_Box::kCenterYFieldNumber;
const int Label_Box::kCenterZFieldNumber;
const int Label_Box::kLengthFieldNumber;
const int Label_Box::kWidthFieldNumber;
const int Label_Box::kHeightFieldNumber;
const int Label_Box::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Label_Box::Label_Box()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Label.Box)
}
Label_Box::Label_Box(const Label_Box& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&center_x_, &from.center_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&center_x_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Label.Box)
}

void Label_Box::SharedCtor() {
  ::memset(&center_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&center_x_)) + sizeof(heading_));
}

Label_Box::~Label_Box() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Label.Box)
  SharedDtor();
}

void Label_Box::SharedDtor() {
}

void Label_Box::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label_Box& Label_Box::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_Box_waymo_5fopen_5fdataset_2flabel_2eproto.base);
  return *internal_default_instance();
}


void Label_Box::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Label.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&center_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&center_x_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Label_Box::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double center_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          HasBitSetters::set_has_center_x(&has_bits);
          center_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double center_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          HasBitSetters::set_has_center_y(&has_bits);
          center_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double center_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          HasBitSetters::set_has_center_z(&has_bits);
          center_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          HasBitSetters::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          HasBitSetters::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          HasBitSetters::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          HasBitSetters::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Label_Box::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Label.Box)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double center_x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_center_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double center_y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_center_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double center_z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_center_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_heading(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Label.Box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Label.Box)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Label_Box::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Label.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double center_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->center_x(), output);
  }

  // optional double center_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->center_y(), output);
  }

  // optional double center_z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->center_z(), output);
  }

  // optional double width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->width(), output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->height(), output);
  }

  // optional double heading = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Label.Box)
}

::PROTOBUF_NAMESPACE_ID::uint8* Label_Box::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Label.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double center_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->center_x(), target);
  }

  // optional double center_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->center_y(), target);
  }

  // optional double center_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->center_z(), target);
  }

  // optional double width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->width(), target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->height(), target);
  }

  // optional double heading = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Label.Box)
  return target;
}

size_t Label_Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Label.Box)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double center_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double center_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double center_z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double height = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double heading = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label_Box::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Label.Box)
  GOOGLE_DCHECK_NE(&from, this);
  const Label_Box* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label_Box>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Label.Box)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Label.Box)
    MergeFrom(*source);
  }
}

void Label_Box::MergeFrom(const Label_Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Label.Box)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      center_x_ = from.center_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      center_y_ = from.center_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      center_z_ = from.center_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Label_Box::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Label.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label_Box::CopyFrom(const Label_Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Label.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label_Box::IsInitialized() const {
  return true;
}

void Label_Box::Swap(Label_Box* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Label_Box::InternalSwap(Label_Box* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(center_x_, other->center_x_);
  swap(center_y_, other->center_y_);
  swap(center_z_, other->center_z_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(height_, other->height_);
  swap(heading_, other->heading_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Label_Box::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Label_Metadata::InitAsDefaultInstance() {
}
class Label_Metadata::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Label_Metadata>()._has_bits_);
  static void set_has_speed_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Label_Metadata::kSpeedXFieldNumber;
const int Label_Metadata::kSpeedYFieldNumber;
const int Label_Metadata::kAccelXFieldNumber;
const int Label_Metadata::kAccelYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Label_Metadata::Label_Metadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Label.Metadata)
}
Label_Metadata::Label_Metadata(const Label_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_x_, &from.speed_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&accel_y_) -
    reinterpret_cast<char*>(&speed_x_)) + sizeof(accel_y_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Label.Metadata)
}

void Label_Metadata::SharedCtor() {
  ::memset(&speed_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_y_) -
      reinterpret_cast<char*>(&speed_x_)) + sizeof(accel_y_));
}

Label_Metadata::~Label_Metadata() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Label.Metadata)
  SharedDtor();
}

void Label_Metadata::SharedDtor() {
}

void Label_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label_Metadata& Label_Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_Metadata_waymo_5fopen_5fdataset_2flabel_2eproto.base);
  return *internal_default_instance();
}


void Label_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Label.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&speed_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accel_y_) -
        reinterpret_cast<char*>(&speed_x_)) + sizeof(accel_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Label_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double speed_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          HasBitSetters::set_has_speed_x(&has_bits);
          speed_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          HasBitSetters::set_has_speed_y(&has_bits);
          speed_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accel_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          HasBitSetters::set_has_accel_x(&has_bits);
          accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accel_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          HasBitSetters::set_has_accel_y(&has_bits);
          accel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Label_Metadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Label.Metadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double speed_x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_speed_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_speed_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_accel_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_accel_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Label.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Label.Metadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Label_Metadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Label.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->speed_x(), output);
  }

  // optional double speed_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->speed_y(), output);
  }

  // optional double accel_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->accel_x(), output);
  }

  // optional double accel_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->accel_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Label.Metadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* Label_Metadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Label.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->speed_x(), target);
  }

  // optional double speed_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->speed_y(), target);
  }

  // optional double accel_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->accel_x(), target);
  }

  // optional double accel_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->accel_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Label.Metadata)
  return target;
}

size_t Label_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Label.Metadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double speed_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double speed_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double accel_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double accel_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label_Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Label.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Label_Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label_Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Label.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Label.Metadata)
    MergeFrom(*source);
  }
}

void Label_Metadata::MergeFrom(const Label_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Label.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      speed_x_ = from.speed_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_y_ = from.speed_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      accel_x_ = from.accel_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      accel_y_ = from.accel_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Label_Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Label.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label_Metadata::CopyFrom(const Label_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Label.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label_Metadata::IsInitialized() const {
  return true;
}

void Label_Metadata::Swap(Label_Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Label_Metadata::InternalSwap(Label_Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_x_, other->speed_x_);
  swap(speed_y_, other->speed_y_);
  swap(accel_x_, other->accel_x_);
  swap(accel_y_, other->accel_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Label_Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Label::InitAsDefaultInstance() {
  ::waymo::open_dataset::_Label_default_instance_._instance.get_mutable()->box_ = const_cast< ::waymo::open_dataset::Label_Box*>(
      ::waymo::open_dataset::Label_Box::internal_default_instance());
  ::waymo::open_dataset::_Label_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::waymo::open_dataset::Label_Metadata*>(
      ::waymo::open_dataset::Label_Metadata::internal_default_instance());
}
class Label::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Label>()._has_bits_);
  static const ::waymo::open_dataset::Label_Box& box(const Label* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::waymo::open_dataset::Label_Metadata& metadata(const Label* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_detection_difficulty_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tracking_difficulty_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_lidar_points_in_box(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::waymo::open_dataset::Label_Box&
Label::HasBitSetters::box(const Label* msg) {
  return *msg->box_;
}
const ::waymo::open_dataset::Label_Metadata&
Label::HasBitSetters::metadata(const Label* msg) {
  return *msg->metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Label::kBoxFieldNumber;
const int Label::kMetadataFieldNumber;
const int Label::kTypeFieldNumber;
const int Label::kIdFieldNumber;
const int Label::kDetectionDifficultyLevelFieldNumber;
const int Label::kTrackingDifficultyLevelFieldNumber;
const int Label::kNumLidarPointsInBoxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Label::Label()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_box()) {
    box_ = new ::waymo::open_dataset::Label_Box(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::waymo::open_dataset::Label_Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_lidar_points_in_box_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_lidar_points_in_box_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Label)
}

void Label::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_lidar_points_in_box_) -
      reinterpret_cast<char*>(&box_)) + sizeof(num_lidar_points_in_box_));
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete metadata_;
}

void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label& Label::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_waymo_5fopen_5fdataset_2flabel_2eproto.base);
  return *internal_default_instance();
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(box_ != nullptr);
      box_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_lidar_points_in_box_) -
        reinterpret_cast<char*>(&type_)) + sizeof(num_lidar_points_in_box_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Label::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.Label.Box box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Label.Metadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Label.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Label_Type_IsValid(val))) {
            set_type(static_cast<::waymo::open_dataset::Label_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_id(), ptr, ctx, "waymo.open_dataset.Label.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Label.DifficultyLevel detection_difficulty_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Label_DifficultyLevel_IsValid(val))) {
            set_detection_difficulty_level(static_cast<::waymo::open_dataset::Label_DifficultyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Label.DifficultyLevel tracking_difficulty_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Label_DifficultyLevel_IsValid(val))) {
            set_tracking_difficulty_level(static_cast<::waymo::open_dataset::Label_DifficultyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_lidar_points_in_box = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          HasBitSetters::set_has_num_lidar_points_in_box(&has_bits);
          num_lidar_points_in_box_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Label::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Label)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.Label.Box box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Label.Metadata metadata = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Label.Type type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Label_Type_IsValid(value)) {
            set_type(static_cast< ::waymo::open_dataset::Label_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Label.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Label.DifficultyLevel detection_difficulty_level = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Label_DifficultyLevel_IsValid(value)) {
            set_detection_difficulty_level(static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Label.DifficultyLevel tracking_difficulty_level = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Label_DifficultyLevel_IsValid(value)) {
            set_tracking_difficulty_level(static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_lidar_points_in_box = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_num_lidar_points_in_box(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_lidar_points_in_box_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Label)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Label::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Label.Box box = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::box(this), output);
  }

  // optional .waymo.open_dataset.Label.Metadata metadata = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::metadata(this), output);
  }

  // optional .waymo.open_dataset.Label.Type type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Label.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  // optional .waymo.open_dataset.Label.DifficultyLevel detection_difficulty_level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->detection_difficulty_level(), output);
  }

  // optional .waymo.open_dataset.Label.DifficultyLevel tracking_difficulty_level = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->tracking_difficulty_level(), output);
  }

  // optional int32 num_lidar_points_in_box = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_lidar_points_in_box(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Label)
}

::PROTOBUF_NAMESPACE_ID::uint8* Label::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Label.Box box = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::box(this), target);
  }

  // optional .waymo.open_dataset.Label.Metadata metadata = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::metadata(this), target);
  }

  // optional .waymo.open_dataset.Label.Type type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Label.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  // optional .waymo.open_dataset.Label.DifficultyLevel detection_difficulty_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->detection_difficulty_level(), target);
  }

  // optional .waymo.open_dataset.Label.DifficultyLevel tracking_difficulty_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->tracking_difficulty_level(), target);
  }

  // optional int32 num_lidar_points_in_box = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->num_lidar_points_in_box(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Label)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .waymo.open_dataset.Label.Box box = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_);
    }

    // optional .waymo.open_dataset.Label.Metadata metadata = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .waymo.open_dataset.Label.Type type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .waymo.open_dataset.Label.DifficultyLevel detection_difficulty_level = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->detection_difficulty_level());
    }

    // optional .waymo.open_dataset.Label.DifficultyLevel tracking_difficulty_level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tracking_difficulty_level());
    }

    // optional int32 num_lidar_points_in_box = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_lidar_points_in_box());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Label)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_box()->::waymo::open_dataset::Label_Box::MergeFrom(from.box());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_metadata()->::waymo::open_dataset::Label_Metadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      detection_difficulty_level_ = from.detection_difficulty_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      tracking_difficulty_level_ = from.tracking_difficulty_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_lidar_points_in_box_ = from.num_lidar_points_in_box_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Label::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::Swap(Label* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(box_, other->box_);
  swap(metadata_, other->metadata_);
  swap(type_, other->type_);
  swap(detection_difficulty_level_, other->detection_difficulty_level_);
  swap(tracking_difficulty_level_, other->tracking_difficulty_level_);
  swap(num_lidar_points_in_box_, other->num_lidar_points_in_box_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon2dProto::InitAsDefaultInstance() {
}
class Polygon2dProto::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Polygon2dProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon2dProto::kXFieldNumber;
const int Polygon2dProto::kYFieldNumber;
const int Polygon2dProto::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon2dProto::Polygon2dProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Polygon2dProto)
}
Polygon2dProto::Polygon2dProto(const Polygon2dProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      x_(from.x_),
      y_(from.y_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Polygon2dProto)
}

void Polygon2dProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Polygon2dProto::~Polygon2dProto() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Polygon2dProto)
  SharedDtor();
}

void Polygon2dProto::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Polygon2dProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon2dProto& Polygon2dProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon2dProto_waymo_5fopen_5fdataset_2flabel_2eproto.base);
  return *internal_default_instance();
}


void Polygon2dProto::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Polygon2dProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Polygon2dProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 9);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_x(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 17);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_y(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_id(), ptr, ctx, "waymo.open_dataset.Polygon2dProto.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Polygon2dProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Polygon2dProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_x())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_y())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.Polygon2dProto.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Polygon2dProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Polygon2dProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Polygon2dProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Polygon2dProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double x = 1;
  for (int i = 0, n = this->x_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      1, this->x(i), output);
  }

  // repeated double y = 2;
  for (int i = 0, n = this->y_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      2, this->y(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Polygon2dProto.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Polygon2dProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon2dProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Polygon2dProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double x = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteDoubleToArray(1, this->x_, target);

  // repeated double y = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteDoubleToArray(2, this->y_, target);

  cached_has_bits = _has_bits_[0];
  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.Polygon2dProto.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Polygon2dProto)
  return target;
}

size_t Polygon2dProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Polygon2dProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double x = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->x_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->x_size());
    total_size += data_size;
  }

  // repeated double y = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->y_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->y_size());
    total_size += data_size;
  }

  // optional string id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon2dProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Polygon2dProto)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon2dProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon2dProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Polygon2dProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Polygon2dProto)
    MergeFrom(*source);
  }
}

void Polygon2dProto::MergeFrom(const Polygon2dProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Polygon2dProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  if (from.has_id()) {
    _has_bits_[0] |= 0x00000001u;
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void Polygon2dProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Polygon2dProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon2dProto::CopyFrom(const Polygon2dProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Polygon2dProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon2dProto::IsInitialized() const {
  return true;
}

void Polygon2dProto::Swap(Polygon2dProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon2dProto::InternalSwap(Polygon2dProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon2dProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Label_Box* Arena::CreateMaybeMessage< ::waymo::open_dataset::Label_Box >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Label_Box >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Label_Metadata* Arena::CreateMaybeMessage< ::waymo::open_dataset::Label_Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Label_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Label* Arena::CreateMaybeMessage< ::waymo::open_dataset::Label >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Polygon2dProto* Arena::CreateMaybeMessage< ::waymo::open_dataset::Polygon2dProto >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Polygon2dProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
