// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/label.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2flabel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2flabel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2flabel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2flabel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto;
namespace waymo {
namespace open_dataset {
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class Label_Box;
class Label_BoxDefaultTypeInternal;
extern Label_BoxDefaultTypeInternal _Label_Box_default_instance_;
class Label_Metadata;
class Label_MetadataDefaultTypeInternal;
extern Label_MetadataDefaultTypeInternal _Label_Metadata_default_instance_;
class Polygon2dProto;
class Polygon2dProtoDefaultTypeInternal;
extern Polygon2dProtoDefaultTypeInternal _Polygon2dProto_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::Label* Arena::CreateMaybeMessage<::waymo::open_dataset::Label>(Arena*);
template<> ::waymo::open_dataset::Label_Box* Arena::CreateMaybeMessage<::waymo::open_dataset::Label_Box>(Arena*);
template<> ::waymo::open_dataset::Label_Metadata* Arena::CreateMaybeMessage<::waymo::open_dataset::Label_Metadata>(Arena*);
template<> ::waymo::open_dataset::Polygon2dProto* Arena::CreateMaybeMessage<::waymo::open_dataset::Polygon2dProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum Label_Box_Type : int {
  Label_Box_Type_TYPE_UNKNOWN = 0,
  Label_Box_Type_TYPE_3D = 1,
  Label_Box_Type_TYPE_2D = 2,
  Label_Box_Type_TYPE_AA_2D = 3
};
bool Label_Box_Type_IsValid(int value);
constexpr Label_Box_Type Label_Box_Type_Type_MIN = Label_Box_Type_TYPE_UNKNOWN;
constexpr Label_Box_Type Label_Box_Type_Type_MAX = Label_Box_Type_TYPE_AA_2D;
constexpr int Label_Box_Type_Type_ARRAYSIZE = Label_Box_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_Box_Type_descriptor();
template<typename T>
inline const std::string& Label_Box_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Label_Box_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Label_Box_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Label_Box_Type_descriptor(), enum_t_value);
}
inline bool Label_Box_Type_Parse(
    const std::string& name, Label_Box_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Label_Box_Type>(
    Label_Box_Type_descriptor(), name, value);
}
enum Label_Type : int {
  Label_Type_TYPE_UNKNOWN = 0,
  Label_Type_TYPE_VEHICLE = 1,
  Label_Type_TYPE_PEDESTRIAN = 2,
  Label_Type_TYPE_SIGN = 3,
  Label_Type_TYPE_CYCLIST = 4
};
bool Label_Type_IsValid(int value);
constexpr Label_Type Label_Type_Type_MIN = Label_Type_TYPE_UNKNOWN;
constexpr Label_Type Label_Type_Type_MAX = Label_Type_TYPE_CYCLIST;
constexpr int Label_Type_Type_ARRAYSIZE = Label_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_Type_descriptor();
template<typename T>
inline const std::string& Label_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Label_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Label_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Label_Type_descriptor(), enum_t_value);
}
inline bool Label_Type_Parse(
    const std::string& name, Label_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Label_Type>(
    Label_Type_descriptor(), name, value);
}
enum Label_DifficultyLevel : int {
  Label_DifficultyLevel_UNKNOWN = 0,
  Label_DifficultyLevel_LEVEL_1 = 1,
  Label_DifficultyLevel_LEVEL_2 = 2
};
bool Label_DifficultyLevel_IsValid(int value);
constexpr Label_DifficultyLevel Label_DifficultyLevel_DifficultyLevel_MIN = Label_DifficultyLevel_UNKNOWN;
constexpr Label_DifficultyLevel Label_DifficultyLevel_DifficultyLevel_MAX = Label_DifficultyLevel_LEVEL_2;
constexpr int Label_DifficultyLevel_DifficultyLevel_ARRAYSIZE = Label_DifficultyLevel_DifficultyLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_DifficultyLevel_descriptor();
template<typename T>
inline const std::string& Label_DifficultyLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Label_DifficultyLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Label_DifficultyLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Label_DifficultyLevel_descriptor(), enum_t_value);
}
inline bool Label_DifficultyLevel_Parse(
    const std::string& name, Label_DifficultyLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Label_DifficultyLevel>(
    Label_DifficultyLevel_descriptor(), name, value);
}
// ===================================================================

class Label_Box :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Label.Box) */ {
 public:
  Label_Box();
  virtual ~Label_Box();

  Label_Box(const Label_Box& from);
  Label_Box(Label_Box&& from) noexcept
    : Label_Box() {
    *this = ::std::move(from);
  }

  inline Label_Box& operator=(const Label_Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label_Box& operator=(Label_Box&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label_Box& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label_Box* internal_default_instance() {
    return reinterpret_cast<const Label_Box*>(
               &_Label_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Label_Box* other);
  friend void swap(Label_Box& a, Label_Box& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Label_Box* New() const final {
    return CreateMaybeMessage<Label_Box>(nullptr);
  }

  Label_Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label_Box>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label_Box& from);
  void MergeFrom(const Label_Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label_Box* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Label.Box";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Label_Box_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    Label_Box_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_3D =
    Label_Box_Type_TYPE_3D;
  static constexpr Type TYPE_2D =
    Label_Box_Type_TYPE_2D;
  static constexpr Type TYPE_AA_2D =
    Label_Box_Type_TYPE_AA_2D;
  static inline bool Type_IsValid(int value) {
    return Label_Box_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Label_Box_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Label_Box_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Label_Box_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Label_Box_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Label_Box_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Label_Box_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double center_x = 1;
  bool has_center_x() const;
  void clear_center_x();
  static const int kCenterXFieldNumber = 1;
  double center_x() const;
  void set_center_x(double value);

  // optional double center_y = 2;
  bool has_center_y() const;
  void clear_center_y();
  static const int kCenterYFieldNumber = 2;
  double center_y() const;
  void set_center_y(double value);

  // optional double center_z = 3;
  bool has_center_z() const;
  void clear_center_z();
  static const int kCenterZFieldNumber = 3;
  double center_z() const;
  void set_center_z(double value);

  // optional double width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  double width() const;
  void set_width(double value);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional double height = 6;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  double height() const;
  void set_height(double value);

  // optional double heading = 7;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Label.Box)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double center_x_;
  double center_y_;
  double center_z_;
  double width_;
  double length_;
  double height_;
  double heading_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2flabel_2eproto;
};
// -------------------------------------------------------------------

class Label_Metadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Label.Metadata) */ {
 public:
  Label_Metadata();
  virtual ~Label_Metadata();

  Label_Metadata(const Label_Metadata& from);
  Label_Metadata(Label_Metadata&& from) noexcept
    : Label_Metadata() {
    *this = ::std::move(from);
  }

  inline Label_Metadata& operator=(const Label_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label_Metadata& operator=(Label_Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label_Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label_Metadata* internal_default_instance() {
    return reinterpret_cast<const Label_Metadata*>(
               &_Label_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Label_Metadata* other);
  friend void swap(Label_Metadata& a, Label_Metadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Label_Metadata* New() const final {
    return CreateMaybeMessage<Label_Metadata>(nullptr);
  }

  Label_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label_Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label_Metadata& from);
  void MergeFrom(const Label_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Label.Metadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double speed_x = 1;
  bool has_speed_x() const;
  void clear_speed_x();
  static const int kSpeedXFieldNumber = 1;
  double speed_x() const;
  void set_speed_x(double value);

  // optional double speed_y = 2;
  bool has_speed_y() const;
  void clear_speed_y();
  static const int kSpeedYFieldNumber = 2;
  double speed_y() const;
  void set_speed_y(double value);

  // optional double accel_x = 3;
  bool has_accel_x() const;
  void clear_accel_x();
  static const int kAccelXFieldNumber = 3;
  double accel_x() const;
  void set_accel_x(double value);

  // optional double accel_y = 4;
  bool has_accel_y() const;
  void clear_accel_y();
  static const int kAccelYFieldNumber = 4;
  double accel_y() const;
  void set_accel_y(double value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Label.Metadata)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double speed_x_;
  double speed_y_;
  double accel_x_;
  double accel_y_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2flabel_2eproto;
};
// -------------------------------------------------------------------

class Label :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Label* other);
  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Label";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Label_Box Box;
  typedef Label_Metadata Metadata;

  typedef Label_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    Label_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_VEHICLE =
    Label_Type_TYPE_VEHICLE;
  static constexpr Type TYPE_PEDESTRIAN =
    Label_Type_TYPE_PEDESTRIAN;
  static constexpr Type TYPE_SIGN =
    Label_Type_TYPE_SIGN;
  static constexpr Type TYPE_CYCLIST =
    Label_Type_TYPE_CYCLIST;
  static inline bool Type_IsValid(int value) {
    return Label_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Label_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Label_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Label_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Label_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Label_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Label_Type_Parse(name, value);
  }

  typedef Label_DifficultyLevel DifficultyLevel;
  static constexpr DifficultyLevel UNKNOWN =
    Label_DifficultyLevel_UNKNOWN;
  static constexpr DifficultyLevel LEVEL_1 =
    Label_DifficultyLevel_LEVEL_1;
  static constexpr DifficultyLevel LEVEL_2 =
    Label_DifficultyLevel_LEVEL_2;
  static inline bool DifficultyLevel_IsValid(int value) {
    return Label_DifficultyLevel_IsValid(value);
  }
  static constexpr DifficultyLevel DifficultyLevel_MIN =
    Label_DifficultyLevel_DifficultyLevel_MIN;
  static constexpr DifficultyLevel DifficultyLevel_MAX =
    Label_DifficultyLevel_DifficultyLevel_MAX;
  static constexpr int DifficultyLevel_ARRAYSIZE =
    Label_DifficultyLevel_DifficultyLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DifficultyLevel_descriptor() {
    return Label_DifficultyLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& DifficultyLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DifficultyLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DifficultyLevel_Name.");
    return Label_DifficultyLevel_Name(enum_t_value);
  }
  static inline bool DifficultyLevel_Parse(const std::string& name,
      DifficultyLevel* value) {
    return Label_DifficultyLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .waymo.open_dataset.Label.Box box = 1;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 1;
  const ::waymo::open_dataset::Label_Box& box() const;
  ::waymo::open_dataset::Label_Box* release_box();
  ::waymo::open_dataset::Label_Box* mutable_box();
  void set_allocated_box(::waymo::open_dataset::Label_Box* box);

  // optional .waymo.open_dataset.Label.Metadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::waymo::open_dataset::Label_Metadata& metadata() const;
  ::waymo::open_dataset::Label_Metadata* release_metadata();
  ::waymo::open_dataset::Label_Metadata* mutable_metadata();
  void set_allocated_metadata(::waymo::open_dataset::Label_Metadata* metadata);

  // optional .waymo.open_dataset.Label.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::waymo::open_dataset::Label_Type type() const;
  void set_type(::waymo::open_dataset::Label_Type value);

  // optional .waymo.open_dataset.Label.DifficultyLevel detection_difficulty_level = 5;
  bool has_detection_difficulty_level() const;
  void clear_detection_difficulty_level();
  static const int kDetectionDifficultyLevelFieldNumber = 5;
  ::waymo::open_dataset::Label_DifficultyLevel detection_difficulty_level() const;
  void set_detection_difficulty_level(::waymo::open_dataset::Label_DifficultyLevel value);

  // optional .waymo.open_dataset.Label.DifficultyLevel tracking_difficulty_level = 6;
  bool has_tracking_difficulty_level() const;
  void clear_tracking_difficulty_level();
  static const int kTrackingDifficultyLevelFieldNumber = 6;
  ::waymo::open_dataset::Label_DifficultyLevel tracking_difficulty_level() const;
  void set_tracking_difficulty_level(::waymo::open_dataset::Label_DifficultyLevel value);

  // optional int32 num_lidar_points_in_box = 7;
  bool has_num_lidar_points_in_box() const;
  void clear_num_lidar_points_in_box();
  static const int kNumLidarPointsInBoxFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 num_lidar_points_in_box() const;
  void set_num_lidar_points_in_box(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Label)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::waymo::open_dataset::Label_Box* box_;
  ::waymo::open_dataset::Label_Metadata* metadata_;
  int type_;
  int detection_difficulty_level_;
  int tracking_difficulty_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_lidar_points_in_box_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2flabel_2eproto;
};
// -------------------------------------------------------------------

class Polygon2dProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Polygon2dProto) */ {
 public:
  Polygon2dProto();
  virtual ~Polygon2dProto();

  Polygon2dProto(const Polygon2dProto& from);
  Polygon2dProto(Polygon2dProto&& from) noexcept
    : Polygon2dProto() {
    *this = ::std::move(from);
  }

  inline Polygon2dProto& operator=(const Polygon2dProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon2dProto& operator=(Polygon2dProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon2dProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon2dProto* internal_default_instance() {
    return reinterpret_cast<const Polygon2dProto*>(
               &_Polygon2dProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Polygon2dProto* other);
  friend void swap(Polygon2dProto& a, Polygon2dProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon2dProto* New() const final {
    return CreateMaybeMessage<Polygon2dProto>(nullptr);
  }

  Polygon2dProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon2dProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon2dProto& from);
  void MergeFrom(const Polygon2dProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon2dProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Polygon2dProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double x = 1;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x(int index) const;
  void set_x(int index, double value);
  void add_x(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_x();

  // repeated double y = 2;
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y(int index) const;
  void set_y(int index, double value);
  void add_y(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_y();

  // optional string id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Polygon2dProto)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > y_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2flabel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Label_Box

// optional double center_x = 1;
inline bool Label_Box::has_center_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Label_Box::clear_center_x() {
  center_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Label_Box::center_x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Box.center_x)
  return center_x_;
}
inline void Label_Box::set_center_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  center_x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Box.center_x)
}

// optional double center_y = 2;
inline bool Label_Box::has_center_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Label_Box::clear_center_y() {
  center_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Label_Box::center_y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Box.center_y)
  return center_y_;
}
inline void Label_Box::set_center_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  center_y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Box.center_y)
}

// optional double center_z = 3;
inline bool Label_Box::has_center_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Label_Box::clear_center_z() {
  center_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Label_Box::center_z() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Box.center_z)
  return center_z_;
}
inline void Label_Box::set_center_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  center_z_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Box.center_z)
}

// optional double length = 5;
inline bool Label_Box::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Label_Box::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Label_Box::length() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Box.length)
  return length_;
}
inline void Label_Box::set_length(double value) {
  _has_bits_[0] |= 0x00000010u;
  length_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Box.length)
}

// optional double width = 4;
inline bool Label_Box::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Label_Box::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Label_Box::width() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Box.width)
  return width_;
}
inline void Label_Box::set_width(double value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Box.width)
}

// optional double height = 6;
inline bool Label_Box::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Label_Box::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Label_Box::height() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Box.height)
  return height_;
}
inline void Label_Box::set_height(double value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Box.height)
}

// optional double heading = 7;
inline bool Label_Box::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Label_Box::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Label_Box::heading() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Box.heading)
  return heading_;
}
inline void Label_Box::set_heading(double value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Box.heading)
}

// -------------------------------------------------------------------

// Label_Metadata

// optional double speed_x = 1;
inline bool Label_Metadata::has_speed_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Label_Metadata::clear_speed_x() {
  speed_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Label_Metadata::speed_x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Metadata.speed_x)
  return speed_x_;
}
inline void Label_Metadata::set_speed_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  speed_x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Metadata.speed_x)
}

// optional double speed_y = 2;
inline bool Label_Metadata::has_speed_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Label_Metadata::clear_speed_y() {
  speed_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Label_Metadata::speed_y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Metadata.speed_y)
  return speed_y_;
}
inline void Label_Metadata::set_speed_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  speed_y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Metadata.speed_y)
}

// optional double accel_x = 3;
inline bool Label_Metadata::has_accel_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Label_Metadata::clear_accel_x() {
  accel_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Label_Metadata::accel_x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Metadata.accel_x)
  return accel_x_;
}
inline void Label_Metadata::set_accel_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  accel_x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Metadata.accel_x)
}

// optional double accel_y = 4;
inline bool Label_Metadata::has_accel_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Label_Metadata::clear_accel_y() {
  accel_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Label_Metadata::accel_y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.Metadata.accel_y)
  return accel_y_;
}
inline void Label_Metadata::set_accel_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  accel_y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.Metadata.accel_y)
}

// -------------------------------------------------------------------

// Label

// optional .waymo.open_dataset.Label.Box box = 1;
inline bool Label::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Label::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::Label_Box& Label::box() const {
  const ::waymo::open_dataset::Label_Box* p = box_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.box)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Label_Box*>(
      &::waymo::open_dataset::_Label_Box_default_instance_);
}
inline ::waymo::open_dataset::Label_Box* Label::release_box() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Label.box)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::Label_Box* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Label_Box* Label::mutable_box() {
  _has_bits_[0] |= 0x00000002u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Label_Box>(GetArenaNoVirtual());
    box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Label.box)
  return box_;
}
inline void Label::set_allocated_box(::waymo::open_dataset::Label_Box* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete box_;
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Label.box)
}

// optional .waymo.open_dataset.Label.Metadata metadata = 2;
inline bool Label::has_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Label::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::waymo::open_dataset::Label_Metadata& Label::metadata() const {
  const ::waymo::open_dataset::Label_Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Label_Metadata*>(
      &::waymo::open_dataset::_Label_Metadata_default_instance_);
}
inline ::waymo::open_dataset::Label_Metadata* Label::release_metadata() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Label.metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::waymo::open_dataset::Label_Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Label_Metadata* Label::mutable_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Label_Metadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Label.metadata)
  return metadata_;
}
inline void Label::set_allocated_metadata(::waymo::open_dataset::Label_Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Label.metadata)
}

// optional .waymo.open_dataset.Label.Type type = 3;
inline bool Label::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Label::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::waymo::open_dataset::Label_Type Label::type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.type)
  return static_cast< ::waymo::open_dataset::Label_Type >(type_);
}
inline void Label::set_type(::waymo::open_dataset::Label_Type value) {
  assert(::waymo::open_dataset::Label_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.type)
}

// optional string id = 4;
inline bool Label::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Label::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Label::id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.id)
  return id_.GetNoArena();
}
inline void Label::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.id)
}
inline void Label::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Label.id)
}
inline void Label::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Label.id)
}
inline void Label::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Label.id)
}
inline std::string* Label::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Label.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Label::release_id() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Label.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Label.id)
}

// optional .waymo.open_dataset.Label.DifficultyLevel detection_difficulty_level = 5;
inline bool Label::has_detection_difficulty_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Label::clear_detection_difficulty_level() {
  detection_difficulty_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::waymo::open_dataset::Label_DifficultyLevel Label::detection_difficulty_level() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.detection_difficulty_level)
  return static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(detection_difficulty_level_);
}
inline void Label::set_detection_difficulty_level(::waymo::open_dataset::Label_DifficultyLevel value) {
  assert(::waymo::open_dataset::Label_DifficultyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  detection_difficulty_level_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.detection_difficulty_level)
}

// optional .waymo.open_dataset.Label.DifficultyLevel tracking_difficulty_level = 6;
inline bool Label::has_tracking_difficulty_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Label::clear_tracking_difficulty_level() {
  tracking_difficulty_level_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::waymo::open_dataset::Label_DifficultyLevel Label::tracking_difficulty_level() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.tracking_difficulty_level)
  return static_cast< ::waymo::open_dataset::Label_DifficultyLevel >(tracking_difficulty_level_);
}
inline void Label::set_tracking_difficulty_level(::waymo::open_dataset::Label_DifficultyLevel value) {
  assert(::waymo::open_dataset::Label_DifficultyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  tracking_difficulty_level_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.tracking_difficulty_level)
}

// optional int32 num_lidar_points_in_box = 7;
inline bool Label::has_num_lidar_points_in_box() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Label::clear_num_lidar_points_in_box() {
  num_lidar_points_in_box_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Label::num_lidar_points_in_box() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Label.num_lidar_points_in_box)
  return num_lidar_points_in_box_;
}
inline void Label::set_num_lidar_points_in_box(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_lidar_points_in_box_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Label.num_lidar_points_in_box)
}

// -------------------------------------------------------------------

// Polygon2dProto

// repeated double x = 1;
inline int Polygon2dProto::x_size() const {
  return x_.size();
}
inline void Polygon2dProto::clear_x() {
  x_.Clear();
}
inline double Polygon2dProto::x(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Polygon2dProto.x)
  return x_.Get(index);
}
inline void Polygon2dProto::set_x(int index, double value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Polygon2dProto.x)
}
inline void Polygon2dProto::add_x(double value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Polygon2dProto.x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Polygon2dProto::x() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Polygon2dProto.x)
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Polygon2dProto::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Polygon2dProto.x)
  return &x_;
}

// repeated double y = 2;
inline int Polygon2dProto::y_size() const {
  return y_.size();
}
inline void Polygon2dProto::clear_y() {
  y_.Clear();
}
inline double Polygon2dProto::y(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Polygon2dProto.y)
  return y_.Get(index);
}
inline void Polygon2dProto::set_y(int index, double value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Polygon2dProto.y)
}
inline void Polygon2dProto::add_y(double value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Polygon2dProto.y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Polygon2dProto::y() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Polygon2dProto.y)
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Polygon2dProto::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Polygon2dProto.y)
  return &y_;
}

// optional string id = 3;
inline bool Polygon2dProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Polygon2dProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Polygon2dProto::id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Polygon2dProto.id)
  return id_.GetNoArena();
}
inline void Polygon2dProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Polygon2dProto.id)
}
inline void Polygon2dProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Polygon2dProto.id)
}
inline void Polygon2dProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Polygon2dProto.id)
}
inline void Polygon2dProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Polygon2dProto.id)
}
inline std::string* Polygon2dProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Polygon2dProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Polygon2dProto::release_id() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Polygon2dProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon2dProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Polygon2dProto.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::Label_Box_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Label_Box_Type>() {
  return ::waymo::open_dataset::Label_Box_Type_descriptor();
}
template <> struct is_proto_enum< ::waymo::open_dataset::Label_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Label_Type>() {
  return ::waymo::open_dataset::Label_Type_descriptor();
}
template <> struct is_proto_enum< ::waymo::open_dataset::Label_DifficultyLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Label_DifficultyLevel>() {
  return ::waymo::open_dataset::Label_DifficultyLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2flabel_2eproto
